--- test/test_download.rb	2018-01-20 18:35:08.964014750 +0100
+++ test/test_download.rb.1	2018-01-20 18:36:51.312014994 +0100
@@ -11,7 +11,7 @@
     assert_scripted { scp.download!("/path/to/remote.txt", "/path/to/local.txt") }
     assert_equal "a" * 1234, file.io.string
   end
-  
+
   def test_download_file_with_spaces_in_name_should_escape_remote_file_name
     file = prepare_file("/path/to/local file.txt", "")
 
@@ -25,7 +25,7 @@
 
     assert_scripted { scp.download!("/path/to/remote file.txt", "/path/to/local file.txt") }
   end
-  
+
   def test_download_file_with_metacharacters_in_name_should_escape_remote_file_name
     file = prepare_file("/path/to/local/#{awful_file_name}", "")
 
@@ -70,12 +70,12 @@
     end
 
     error = nil
-    assert_scripted do
-      begin
-        scp.download!("/path/to/remote.txt")
-      rescue
-        error = $!
-      end
+    Net::SSH::Test::Extensions::IO.with_test_extension do
+    begin
+      scp.download!("/path/to/remote.txt")
+    rescue
+      error = $!
+    end
     end
     assert_equal Net::SCP::Error, error.class
     assert_equal "SCP did not finish successfully (1): File not found: /path/to/remote.txt\n", error.message
@@ -116,7 +116,9 @@
 
   def test_download_io_with_recursive_should_raise_error
     expect_scp_session "-f -r /path/to/remote.txt"
-    assert_raises(Net::SCP::Error) { scp.download!("/path/to/remote.txt", StringIO.new, :recursive => true) }
+    Net::SSH::Test::Extensions::IO.with_test_extension do
+      assert_raises(Net::SCP::Error) { scp.download!("/path/to/remote.txt", StringIO.new, :recursive => true) }
+    end
   end
 
   def test_download_io_with_preserve_should_ignore_preserve
@@ -154,8 +156,44 @@
       channel.sends_ok
       channel.gets_data "D0755 0 remote\n"
     end
+    Net::SSH::Test::Extensions::IO.with_test_extension do
+      assert_raises(Net::SCP::Error) { scp.download!("/path/to/remote") }
+    end
+  end
+
+  def test_download_should_raise_error_if_gets_not_ok
+    prepare_file("/path/to/local.txt", "")
+
+    expect_scp_session "-f /path/to/remote.txt" do |channel|
+      channel.sends_ok
+      channel.gets_data "C0666 0 remote.txt\n"
+      channel.sends_ok
+      channel.gets_data "\1"
+    end
+
+    Net::SSH::Test::Extensions::IO.with_test_extension do
+      e = assert_raises(Net::SCP::Error) { scp.download!("/path/to/remote.txt", "/path/to/local.txt") }
+      assert_equal("\1", e.message)
+    end
+  end
+
+  def test_download_directory_should_raise_error_if_local_exists_and_is_not_directory
+    File.stubs(:exists?).with("/path/to/local").returns(true)
+    File.stubs(:exists?).with("/path/to/local/remote").returns(true)
+    File.stubs(:directory?).with("/path/to/local/remote").returns(false)
+
+    expect_scp_session "-f -r /path/to/remote" do |channel|
+      channel.sends_ok
+      channel.gets_data "D0755 0 remote\n"
+      channel.sends_ok
+      channel.gets_data "E\n"
+      channel.sends_ok
+    end
 
-    assert_raises(Net::SCP::Error) { scp.download!("/path/to/remote") }
+    Net::SSH::Test::Extensions::IO.with_test_extension do
+      e = assert_raises(Net::SCP::Error) { scp.download!("/path/to/remote", "/path/to/local", :recursive => true) }
+      assert_match(/exists and is not a directory/, e.message)
+    end
   end
 
   def test_download_directory_should_create_directory_and_files_locally
@@ -180,7 +218,9 @@
       channel.sends_ok
     end
 
-    scp.download!("/path/to/remote", "/path/to/local", :recursive => true, :ssh => { :verbose => :debug })
+    Net::SSH::Test::Extensions::IO.with_test_extension do
+      scp.download!("/path/to/remote", "/path/to/local", :recursive => true, :ssh => { :verbose => :debug })
+    end
     assert_equal "a" * 1234, file.io.string
   end
 
