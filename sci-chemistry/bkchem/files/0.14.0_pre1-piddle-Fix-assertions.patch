diff --git a/bkchem/plugins/piddle/pdfgen.py b/bkchem/plugins/piddle/pdfgen.py
index 5213672..4c056c7 100644
--- a/bkchem/plugins/piddle/pdfgen.py
+++ b/bkchem/plugins/piddle/pdfgen.py
@@ -639,7 +639,7 @@ class Canvas:
 
             #use a flate filter and Ascii Base 85 to compress
             raw = myimage.tostring()
-            assert(len(raw) == imgwidth * imgheight, "Wrong amount of data for image")
+            assert len(raw) == imgwidth * imgheight, "Wrong amount of data for image"
             compressed = zlib.compress(raw)   #this bit is very fast...
             encoded = pdfutils._AsciiBase85Encode(compressed) #...sadly this isn't
 
diff --git a/bkchem/plugins/piddle/pdfutils.py b/bkchem/plugins/piddle/pdfutils.py
index ebde677..4a7675d 100644
--- a/bkchem/plugins/piddle/pdfutils.py
+++ b/bkchem/plugins/piddle/pdfutils.py
@@ -27,7 +27,7 @@ def cacheImageFile(filename):
     code.append('ID')
     #use a flate filter and Ascii Base 85
     raw = img.tostring()
-    assert(len(raw) == imgwidth * imgheight, "Wrong amount of data for image")
+    assert len(raw) == imgwidth * imgheight, "Wrong amount of data for image"
     compressed = zlib.compress(raw)   #this bit is very fast...
     encoded = _AsciiBase85Encode(compressed) #...sadly this isn't
     
diff --git a/bkchem/plugins/piddle/piddlePS.py b/bkchem/plugins/piddle/piddlePS.py
index 4d3c327..3afa361 100644
--- a/bkchem/plugins/piddle/piddlePS.py
+++ b/bkchem/plugins/piddle/piddlePS.py
@@ -866,7 +866,7 @@ translate
        # piddlePDF again
 
        rawimage = myimage.tostring()
-       assert(len(rawimage) == imgwidth*imgheight, 'Wrong amount of data for image') 
+       assert len(rawimage) == imgwidth*imgheight, 'Wrong amount of data for image'
        #compressed = zlib.compress(rawimage) # no zlib at moment
        hex_encoded = self._AsciiHexEncode(rawimage)
        
@@ -957,7 +957,7 @@ translate
                           'image'])
         # after image operator just need to dump image dat to file as hexstring
         rawimage = myimage.tostring()
-        assert(len(rawimage) == imwidth*imheight, 'Wrong amount of data for image') 
+        assert len(rawimage) == imwidth*imheight, 'Wrong amount of data for image'
         #compressed = zlib.compress(rawimage) # no zlib at moment
         hex_encoded = self._AsciiHexEncode(rawimage)
        
