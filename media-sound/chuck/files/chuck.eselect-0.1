# Copyright 1999-2008 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id$

DESCRIPTION="Manage /usr/bin/chuck audio engine"
MAINTAINER="cedk@gentoo.org"
SVN_DATE='$Date: 2008/07/20 13:49:00 $'
VERSION=$(svn_date_to_version "${SVN_DATE}" )

# find a list of unison symlink targets, best first
find_targets() {
	local f
	for f in "${ROOT}"/usr/bin/chuck.{jack,alsa,oss}; do
		if [[ -f ${f} ]] ; then
			echo "${f##*/chuck.}"
		fi
	done | tac
}

# find version number of currently symlinked version
identify_target() {
	local f
	f="$(canonicalise "${ROOT}"/usr/bin/chuck)"
	echo "${f##*/chuck.}"
}

# try to remove the unison symlink
remove_symlinks() {
	rm -f "${ROOT}"/usr/bin/chuck &>/dev/null
}

# set the unison symlink
set_symlinks() {
	local target="${1}" targets
	if is_number "${target}" && [[ ${target} -ge 1 ]] ; then
		targets=( $(find_targets ) )
		target=${targets[$(( ${target} - 1 ))]}
	fi
	if [[ -f "${ROOT}/usr/bin/chuck.${target}" ]] ; then
		remove_symlinks
		ln -s "chuck.${target}" "${ROOT}/usr/bin/chuck" || \
			die "Could not set ${target} /usr/bin/chuck symlink"
	else
		die -q "Target \"${target}\" doesn't appear to be valid!"
	fi
}

### show action ###

describe_show() {
	echo "Show the current chuck audio engine"
}

do_show() {
	[[ -z "${@}" ]] || die -q "Too many parameters"

	write_list_start "Current chuck audio engine:"
	if [[ -L "${ROOT}/usr/bin/chuck" ]] ; then
		write_kv_list_entry "$(identify_target)" ""
	elif [[ -e "${ROOT}/usr/bin/chuck" ]] ; then
		write_kv_list_entry "(not a symlink)" ""
	else
		write_kv_list_entry "(unset)" ""
	fi
}

### list action ###

describe_list() {
	echo "List available chuck audio engines"
}

do_list() {
	[[ -z "${@}" ]] || die -q "Too many parameters"

	local i targets current
	targets=( $(find_targets ) )
	current=$(identify_target)
	if [[ -n ${targets[@]} ]] ; then
		for (( i = 0 ; i < ${#targets[@]} ; i = i + 1 )) ; do
			[[ ${targets[${i}]} == ${current} ]] && \
				targets[${i}]="${targets[${i}]} $(highlight '*' )"
		done
		write_list_start "Available chuck audio engines:"
		write_numbered_list "${targets[@]}"
	else
		write_kv_list_entry "(none found)" ""
	fi
}

### set action ###

describe_set() {
	echo "Set a new chuck audio engine"
}

describe_set_options() {
	echo "target : Target audio engine or index from 'list' action"
}

describe_set_parameters() {
	echo "<target>"
}

do_set() {
	if [[ -z "${1}" ]] ; then
		die -q "You didn't give me an audio engine"

	elif [[ -n "${2}" ]] ; then
		die -q "Too many parameters"

	elif [[ -L "${ROOT}/usr/bin/chuck" ]] ; then
		if ! remove_symlinks ; then
			die -q "Can't remove existing audio engine symlink"
		elif ! set_symlinks "${1}" ; then
			die -q "Can't set new audio engine"
		fi

	elif [[ -e "${ROOT}/usr/bin/chuck" ]] ; then
		die -q "${ROOT}/usr/bin/chuck seems to be from an old ebuild, please remove manually"

	else
		set_symlinks "${1}" || die -q "Can't set new audio engine"
	fi
}

### update action ###

describe_update() {
	echo "Automatically update the chuck audio engine"
}

describe_update_options() {
	echo "--if-unset : Do not override currently selected audio engine"
}

do_update() {
	[[ -z "${1}" ]] || ( [[ -z "${2}" ]] && [[ "${1}" == "--if-unset" ]] ) || \
		die -q "Usage error"

	if [[ -L "${ROOT}/usr/bin/chuck" ]] ; then
		[[ ${1} == "--if-unset" ]] && return
		remove_symlinks || die -q "Can't remove existing symlink"
	fi
	if [[ -e "${ROOT}/usr/bin/chuck" ]] ; then
		die -q "${ROOT}/usr/bin/chuck seems to be from an old ebuild, please remove manually"
	elif ! [[ -z $(find_targets ) ]] ; then
		set_symlinks 1 || die -q "Can't set a new audio engine"
	fi
}

# vim: ts=4 sw=4 noet fdm=marker
