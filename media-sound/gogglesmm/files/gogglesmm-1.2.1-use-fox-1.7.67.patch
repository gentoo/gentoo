--- a/gap/ap_http_response.cpp
+++ b/gap/ap_http_response.cpp
@@ -341,7 +341,7 @@
         break;
 
       parameters.insert(str.mid(ks,kp-ks),
-                        unescape(str.mid(s,p-s),'\"','\"'));
+                        FX::FXString::unescape(str.mid(s,p-s),'\"','\"'));
       p++;
       }
     else {
--- a/src/GMDBus.cpp
+++ b/src/GMDBus.cpp
@@ -60,7 +60,7 @@
   void setuphooks() {
     for (FXint i=0;i<connections.no();i++) {
       if (!connections.empty(i)) {
-        static_cast<GMDBus*>(connections.value(i))->setup_event_loop();
+        static_cast<GMDBus*>(connections.data(i))->setup_event_loop();
         }
       }
     }
@@ -532,7 +532,7 @@
   /// remove any pending proxy replies;
   for (FXint i=0;i<serial.no();i++) {
     if (!serial.empty(i)) {
-      GMDBusProxyReply * reply = static_cast<GMDBusProxyReply*>(serial.value(i));
+      GMDBusProxyReply * reply = static_cast<GMDBusProxyReply*>(serial.data(i));
       delete reply;
       }
     }
--- a/src/GMFilename.cpp
+++ b/src/GMFilename.cpp
@@ -167,7 +167,7 @@
     else if (Unicode::isPrint(src.wc(i))) {
       if (codec->wc2mb(&c,1,src.wc(i))==1) {
         if (c==undefined_character) {
-          FXString dcm = decompose(src.mid(i,src.extent(i)),false);
+          FXString dcm = FX::FXString::decompose(src.mid(i,src.extent(i)),false);
           for (FXint j=0;j<dcm.length();j+=dcm.inc(j)) {
             if (Unicode::isPrint(dcm.wc(j)) && codec->wc2mb(&c,1,dcm.wc(j)) && c!=0x1a) {
               n++;
@@ -190,7 +190,7 @@
         if (c==undefined_character) {
           /* If codec didn't contain a mapping to the required character,
              do a compatibility decomposition and try mapping those */
-          FXString dcm = decompose(src.mid(i,src.extent(i)),false);
+          FXString dcm = FX::FXString::decompose(src.mid(i,src.extent(i)),false);
           for (FXint j=0;j<dcm.length();j+=dcm.inc(j)) {
             if (Unicode::isPrint(dcm.wc(j)) && codec->wc2mb(&c,1,dcm.wc(j)) && c!=undefined_character) {
               dst[n++]=c;
@@ -208,7 +208,7 @@
 
 
 FXString TextConverter::convert_to_ascii(const FXString & input) const {
-  FXString src = decompose(input,false);
+  FXString src = FX::FXString::decompose(input,false);
   FXString dst;
   FXint i,n=0;
 
--- a/src/GMTrackDatabase.cpp
+++ b/src/GMTrackDatabase.cpp
@@ -1372,8 +1372,8 @@
 void GMTrackDatabase::clear_path_lookup() {
   DEBUG_DB_GET();
   for (FXint i=0;i<pathdict.no();i++) {
-    if (!pathdict.empty(i) && pathdict.value(i)!=nullptr) {
-      free(pathdict.value(i));
+    if (!pathdict.empty(i) && pathdict.data(i)!=nullptr) {
+      free(pathdict.data(i));
       }
     }
   pathdict.clear();
@@ -1424,8 +1424,8 @@
 void GMTrackDatabase::clear_artist_lookup() {
   DEBUG_DB_GET();
   for (FXint i=0;i<artistdict.no();i++) {
-    if (!artistdict.empty(i) && artistdict.value(i)!=nullptr) {
-      FXString * a = (FXString*)artistdict.value(i);
+    if (!artistdict.empty(i) && artistdict.data(i)!=nullptr) {
+      FXString * a = (FXString*)artistdict.data(i);
       delete a;
       }
     }
--- a/src/gmutils.h
+++ b/src/gmutils.h
@@ -26,7 +26,7 @@
   FXint remove(FXint name) {  return (FXint)(FXival)FXHash::remove((void*)(FXival)name); }
   //FXint find(FXint name) const { return (FXint)(FXival)FXHash::find((void*)(FXival)name); }
   FXint at(FXint name) const { return (FXint)(FXival)FXHash::at((void*)(FXival)name); }
-  FXint key(FXuint pos) const { return (FXint)(FXival)table[pos].name; }
+  FXint key(FXuint pos) const { return (FXint)(FXival)table[pos].key; }
   FXint value(FXuint pos) const { return (FXint)(FXival)table[pos].data; }
   void adopt(FXIntMap &);
   void load(FXStream & store);
