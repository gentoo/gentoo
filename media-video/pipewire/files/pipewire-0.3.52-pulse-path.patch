https://gitlab.freedesktop.org/pipewire/pipewire/-/commit/4821c7ca2fe5e25ba018e9f5d4967f08d6bb816f

From: Wim Taymans <wtaymans@redhat.com>
Date: Thu, 9 Jun 2022 17:06:07 +0200
Subject: [PATCH] pulse-server: don't append "/pulse" to PULSE_RUNTIME_PATH

Fixes #2431
--- a/src/modules/module-protocol-pulse/server.c
+++ b/src/modules/module-protocol-pulse/server.c
@@ -460,7 +460,7 @@ static int parse_unix_address(const char *address, struct sockaddr_storage *addr
 	if (address[0] != '/') {
 		char runtime_dir[PATH_MAX];
 
-		if ((res = get_runtime_dir(runtime_dir, sizeof(runtime_dir), "pulse")) < 0)
+		if ((res = get_runtime_dir(runtime_dir, sizeof(runtime_dir))) < 0)
 			return res;
 
 		res = snprintf(addr.sun_path, sizeof(addr.sun_path),
--- a/src/modules/module-protocol-pulse/utils.c
+++ b/src/modules/module-protocol-pulse/utils.c
@@ -50,27 +50,30 @@
 #include "log.h"
 #include "utils.h"
 
-int get_runtime_dir(char *buf, size_t buflen, const char *dir)
+int get_runtime_dir(char *buf, size_t buflen)
 {
-	const char *runtime_dir;
+	const char *runtime_dir, *dir = NULL;
 	struct stat stat_buf;
 	int res, size;
 
 	runtime_dir = getenv("PULSE_RUNTIME_PATH");
-	if (runtime_dir == NULL)
+	if (runtime_dir == NULL) {
 		runtime_dir = getenv("XDG_RUNTIME_DIR");
-
+		dir = "pulse";
+	}
 	if (runtime_dir == NULL) {
 		pw_log_error("could not find a suitable runtime directory in"
 				"$PULSE_RUNTIME_PATH and $XDG_RUNTIME_DIR");
 		return -ENOENT;
 	}
 
-	size = snprintf(buf, buflen, "%s/%s", runtime_dir, dir);
+	size = snprintf(buf, buflen, "%s%s%s", runtime_dir,
+			dir ? "/" : "", dir ? dir : "");
 	if (size < 0)
 		return -errno;
 	if ((size_t) size >= buflen) {
-		pw_log_error("path %s/%s too long", runtime_dir, dir);
+		pw_log_error("path %s%s%s too long", runtime_dir,
+				dir ? "/" : "", dir ? dir : "");
 		return -ENAMETOOLONG;
 	}
 
@@ -182,7 +185,7 @@ int create_pid_file(void) {
 	FILE *f;
 	int res;
 
-	if ((res = get_runtime_dir(pid_file, sizeof(pid_file), "pulse")) < 0)
+	if ((res = get_runtime_dir(pid_file, sizeof(pid_file))) < 0)
 		return res;
 
 	if (strlen(pid_file) > PATH_MAX - sizeof("/pid")) {
--- a/src/modules/module-protocol-pulse/utils.h
+++ b/src/modules/module-protocol-pulse/utils.h
@@ -31,7 +31,7 @@
 struct client;
 struct pw_context;
 
-int get_runtime_dir(char *buf, size_t buflen, const char *dir);
+int get_runtime_dir(char *buf, size_t buflen);
 int check_flatpak(struct client *client, pid_t pid);
 pid_t get_client_pid(struct client *client, int client_fd);
 const char *get_server_name(struct pw_context *context);
GitLab
