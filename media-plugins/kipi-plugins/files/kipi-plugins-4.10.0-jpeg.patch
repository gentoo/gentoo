diff -u -r a/extra/kipi-plugins/common/libkipiplugins/tools/imageio/kpwriteimage.cpp b/extra/kipi-plugins/common/libkipiplugins/tools/imageio/kpwriteimage.cpp
--- a/extra/kipi-plugins/common/libkipiplugins/tools/imageio/kpwriteimage.cpp	2014-12-16 09:54:40.000000000 +0200
+++ b/extra/kipi-plugins/common/libkipiplugins/tools/imageio/kpwriteimage.cpp	2014-12-24 20:46:51.471208340 +0200
@@ -181,8 +181,8 @@
     cinfo.comp_info[2].v_samp_factor = 1;
 
     // bug #154273: use 99 compression level instead 100 to reduce output JPEG file size.
-    jpeg_set_quality(&cinfo, 99, true);
-    jpeg_start_compress(&cinfo, true);
+    jpeg_set_quality(&cinfo, 99, boolean (true));
+    jpeg_start_compress(&cinfo, boolean(true));
 
     // Write ICC color profile.
     if (!d->iccProfile.isEmpty())
diff -u -r a/extra/kipi-plugins/jpeglossless/transform/jpegtransform.cpp b/extra/kipi-plugins/jpeglossless/transform/jpegtransform.cpp
--- a/extra/kipi-plugins/jpeglossless/transform/jpegtransform.cpp	2014-12-16 09:54:40.000000000 +0200
+++ b/extra/kipi-plugins/jpeglossless/transform/jpegtransform.cpp	2014-12-24 20:53:06.757881558 +0200
@@ -197,10 +197,10 @@
     JCOPY_OPTION copyoption = JCOPYOPT_ALL;
     jpeg_transform_info transformoption;
 
-    transformoption.perfect         = false;
-    transformoption.force_grayscale = false;
-    transformoption.trim            = false;
-    transformoption.crop            = false;
+    transformoption.perfect         = boolean(false);
+    transformoption.force_grayscale = boolean(false);
+    transformoption.trim            = boolean(false);
+    transformoption.crop            = boolean(false);
 
     struct jpeg_decompress_struct srcinfo;
     struct jpeg_compress_struct dstinfo;
@@ -277,7 +277,7 @@
     kp_jpeg_qiodevice_src(&srcinfo, &input_file);
     jcopy_markers_setup(&srcinfo, copyoption);
 
-    (void) jpeg_read_header(&srcinfo, true);
+    (void) jpeg_read_header(&srcinfo, boolean(true));
 
     // First rotate - execute even if rotate is JXFORM_NONE to apply new EXIF settings
     transformoption.transform = rotate;
@@ -296,10 +296,10 @@
     kp_jpeg_qiodevice_dest(&dstinfo, &output_file);
 
     // Do not write a JFIF header if previously the image did not contain it
-    dstinfo.write_JFIF_header = false;
+    dstinfo.write_JFIF_header = boolean(false);
 
     // Start compressor (note no image data is actually written here)
-    dstinfo.optimize_coding   = true;
+    dstinfo.optimize_coding   = boolean(true);
     jpeg_write_coefficients(&dstinfo, dst_coef_arrays);
 
     // Copy to the output file any extra markers that we want to preserve
@@ -349,7 +349,7 @@
         kp_jpeg_qiodevice_src(&srcinfo, &input_file);
         jcopy_markers_setup(&srcinfo, copyoption);
 
-        (void) jpeg_read_header(&srcinfo, true);
+        (void) jpeg_read_header(&srcinfo, boolean(true));
 
         transformoption.transform=flip;
         jtransform_request_workspace(&srcinfo, &transformoption);
@@ -366,10 +366,10 @@
         kp_jpeg_qiodevice_dest(&dstinfo, &output_file);
 
         // Do not write a JFIF header if previously the image did not contain it
-        dstinfo.write_JFIF_header = false;
+        dstinfo.write_JFIF_header = boolean(false);
 
         // Start compressor (note no image data is actually written here)
-        dstinfo.optimize_coding   = true;
+        dstinfo.optimize_coding   = boolean(true);
         jpeg_write_coefficients(&dstinfo, dst_coef_arrays);
 
         // Copy to the output file any extra markers that we want to preserve
