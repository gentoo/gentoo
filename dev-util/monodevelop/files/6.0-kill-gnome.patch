diff -rupN configure.in configure.in
--- configure.in	2016-05-08 19:44:27.107588191 -0400
+++ configure.in	2016-05-08 19:47:32.570263105 -0400
@@ -137,13 +137,6 @@ PKG_CHECK_MODULES(MONODOC, monodoc >= $M
 AC_SUBST(MONODOC_LIBS)
 
 dnl soft dependencies
-PKG_CHECK_MODULES(GNOME_SHARP, gnome-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION, [gnome_sharp=yes], [gnome_sharp=no])
-AC_SUBST(GNOME_SHARP_LIBS)
-PKG_CHECK_MODULES(GNOME_VFS_SHARP, gnome-vfs-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION, [gnome_vfs_sharp=yes], [gnome_vfs_sharp=no])
-AC_SUBST(GNOME_VFS_SHARP_LIBS)
-PKG_CHECK_MODULES(GCONF_SHARP, gconf-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION, [gconf_sharp=yes], [gconf_sharp=no])
-AC_SUBST(GCONF_SHARP_LIBS)
-
 gtksharp_prefix="`$PKG_CONFIG --variable=prefix gtk-sharp-2.0`"
 AC_SUBST(gtksharp_prefix)
 
@@ -202,13 +195,4 @@ AC_ARG_ENABLE(gnomeplatform,
 if test x$enable_gnomeplatform = xyes; then
-	if test x$gnome_sharp = xno; then
-		AC_MSG_ERROR([Cannot enable GNOME platform without gnome-sharp-2.0])
-	fi
-	if test x$gnome_vfs_sharp = xno; then
-		AC_MSG_ERROR([Cannot enable GNOME platform without gnome-vfs-sharp-2.0])
-	fi
-	if test x$gconf_sharp = xno; then
-		AC_MSG_ERROR([Cannot enable GNOME platform without gconf-sharp-2.0])
-	fi
 	platform_bindings="${platform_bindings}GNOME "
 fi
 
diff -rupN configure configure
--- configure   2016-05-08 19:53:21.359551637 -0400
+++ configure   2016-05-08 19:53:29.043391220 -0400
@@ -4116,13 +4116,4 @@
 if test x$enable_gnomeplatform = xyes; then
-	if test x$gnome_sharp = xno; then
-		as_fn_error $? "Cannot enable GNOME platform without gnome-sharp-2.0" "$LINENO" 5
-	fi
-	if test x$gnome_vfs_sharp = xno; then
-		as_fn_error $? "Cannot enable GNOME platform without gnome-vfs-sharp-2.0" "$LINENO" 5
-	fi
-	if test x$gconf_sharp = xno; then
-		as_fn_error $? "Cannot enable GNOME platform without gconf-sharp-2.0" "$LINENO" 5
-	fi
 	platform_bindings="${platform_bindings}GNOME "
 fi
 
diff -rupN src/addins/GnomePlatform/GnomePlatform.cs src/addins/GnomePlatform/GnomePlatform.cs
--- src/addins/GnomePlatform/GnomePlatform.cs	2015-07-18 18:40:15.946222126 +0200
+++ src/addins/GnomePlatform/GnomePlatform.cs	2015-07-18 19:56:35.272686234 +0200
@@ -26,7 +26,6 @@
 // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 //
 
-using Gnome;
 using MonoDevelop.Ide.Desktop;
 using System;
 using System.Collections.Generic;
@@ -40,44 +39,13 @@ namespace MonoDevelop.Platform
 {
 	public class GnomePlatform : PlatformService
 	{
-		static bool useGio;
-
-		Gnome.ThumbnailFactory thumbnailFactory = new Gnome.ThumbnailFactory (Gnome.ThumbnailSize.Normal);
-
 		static GnomePlatform ()
 		{
 			try {
 				Gio.GetDefaultForType ("text/plain");
-				useGio = true;
 			} catch (Exception ex) {
 				Console.WriteLine (ex);
 			}
-			//apparently Gnome.Icon needs GnomeVFS initialized even when we're using GIO.
-			Gnome.Vfs.Vfs.Initialize ();
-		}
-		
-		DesktopApplication GetGnomeVfsDefaultApplication (string mimeType)
-		{
-			var app = Gnome.Vfs.Mime.GetDefaultApplication (mimeType);
-			if (app != null)
-				return (DesktopApplication) Marshal.PtrToStructure (app.Handle, typeof(DesktopApplication));
-			else
-				return null;
-		}
-		
-		IEnumerable<DesktopApplication> GetGnomeVfsApplications (string mimeType)
-		{
-			var def = GetGnomeVfsDefaultApplication (mimeType);
-			var list = new List<DesktopApplication> ();
-			var apps = Gnome.Vfs.Mime.GetAllApplications (mimeType);
-			foreach (var app in apps) {
-				var dap = (GnomeVfsApp) Marshal.PtrToStructure (app.Handle, typeof(GnomeVfsApp));
-				if (!string.IsNullOrEmpty (dap.Command) && !string.IsNullOrEmpty (dap.DisplayName) && !dap.Command.Contains ("monodevelop ")) {
-					var isDefault = def != null && def.Id == dap.Command;
-					list.Add (new GnomeDesktopApplication (dap.Command, dap.DisplayName, isDefault));
-				}
-			}
-			return list;
 		}
 		
 		public override IEnumerable<DesktopApplication> GetApplications (string filename)
@@ -88,10 +56,7 @@ namespace MonoDevelop.Platform
 
 		IEnumerable<DesktopApplication> GetApplicationsForMimeType (string mimeType)
 		{
-			if (useGio)
-				return Gio.GetAllForType (mimeType);
-			else
-				return GetGnomeVfsApplications (mimeType);
+			return Gio.GetAllForType (mimeType);
 		}
 		
 		struct GnomeVfsApp {
@@ -100,23 +65,15 @@ namespace MonoDevelop.Platform
 
 		protected override string OnGetMimeTypeDescription (string mt)
 		{
-			if (useGio)
-				return Gio.GetMimeTypeDescription (mt);
-			else
-				return Gnome.Vfs.Mime.GetDescription (mt);
+			return Gio.GetMimeTypeDescription (mt);
 		}
 
 		protected override string OnGetMimeTypeForUri (string uri)
 		{
 			if (uri == null)
 				return null;
-			
-			if (useGio) {
-				string mt = Gio.GetMimeTypeForUri (uri);
-				if (mt != null)
-					return mt;
-			}
-			return Gnome.Vfs.MimeType.GetMimeTypeForUri (ConvertFileNameToVFS (uri));
+
+			return Gio.GetMimeTypeForUri (uri);
 		}
 		
 		protected override bool OnGetMimeTypeIsText (string mimeType)
@@ -128,19 +85,9 @@ namespace MonoDevelop.Platform
 			return base.OnGetMimeTypeIsText (mimeType);
 		}
 
-
-		public override void ShowUrl (string url)
-		{
-			Gnome.Url.Show (url);
-		}
-		
 		public override string DefaultMonospaceFont {
 			get {
-				try {
-					return (string) (new GConf.Client ().Get ("/desktop/gnome/interface/monospace_font_name"));
-				} catch (Exception) {
-					return "Monospace 11";
-				}
+				return "Monospace 11";
 			}
 		}
 		
@@ -159,18 +106,8 @@ namespace MonoDevelop.Platform
 				filename = EscapeFileName (filename);
 				if (filename == null)
 					return "gnome-fs-regular";
-				
-				string icon = null;
-				Gnome.IconLookupResultFlags result;
-				try {
-					icon = Gnome.Icon.LookupSync (IconTheme.Default, thumbnailFactory, filename, null, 
-					                              Gnome.IconLookupFlags.None, out result);
-				} catch {}
-				if (icon != null && icon.Length > 0)
-					return icon;
-			}			
+			}
 			return "gnome-fs-regular";
-			
 		}
 		
 		protected override Xwt.Drawing.Image OnGetIconForFile (string filename)
