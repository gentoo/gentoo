diff -ru backup/old/python/bin/watchman-make old/python/bin/watchman-make
--- backup/old/python/bin/watchman-make	2020-09-06 11:33:34.449582111 +0200
+++ old/python/bin/watchman-make	2020-09-06 11:33:43.473801969 +0200
@@ -100,7 +100,7 @@
             targets = []
             setattr(namespace, self.dest, targets)
 
-        if isinstance(values, basestring):
+        if isinstance(values, (str, bytes)):
             values = [values]
 
         if namespace.pattern is None or len(namespace.pattern) == 0:
@@ -209,7 +209,7 @@
         client.setTimeout(600)
 
         result = client.receive()
-        for _, t in targets.iteritems():
+        for _, t in targets.items():
             t.consumeEvents(client)
 
         # Now we wait for events to settle
@@ -218,7 +218,7 @@
         while not settled:
             try:
                 result = client.receive()
-                for _, t in targets.iteritems():
+                for _, t in targets.items():
                     t.consumeEvents(client)
             except pywatchman.SocketTimeout as ex:
                 # Our short settle timeout hit, so we're now settled
@@ -226,7 +226,7 @@
                 break
 
         # Now we can work on executing the targets
-        for _, t in targets.iteritems():
+        for _, t in targets.items():
             t.execute()
 
         # Print this at the bottom of the loop rather than the top
@@ -249,4 +249,3 @@
     except KeyboardInterrupt:
         # suppress ugly stack trace when they Ctrl-C
         break
-
diff -ru backup/old/python/bin/watchman-wait old/python/bin/watchman-wait
--- backup/old/python/bin/watchman-wait	2020-09-06 11:33:34.449582111 +0200
+++ old/python/bin/watchman-wait	2020-09-06 11:33:43.473801969 +0200
@@ -182,7 +182,7 @@
 try:
     client.capabilityCheck(
         required=['term-dirname', 'cmd-watch-project', 'wildmatch'])
-    for _, sub in subscriptions.iteritems():
+    for _, sub in subscriptions.items():
         sub.start(client)
 
 except pywatchman.CommandError as ex:
@@ -200,7 +200,7 @@
         # the client object will accumulate all subscription results
         # over time, so we ask it to remove and return those values
         # for each of the subscriptions
-        for _, sub in subscriptions.iteritems():
+        for _, sub in subscriptions.items():
             sub.emit(client)
 
     except pywatchman.SocketTimeout as ex:
