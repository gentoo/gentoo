From 1933acfa8107a164ec825d3223d14589fefd1b5b Mon Sep 17 00:00:00 2001
From: Dirk Thomas <dirk-thomas@users.noreply.github.com>
Date: Tue, 6 Aug 2019 16:06:51 -0700
Subject: [PATCH] more Python 3 compatibility (#1783)

---
 test/test_rospy/test/unit/test_genmsg_py.py   |  6 +--
 tools/rosgraph/src/rosgraph/roslogging.py     |  2 +-
 .../test/test_roslogging_user_logger.py       |  8 +++-
 tools/roslaunch/test/unit/test_xmlloader.py   |  2 +-
 tools/rosmsg/src/rosmsg/__init__.py           |  2 +-
 tools/rosmsg/test/test_rosmsg_command_line.py | 46 +++++++++----------
 .../test/test_rosmsgproto_command_line.py     | 20 ++++----
 .../test_rostopic_command_line_offline.py     | 44 +++++++++---------
 8 files changed, 67 insertions(+), 63 deletions(-)

diff --git a/tools/rostopic/test/test_rostopic_command_line_offline.py b/tools/rostopic/test/test_rostopic_command_line_offline.py
index 5dab1ad16..37a81faaa 100644
--- a/tools/rostopic/test/test_rostopic_command_line_offline.py
+++ b/tools/rostopic/test/test_rostopic_command_line_offline.py
@@ -48,9 +48,9 @@ def test_cmd_help(self):
         cmd = 'rostopic'
 
         sub = ['bw', 'echo', 'hz', 'delay', 'info', 'list', 'pub', 'type','find']
-        output = Popen([cmd], stdout=PIPE).communicate()[0]
+        output = Popen([cmd], stdout=PIPE).communicate()[0].decode()
         self.assert_('Commands' in output)
-        output = Popen([cmd, '-h'], stdout=PIPE).communicate()[0]
+        output = Popen([cmd, '-h'], stdout=PIPE).communicate()[0].decode()
         self.assert_('Commands' in output)
         # make sure all the commands are in the usage
         for c in sub:
@@ -59,16 +59,16 @@ def test_cmd_help(self):
 
         for c in sub:
             output = Popen([cmd, c, '-h'], stdout=PIPE, stderr=PIPE).communicate()
-            self.assert_("usage:" in output[0].lower(), output)
+            self.assert_("usage:" in output[0].decode().lower(), output)
             # make sure usage refers to the command
-            self.assert_("%s %s"%(cmd, c) in output[0], output)
+            self.assert_("%s %s"%(cmd, c) in output[0].decode(), output)
             
         # test no args on commands that require args
         for c in ['bw', 'echo', 'hz', 'delay', 'info', 'pub', 'type', 'find']:
             output = Popen([cmd, c], stdout=PIPE, stderr=PIPE).communicate()
-            self.assert_("usage:" in output[0].lower() or "usage:" in output[1].lower(), output)
+            self.assert_("usage:" in output[0].decode().lower() or "usage:" in output[1].decode().lower(), output)
             # make sure usage refers to the command
-            self.assert_("%s %s"%(cmd, c) in output[1], output)
+            self.assert_("%s %s"%(cmd, c) in output[1].decode(), output)
             
     def test_offline(self):
         cmd = 'rostopic'
@@ -80,19 +80,19 @@ def test_offline(self):
 
         msg = "ERROR: Unable to communicate with master!\n"
 
-        output = Popen([cmd, 'bw', 'chatter'], **kwds).communicate()
-        self.assert_(output[1].endswith(msg))
-        output = Popen([cmd, 'echo', 'chatter'], **kwds).communicate()
-        self.assert_(output[1].endswith(msg))
-        output = Popen([cmd, 'hz', 'chatter'], **kwds).communicate()
-        self.assert_(output[1].endswith(msg))
-        output = Popen([cmd, 'delay', 'chatter'], **kwds).communicate()
-        self.assert_(output[1].endswith(msg))
-        output = Popen([cmd, 'list'], **kwds).communicate()
-        self.assert_(output[1].endswith(msg))
-        output = Popen([cmd, 'pub', 'chatter', 'std_msgs/String', 'hello'], **kwds).communicate()
-        self.assert_(output[1].endswith(msg))
-        output = Popen([cmd, 'type', 'chatter'], **kwds).communicate()
-        self.assert_(output[1].endswith(msg))
-        output = Popen([cmd, 'type', 'std_msgs/String'], **kwds).communicate()
-        self.assert_(output[1].endswith(msg))
+        output = Popen([cmd, 'bw', 'chatter'], **kwds).communicate()[1].decode()
+        self.assert_(output.endswith(msg))
+        output = Popen([cmd, 'echo', 'chatter'], **kwds).communicate()[1].decode()
+        self.assert_(output.endswith(msg))
+        output = Popen([cmd, 'hz', 'chatter'], **kwds).communicate()[1].decode()
+        self.assert_(output.endswith(msg))
+        output = Popen([cmd, 'delay', 'chatter'], **kwds).communicate()[1].decode()
+        self.assert_(output.endswith(msg))
+        output = Popen([cmd, 'list'], **kwds).communicate()[1].decode()
+        self.assert_(output.endswith(msg))
+        output = Popen([cmd, 'pub', 'chatter', 'std_msgs/String', 'hello'], **kwds).communicate()[1].decode()
+        self.assert_(output.endswith(msg))
+        output = Popen([cmd, 'type', 'chatter'], **kwds).communicate()[1].decode()
+        self.assert_(output.endswith(msg))
+        output = Popen([cmd, 'type', 'std_msgs/String'], **kwds).communicate()[1].decode()
+        self.assert_(output.endswith(msg))
