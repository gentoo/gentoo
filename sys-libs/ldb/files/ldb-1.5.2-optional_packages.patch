--- ldb-1.5.2/wscript
+++ ldb-1.5.2/wscript
@@ -33,6 +33,10 @@
     opt.RECURSE('lib/tevent')
     opt.RECURSE('lib/replace')
     opt.load('python') # options for disabling pyc or pyo compilation
+    if opt.IN_LAUNCH_DIR():
+        opt.add_option('--disable-ldap',
+        help=("disable ldap support"),
+        action="store_true", dest='disable_ldap', default=False)
 
     opt.add_option('--without-ldb-lmdb',
                    help='disable new LMDB backend for LDB',
@@ -40,6 +44,10 @@
 
 
 def configure(conf):
+    conf.env.standalone_ldb = conf.IN_LAUNCH_DIR()
+
+    conf.env.disable_ldap = getattr(Options.options, 'disable_ldap', False)
+
     conf.RECURSE('lib/tdb')
     conf.RECURSE('lib/tevent')
 
@@ -157,9 +165,12 @@
     if conf.env.standalone_ldb:
         conf.CHECK_XSLTPROC_MANPAGES()
 
-        # we need this for the ldap backend
-        if conf.CHECK_FUNCS_IN('ber_flush ldap_open ldap_initialize', 'lber ldap', headers='lber.h ldap.h'):
-            conf.env.ENABLE_LDAP_BACKEND = True
+        if not conf.env.disable_ldap:
+    	    # we need this for the ldap backend
+            if conf.CHECK_FUNCS_IN('ber_flush ldap_open ldap_initialize', 'lber ldap', headers='lber.h ldap.h'):
+                conf.env.ENABLE_LDAP_BACKEND = True
+        else:
+            conf.env.ENABLE_LDAP_BACKEND = False
 
         # we don't want any libraries or modules to rely on runtime
         # resolution of symbols
