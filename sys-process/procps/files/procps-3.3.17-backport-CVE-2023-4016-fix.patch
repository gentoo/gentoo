https://bugs.gentoo.org/913408

This patch is a clone of v3-CVE-2023-4016.patch from:
https://gitlab.com/kirinnee/nixpkgs/-/commit/60c6ab3fff28e4e22d9e0aa58025332cdfac2fb1
with changes described here:
https://gitlab.com/procps-ng/procps/-/commit/f5f843e257daeceaac2504b8957e84f4bf87a8f2

So together patch backports fix of CVE-2023-4016 for procps-3.3.17
---
 ps/parser.c | 19 ++++++++++++++-----
 1 file changed, 14 insertions(+), 5 deletions(-)

diff --git a/ps/parser.c b/ps/parser.c
index 4263a1fb..21c2488b 100644
--- a/ps/parser.c
+++ b/ps/parser.c
@@ -36,6 +36,14 @@
 #include "common.h"
 #include "c.h"
 
+static void *xxcalloc(const size_t nelems, const size_t size)
+{
+  void *ret = calloc(nelems, size);
+  if (!ret && size && nelems)
+    xerrx(EXIT_FAILURE, "cannot allocate %zu bytes", nelems*size);
+  return ret;
+}
+
 #define ARG_GNU  0
 #define ARG_END  1
 #define ARG_PGRP 2
@@ -184,8 +192,8 @@ static const char *parse_list(const char *arg, const char *(*parse_fn)(char *, s
   const char *err;       /* error code that could or did happen */
   /*** prepare to operate ***/
   node = malloc(sizeof(selection_node));
-  node->u = malloc(strlen(arg)*sizeof(sel_union)); /* waste is insignificant */
   node->n = 0;
+  node->u = NULL;
   buf = strdup(arg);
   /*** sanity check and count items ***/
   need_item = 1; /* true */
@@ -199,12 +207,13 @@ static const char *parse_list(const char *arg, const char *(*parse_fn)(char *, s
       need_item=1;
       break;
     default:
-      if(need_item) items++;
+      if(need_item && items < INT_MAX) items++;
       need_item=0;
     }
   } while (*++walk);
   if(need_item) goto parse_error;
   node->n = items;
+  node->u = xxcalloc(items, sizeof(sel_union));
   /*** actually parse the list ***/
   walk = buf;
   while(items--){
@@ -1031,15 +1040,15 @@ static const char *parse_trailing_pids(void){
   thisarg = ps_argc - 1;   /* we must be at the end now */
 
   pidnode = malloc(sizeof(selection_node));
-  pidnode->u = malloc(i*sizeof(sel_union)); /* waste is insignificant */
+  pidnode->u = xxcalloc(i, sizeof(sel_union)); /* waste is insignificant */
   pidnode->n = 0;
 
   grpnode = malloc(sizeof(selection_node));
-  grpnode->u = malloc(i*sizeof(sel_union)); /* waste is insignificant */
+  grpnode->u = xxcalloc(i, sizeof(sel_union)); /* waste is insignificant */
   grpnode->n = 0;
 
   sidnode = malloc(sizeof(selection_node));
-  sidnode->u = malloc(i*sizeof(sel_union)); /* waste is insignificant */
+  sidnode->u = xxcalloc(i, sizeof(sel_union)); /* waste is insignificant */
   sidnode->n = 0;
 
   while(i--){
-- 
2.43.0

