Backport of https://github.com/linux-audit/audit-userspace/commit/8c7eaa7ead6c70486623674c19d649f3831578ad

diff -ur audit-4.0.1.orig/audisp/audispd-llist.c audit-4.0.1/audisp/audispd-llist.c
--- audit-4.0.1.orig/audisp/audispd-llist.c
+++ audit-4.0.1/audisp/audispd-llist.c
@@ -69,11 +69,13 @@ unsigned int plist_count_active(const co
 	return cnt;
 }
 
-void plist_append(conf_llist *l, plugin_conf_t *p)
+int plist_append(conf_llist *l, plugin_conf_t *p)
 {
 	lnode* newnode;
 
 	newnode = malloc(sizeof(lnode));
+	if (newnode == NULL)
+		return 1;
 
 	if (p) {
 		void *pp = malloc(sizeof(struct plugin_conf));
@@ -94,6 +96,8 @@ void plist_append(conf_llist *l, plugin_
 	// make newnode current
 	l->cur = newnode;
 	l->cnt++;
+
+	return 0;
 }
 
 void plist_clear(conf_llist* l)
diff -ur audit-4.0.1.orig/audisp/audispd-llist.h audit-4.0.1/audisp/audispd-llist.h
--- audit-4.0.1.orig/audisp/audispd-llist.h
+++ audit-4.0.1/audisp/audispd-llist.h
@@ -1,6 +1,6 @@
 /*
 * audispd-llist.h - Header file for ausearch-conf_llist.c
-* Copyright (c) 2007,2013 Red Hat Inc., Durham, North Carolina.
+* Copyright (c) 2007,2013 Red Hat Inc.
 * All Rights Reserved.
 *
 * This software may be freely redistributed and/or modified under the
@@ -51,7 +51,7 @@ unsigned int plist_count_active(const co
 void plist_last(conf_llist *l);
 lnode *plist_next(conf_llist *l);
 static inline lnode *plist_get_cur(conf_llist *l) { return l->cur; }
-void plist_append(conf_llist *l, plugin_conf_t *p);
+int plist_append(conf_llist *l, plugin_conf_t *p);
 void plist_clear(conf_llist* l);
 void plist_mark_all_unchecked(conf_llist* l);
 lnode *plist_find_unchecked(conf_llist* l);
diff -ur audit-4.0.1.orig/auparse/normalize-llist.c audit-4.0.1/auparse/normalize-llist.c
--- audit-4.0.1.orig/auparse/normalize-llist.c
+++ audit-4.0.1/auparse/normalize-llist.c
@@ -1,6 +1,6 @@
 /*
  * normalize-llist.c - Minimal linked list library
- * Copyright (c) 2016-17 Red Hat Inc., Durham, North Carolina.
+ * Copyright (c) 2016-17 Red Hat Inc.
  * All Rights Reserved. 
  *
  * This library is free software; you can redistribute it and/or
@@ -61,11 +61,14 @@ data_node *cllist_next(cllist *l)
 	return l->cur;
 }
 
-void cllist_append(cllist *l, uint32_t num, void *data)
+// Returns 0 on success and 1 on error
+int cllist_append(cllist *l, uint32_t num, void *data)
 {
 	data_node *newnode;
 
 	newnode = malloc(sizeof(data_node));
+	if (newnode == NULL)
+		return 1;
 
 	newnode->num = num;
 	newnode->data = data;
@@ -80,5 +83,6 @@ void cllist_append(cllist *l, uint32_t n
 	// make newnode current
 	l->cur = newnode;
 	l->cnt++;
+	return 0;
 }
 
diff -ur audit-4.0.1.orig/auparse/normalize-llist.h audit-4.0.1/auparse/normalize-llist.h
--- audit-4.0.1.orig/auparse/normalize-llist.h
+++ audit-4.0.1/auparse/normalize-llist.h
@@ -1,6 +1,6 @@
 /*
  * normalize-llist.h - Header file for normalize-llist.c
- * Copyright (c) 2016-17 Red Hat Inc., Durham, North Carolina.
+ * Copyright (c) 2016-17 Red Hat Inc.
  * All Rights Reserved.
  *
  * This library is free software; you can redistribute it and/or
@@ -53,7 +53,7 @@ AUDIT_HIDDEN_START
 void cllist_create(cllist *l, void (*cleanup)(void *));
 void cllist_clear(cllist* l);
 data_node *cllist_next(cllist *l);
-void cllist_append(cllist *l, uint32_t num, void *data);
+int cllist_append(cllist *l, uint32_t num, void *data);
 
 AUDIT_HIDDEN_END
 
diff -ur audit-4.0.1.orig/auparse/normalize.c audit-4.0.1/auparse/normalize.c
--- audit-4.0.1.orig/auparse/normalize.c
+++ audit-4.0.1/auparse/normalize.c
@@ -179,7 +179,8 @@ static unsigned int add_subj_attr(aupars
 	if ((auparse_find_field(au, str))) {
 		attr = set_record(0, rnum);
 		attr = set_field(attr, auparse_get_field_num(au));
-		cllist_append(&D.actor.attr, attr, NULL);
+		if (cllist_append(&D.actor.attr, attr, NULL))
+			return 1;
 		return 0;
 	} else
 		auparse_goto_record_num(au, rnum);
@@ -224,7 +225,8 @@ static unsigned int add_obj_attr(auparse
 	if ((auparse_find_field(au, str))) {
 		attr = set_record(0, rnum);
 		attr = set_field(attr, auparse_get_field_num(au));
-		cllist_append(&D.thing.attr, attr, NULL);
+		if (cllist_append(&D.thing.attr, attr, NULL))
+			return 1;
 		return 0;
 	} else
 		auparse_goto_record_num(au, rnum);
@@ -360,21 +362,23 @@ static void collect_id_obj2(auparse_stat
 	}
 }
 
-static void collect_path_attrs(auparse_state_t *au)
+static int collect_path_attrs(auparse_state_t *au)
 {
 	value_t attr;
 	unsigned int rnum = auparse_get_record_num(au);
 
 	auparse_first_field(au);
 	if (add_obj_attr(au, "mode", rnum))
-		return;	// Failed opens don't have anything else
+		return 1;	// Failed opens don't have anything else
 
 	// All the rest of the fields matter
 	while ((auparse_next_field(au))) {
 		attr = set_record(0, rnum);
 		attr = set_field(attr, auparse_get_field_num(au));
-		cllist_append(&D.thing.attr, attr, NULL);
+		if (cllist_append(&D.thing.attr, attr, NULL))
+			return 1;
 	}
+	return 0;
 }
 
 static void collect_cwd_attrs(auparse_state_t *au)
diff -ur audit-4.0.1.orig/src/auditctl-llist.c audit-4.0.1/src/auditctl-llist.c
--- audit-4.0.1.orig/src/auditctl-llist.c
+++ audit-4.0.1/src/auditctl-llist.c
@@ -1,7 +1,7 @@
 /*
 * ausearch-llist.c - Minimal linked list library
-* Copyright (c) 2005 Red Hat Inc., Durham, North Carolina.
-* All Rights Reserved. 
+* Copyright (c) 2005 Red Hat Inc.
+* All Rights Reserved.
 *
 * This software may be freely redistributed and/or modified under the
 * terms of the GNU General Public License as published by the Free
@@ -15,7 +15,7 @@
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING. If not, write to the
-* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor 
+* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor
 * Boston, MA 02110-1335, USA.
 *
 * Authors:
@@ -59,11 +59,13 @@ lnode *list_next(llist *l)
 	return l->cur;
 }
 
-void list_append(llist *l, const struct audit_rule_data *r, size_t sz)
+int list_append(llist *l, const struct audit_rule_data *r, size_t sz)
 {
 	lnode* newnode;
 
 	newnode = malloc(sizeof(lnode));
+	if (newnode == NULL)
+		return 1;
 
 	if (r) {
 		void *rr = malloc(sz);
@@ -85,6 +87,8 @@ void list_append(llist *l, const struct
 	// make newnode current
 	l->cur = newnode;
 	l->cnt++;
+
+	return 0;
 }
 
 void list_clear(llist* l)
diff -ur audit-4.0.1.orig/src/auditctl-llist.h audit-4.0.1/src/auditctl-llist.h
--- audit-4.0.1.orig/src/auditctl-llist.h
+++ audit-4.0.1/src/auditctl-llist.h
@@ -1,6 +1,6 @@
 /*
 * auditctl-llist.h - Header file for ausearch-llist.c
-* Copyright (c) 2005 Red Hat Inc., Durham, North Carolina.
+* Copyright (c) 2005 Red Hat Inc.
 * All Rights Reserved.
 *
 * This software may be freely redistributed and/or modified under the
@@ -50,7 +50,7 @@ void list_first(llist *l);
 void list_last(llist *l);
 lnode *list_next(llist *l);
 static inline lnode *list_get_cur(const llist *l) { return l->cur; }
-void list_append(llist *l, const struct audit_rule_data *r, size_t sz);
+int list_append(llist *l, const struct audit_rule_data *r, size_t sz);
 void list_clear(llist* l);
 
 #endif
diff -ur audit-4.0.1.orig/src/ausearch-avc.c audit-4.0.1/src/ausearch-avc.c
--- audit-4.0.1.orig/src/ausearch-avc.c
+++ audit-4.0.1/src/ausearch-avc.c
@@ -1,7 +1,7 @@
 /*
 * ausearch-avc.c - Minimal linked list library for avcs
-* Copyright (c) 2006,2008,2014 Red Hat Inc., Durham, North Carolina.
-* All Rights Reserved. 
+* Copyright (c) 2006,2008,2014 Red Hat Inc.
+* All Rights Reserved.
 *
 * This software may be freely redistributed and/or modified under the
 * terms of the GNU General Public License as published by the Free
@@ -15,7 +15,7 @@
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING. If not, write to the
-* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor 
+* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor
 * Boston, MA 02110-1335, USA.
 *
 * Authors:
@@ -62,11 +62,13 @@ static void alist_last(alist *l)
 	l->cur = cur;
 }
 
-void alist_append(alist *l, anode *node)
+int alist_append(alist *l, anode *node)
 {
 	anode* newnode;
 
 	newnode = malloc(sizeof(anode));
+	if (newnode == NULL)
+		return 1;
 
 	if (node->scontext)
 		newnode->scontext = node->scontext;
@@ -104,6 +106,8 @@ void alist_append(alist *l, anode *node)
 	// make newnode current
 	l->cur = newnode;
 	l->cnt++;
+
+	return 0;
 }
 
 int alist_find_subj(alist *l)
diff -ur audit-4.0.1.orig/src/ausearch-avc.h audit-4.0.1/src/ausearch-avc.h
--- audit-4.0.1.orig/src/ausearch-avc.h
+++ audit-4.0.1/src/ausearch-avc.h
@@ -1,6 +1,6 @@
 /*
 * ausearch-avc.h - Header file for ausearch-string.c
-* Copyright (c) 2006,2008 Red Hat Inc., Durham, North Carolina.
+* Copyright (c) 2006,2008 Red Hat Inc.
 * All Rights Reserved.
 *
 * This software may be freely redistributed and/or modified under the
@@ -54,7 +54,7 @@ void alist_create(alist *l);
 static inline void alist_first(alist *l) { l->cur = l->head; }
 anode *alist_next(alist *l);
 static inline anode *alist_get_cur(const alist *l) { return l->cur; }
-void alist_append(alist *l, anode *node);
+int alist_append(alist *l, anode *node);
 void anode_init(anode *an);
 void anode_clear(anode *an);
 void alist_clear(alist* l);
diff -ur audit-4.0.1.orig/src/ausearch-int.c audit-4.0.1/src/ausearch-int.c
--- audit-4.0.1.orig/src/ausearch-int.c
+++ audit-4.0.1/src/ausearch-int.c
@@ -1,6 +1,6 @@
 /*
 * ausearch-int.c - Minimal linked list library for integers
-* Copyright (c) 2005,2008 Red Hat Inc., Durham, North Carolina.
+* Copyright (c) 2005,2008 Red Hat Inc.
 * All Rights Reserved. 
 *
 * This software may be freely redistributed and/or modified under the
@@ -41,11 +41,13 @@ int_node *ilist_next(ilist *l)
 	return l->cur;
 }
 
-void ilist_append(ilist *l, int num, unsigned int hits, int aux)
+int ilist_append(ilist *l, int num, unsigned int hits, int aux)
 {
 	int_node* newnode;
 
 	newnode = malloc(sizeof(int_node));
+	if (newnode == NULL)
+		return 1;
 
 	newnode->num = num;
 	newnode->hits = hits;
@@ -61,6 +63,8 @@ void ilist_append(ilist *l, int num, uns
 	// make newnode current
 	l->cur = newnode;
 	l->cnt++;
+
+	return 0;
 }
 
 void ilist_clear(ilist* l)
diff -ur audit-4.0.1.orig/src/ausearch-int.h audit-4.0.1/src/ausearch-int.h
--- audit-4.0.1.orig/src/ausearch-int.h
+++ audit-4.0.1/src/ausearch-int.h
@@ -1,6 +1,6 @@
 /*
 * ausearch-int.h - Header file for ausearch-int.c
-* Copyright (c) 2005,2008 Red Hat Inc., Durham, North Carolina.
+* Copyright (c) 2005,2008 Red Hat Inc.
 * All Rights Reserved.
 *
 * This software may be freely redistributed and/or modified under the
@@ -48,7 +48,7 @@ void ilist_create(ilist *l);
 static inline void ilist_first(ilist *l) { l->cur = l->head; }
 int_node *ilist_next(ilist *l);
 static inline int_node *ilist_get_cur(const ilist *l) { return l->cur; }
-void ilist_append(ilist *l, int num, unsigned int hits, int aux);
+int ilist_append(ilist *l, int num, unsigned int hits, int aux);
 void ilist_clear(ilist* l);
 
 /* append a number if its not already on the list */
diff -ur audit-4.0.1.orig/src/ausearch-llist.c audit-4.0.1/src/ausearch-llist.c
--- audit-4.0.1.orig/src/ausearch-llist.c
+++ audit-4.0.1/src/ausearch-llist.c
@@ -1,6 +1,6 @@
 /*
 * ausearch-llist.c - Minimal linked list library
-* Copyright (c) 2005-2008,2011,2016 Red Hat Inc., Durham, North Carolina.
+* Copyright (c) 2005-2008,2011,2016 Red Hat Inc.
 * Copyright (c) 2011 IBM Corp.
 * All Rights Reserved. 
 *
@@ -102,11 +102,13 @@ lnode *list_prev(llist *l)
 	return l->cur;
 }
 
-void list_append(llist *l, lnode *node)
+int list_append(llist *l, lnode *node)
 {
 	lnode* newnode;
 
 	newnode = malloc(sizeof(lnode));
+	if (newnode == NULL)
+		return 1;
 
 	if (node->message)
 		newnode->message = node->message;
@@ -119,7 +121,7 @@ void list_append(llist *l, lnode *node)
 	newnode->type = node->type;
 	newnode->a0 = node->a0;
 	newnode->a1 = node->a1;
-	newnode->item = l->cnt; 
+	newnode->item = l->cnt;
 	newnode->next = NULL;
 
 	// if we are at top, fix this up
@@ -131,6 +133,8 @@ void list_append(llist *l, lnode *node)
 	// make newnode current
 	l->cur = newnode;
 	l->cnt++;
+
+	return 0;
 }
 
 int list_find_item(llist *l, unsigned int i)
diff -ur audit-4.0.1.orig/src/ausearch-llist.h audit-4.0.1/src/ausearch-llist.h
--- audit-4.0.1.orig/src/ausearch-llist.h
+++ audit-4.0.1/src/ausearch-llist.h
@@ -107,7 +107,7 @@ void list_last(llist *l);
 lnode *list_next(llist *l);
 lnode *list_prev(llist *l);
 static inline lnode *list_get_cur(llist *l) { return l->cur; }
-void list_append(llist *l, lnode *node);
+int list_append(llist *l, lnode *node);
 void list_clear(llist* l);
 int list_get_event(llist* l, event *e);
 
diff -ur audit-4.0.1.orig/src/ausearch-nvpair.c audit-4.0.1/src/ausearch-nvpair.c
--- audit-4.0.1.orig/src/ausearch-nvpair.c
+++ audit-4.0.1/src/ausearch-nvpair.c
@@ -1,6 +1,6 @@
 /*
 * ausearch-nvpair.c - Minimal linked list library for name-value pairs
-* Copyright (c) 2006-08 Red Hat Inc., Durham, North Carolina.
+* Copyright (c) 2006-08 Red Hat Inc.
 * All Rights Reserved. 
 *
 * This software may be freely redistributed and/or modified under the
@@ -34,9 +34,11 @@ void search_list_create(nvlist *l)
 	l->cnt = 0;
 }
 
-void search_list_append(nvlist *l, nvnode *node)
+int search_list_append(nvlist *l, nvnode *node)
 {
 	nvnode* newnode = malloc(sizeof(nvnode));
+	if (newnode == NULL)
+		return 1;
 
 	newnode->name = node->name;
 	newnode->val = node->val;
@@ -54,6 +56,8 @@ void search_list_append(nvlist *l, nvnod
 	// make newnode current
 	l->cur = newnode;
 	l->cnt++;
+
+	return 0;
 }
 
 int search_list_find_val(nvlist *l, long val)
diff -ur audit-4.0.1.orig/src/ausearch-nvpair.h audit-4.0.1/src/ausearch-nvpair.h
--- audit-4.0.1.orig/src/ausearch-nvpair.h
+++ audit-4.0.1/src/ausearch-nvpair.h
@@ -1,6 +1,6 @@
 /*
 * ausearch-nvpair.h - Header file for ausearch-nvpair.c
-* Copyright (c) 2006-08 Red Hat Inc., Durham, North Carolina.
+* Copyright (c) 2006-08 Red Hat Inc.
 * All Rights Reserved.
 *
 * This software may be freely redistributed and/or modified under the
@@ -46,7 +46,7 @@ typedef struct {
 
 void search_list_create(nvlist *l);
 static inline nvnode *search_list_get_cur(nvlist *l) { return l->cur; }
-void search_list_append(nvlist *l, nvnode *node);
+int search_list_append(nvlist *l, nvnode *node);
 void search_list_clear(nvlist* l);
 
 /* Given a numeric index, find that record. */
diff -ur audit-4.0.1.orig/src/ausearch-string.c audit-4.0.1/src/ausearch-string.c
--- audit-4.0.1.orig/src/ausearch-string.c
+++ audit-4.0.1/src/ausearch-string.c
@@ -44,11 +44,13 @@ snode *slist_next(slist *l)
 	return l->cur;
 }
 
-void slist_append(slist *l, const snode *node)
+int slist_append(slist *l, const snode *node)
 {
 	snode* newnode;
 
 	newnode = malloc(sizeof(snode));
+	if (newnode == NULL)
+		return 1;
 
 	if (node->str)
 		newnode->str = node->str;
@@ -75,6 +77,8 @@ void slist_append(slist *l, const snode
 	// make newnode current
 	l->cur = newnode;
 	l->cnt++;
+
+	return 0;
 }
 
 void slist_clear(slist* l)
diff -ur audit-4.0.1.orig/src/ausearch-string.h audit-4.0.1/src/ausearch-string.h
--- audit-4.0.1.orig/src/ausearch-string.h
+++ audit-4.0.1/src/ausearch-string.h
@@ -49,7 +49,7 @@ void slist_create(slist *l);
 static inline void slist_first(slist *l) { l->cur = l->head; }
 snode *slist_next(slist *l);
 static inline snode *slist_get_cur(const slist *l) { return l->cur; }
-void slist_append(slist *l, const snode *node);
+int slist_append(slist *l, const snode *node);
 void slist_clear(slist* l);
 
 /* append a string if its not already on the list */
diff -ur audit-4.0.1.orig/tools/aulastlog/aulastlog-llist.c audit-4.0.1/tools/aulastlog/aulastlog-llist.c
--- audit-4.0.1.orig/tools/aulastlog/aulastlog-llist.c
+++ audit-4.0.1/tools/aulastlog/aulastlog-llist.c
@@ -1,7 +1,7 @@
 /*
 * aulastlog-llist.c - Minimal linked list library
-* Copyright (c) 2008 Red Hat Inc., Durham, North Carolina.
-* All Rights Reserved. 
+* Copyright (c) 2008 Red Hat Inc..
+* All Rights Reserved.
 *
 * This software may be freely redistributed and/or modified under the
 * terms of the GNU General Public License as published by the Free
@@ -15,7 +15,7 @@
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING. If not, write to the
-* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor 
+* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor
 * Boston, MA 02110-1335, USA.
 *
 * Authors:
@@ -41,11 +41,13 @@ lnode *list_next(llist *l)
 	return l->cur;
 }
 
-void list_append(llist *l, lnode *node)
+int list_append(llist *l, lnode *node)
 {
 	lnode* newnode;
 
 	newnode = malloc(sizeof(lnode));
+	if (newnode == NULL)
+		return 1;
 
 	newnode->sec = node->sec;
 	newnode->uid = node->uid;
@@ -58,7 +60,7 @@ void list_append(llist *l, lnode *node)
 		newnode->term = strdup(node->term);
 	else
 		newnode->term = NULL;
-	newnode->item = l->cnt; 
+	newnode->item = l->cnt;
 	newnode->next = NULL;
 
 	// if we are at top, fix this up
@@ -70,6 +72,8 @@ void list_append(llist *l, lnode *node)
 	// make newnode current
 	l->cur = newnode;
 	l->cnt++;
+
+	return 0;
 }
 
 void list_clear(llist* l)
diff -ur audit-4.0.1.orig/tools/aulastlog/aulastlog-llist.h audit-4.0.1/tools/aulastlog/aulastlog-llist.h
--- audit-4.0.1.orig/tools/aulastlog/aulastlog-llist.h
+++ audit-4.0.1/tools/aulastlog/aulastlog-llist.h
@@ -1,6 +1,6 @@
 /*
 * aulastlog-llist.h - Header file for aulastlog-llist.c
-* Copyright (c) 2008 Red Hat Inc., Durham, North Carolina.
+* Copyright (c) 2008 Red Hat Inc.
 * All Rights Reserved.
 *
 * This software may be freely redistributed and/or modified under the
@@ -53,7 +53,7 @@ static inline void list_first(llist *l)
 lnode *list_next(llist *l);
 static inline lnode *list_get_cur(llist *l) { return l->cur; }
 static inline unsigned int list_get_cnt(llist *l) { return l->cnt; }
-void list_append(llist *l, lnode *node);
+int list_append(llist *l, lnode *node);
 void list_clear(llist* l);
 int list_update_login(llist* l, time_t t);
 int list_update_host(llist* l, const char *h);
