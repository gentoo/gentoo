<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="project">
		<email>toolchain@gentoo.org</email>
		<name>Gentoo Toolchain Project</name>
	</maintainer>
	<use>
		<flag name="ada">Build the ADA language (GNAT) frontend</flag>
		<flag name="cet" restrict="&gt;=sys-devel/gcc-10">Enable support for Intel Control Flow Enforcement Technology (CET)</flag>
		<flag name="d">Enable support for the D programming language</flag>
		<flag name="fixed-point">Enable fixed-point arithmetic support for MIPS targets in gcc (Warning: significantly increases compile time!)</flag>
		<flag name="go">Build the GCC Go language frontend.</flag>
		<flag name="graphite">Add support for the framework for loop optimizations based on a polyhedral intermediate representation</flag>
		<flag name="jit">Enable libgccjit so other applications can embed gcc for Just-In-Time compilation.</flag>
		<flag name="libssp">Build SSP support into a dedicated library rather than use the code in the C library (DO NOT ENABLE THIS IF YOU DON'T KNOW WHAT IT DOES)</flag>
		<flag name="lto">Build using Link Time Optimizations (LTO)</flag>
		<flag name="mpx">Enable support for Intel Memory Protection Extensions (MPX)</flag>
		<flag name="nptl">Enable support for Native POSIX Threads Library, the new threading module (requires linux-2.6 or better usually)</flag>
		<flag name="objc">Build support for the Objective C code language</flag>
		<flag name="objc++">Build support for the Objective C++ language</flag>
		<flag name="objc-gc">Build support for the Objective C code language Garbage Collector</flag>
		<flag name="pgo">Build GCC using Profile Guided Optimization (PGO)</flag>
		<flag name="sanitize">Build support for various sanitizer functions (ASAN/TSAN/etc...)</flag>
		<flag name="ssp">Build packages with stack smashing protector on by default</flag>
		<flag name="systemtap">enable systemtap static probe points</flag>
		<flag name="valgrind">Enable valgrind annotations for gcc internals (useful for gcc debugging).</flag>
		<flag name="vtv">Build support for virtual table verification (a C++ hardening feature)</flag>
	</use>
	<upstream>
		<remote-id type="cpe">cpe:/a:gnu:gcc</remote-id>
		<remote-id type="sourceforge">dgcc</remote-id>
	</upstream>
</pkgmetadata>
