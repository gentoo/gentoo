--- gdb-1461.2/src/gdb/macosx/macosx-nat-inferior.c
+++ gdb-1461.2/src/gdb/macosx/macosx-nat-inferior.c
@@ -60,13 +60,17 @@
 #include <sys/sysctl.h>
 #include <sys/proc.h>
 #include <mach/mach_error.h>
+#if defined(TARGET_ARM)
 #include <spawn.h>
+#endif
 
 #include <semaphore.h>
 
 #include <dlfcn.h>
+#if 0
 #include <libproc.h>
 #include <sys/proc_info.h>
+#endif
 
 #include "macosx-nat-dyld.h"
 #include "macosx-nat-inferior.h"
--- gdb-1461.2/src/gdb/macosx/macosx-nat-info.c
+++ gdb-1461.2/src/gdb/macosx/macosx-nat-info.c
@@ -45,6 +45,22 @@
 #include "macosx-nat-inferior.h"
 #include "macosx-nat-inferior-debug.h"
 
+#ifdef __ppc__
+#ifndef __darwin_ppc_thread_state
+#define __darwin_ppc_thread_state ppc_thread_state
+#define __r0       r0
+#define __srr0     srr0
+#define __srr1     srr1
+#define __cr       cr
+#define __xer      xer
+#define __lr       lr
+#define __ctr      ctr
+#endif
+#ifndef __darwin_ppc_exception_state
+#define __darwin_ppc_exception_state ppc_exception_state
+#endif
+#endif
+
 extern macosx_inferior_status *macosx_status;
 
 #define CHECK_ARGS(what, args) \
--- gdb-1461.2/src/gdb/macosx/macosx-nat-infthread.c
+++ gdb-1461.2/src/gdb/macosx/macosx-nat-infthread.c
@@ -36,8 +36,10 @@
 #include <sys/dir.h>
 #include <inttypes.h>
 
+#if 0
 #include <libproc.h>
 #include <sys/proc_info.h>
+#endif
 
 #include "macosx-nat-inferior.h"
 #include "macosx-nat-inferior-util.h"
--- gdb-1461.2/src/gdb/macosx/macosx-tdep.c
+++ gdb-1461.2/src/gdb/macosx/macosx-tdep.c
@@ -63,7 +63,6 @@
 #include "gdbcore.h"
 
 #include <dirent.h>
-#include <libgen.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <sys/param.h>
--- gdb-1461.2/src/gdb/remote.c
+++ gdb-1461.2/src/gdb/remote.c
@@ -62,7 +62,6 @@
 #include "macosx-nat-dyld.h"
 #include "macosx-nat-dyld-process.h"
 #endif
-#include <execinfo.h>
 
 /* Prototypes for local functions.  */
 static void cleanup_sigint_signal_handler (void *dummy);
@@ -474,11 +473,13 @@
 static void
 remote_backtrace_self (const char *message)
 {
+#if 0
   void *bt_buffer[100];
   int count = backtrace (bt_buffer, 100);
   if (message && message[0])
     fprintf_filtered (gdb_stderr, "%s", message);
   backtrace_symbols_fd (bt_buffer, count, STDERR_FILENO);
+#endif
 }
 
 static void
--- gdb-1461.2/src/gdb/symfile.c
+++ gdb-1461.2/src/gdb/symfile.c
@@ -67,7 +67,6 @@
 #include <ctype.h>
 #include <time.h>
 #include <sys/time.h>
-#include <libgen.h>
 
 #include <sys/mman.h>
 
--- gdb-1461.2/src/gdb/utils.c
+++ gdb-1461.2/src/gdb/utils.c
@@ -27,7 +27,6 @@
 #include "gdb_string.h"
 #include "event-top.h"
 #include "exceptions.h"
-#include <execinfo.h>
 
 #ifdef TUI
 #include "tui/tui.h"		/* For tui_get_command_dimension.   */
@@ -874,6 +873,7 @@
   target_terminal_ours ();
   begin_line ();
 
+#if 0
   /* APPLE LOCAL: Do a stack crawl of how we got here so we're more likely
      to get useful bug reports.  */
   {
@@ -882,6 +882,7 @@
     fprintf (stderr, "gdb stack crawl at point of internal error:\n");
     backtrace_symbols_fd (bt_buffer, count, STDERR_FILENO);
   }
+#endif
 
   /* Create a string containing the full error/warning message.  Need
      to call query with this full string, as otherwize the reason
