Kindly borrowed from Debian.

14:13 < mst__> _rene_, the toolkit unoapi tests are known to be flaky (in some 
               system dependent way) e.g. on the Win@6 tinderbox it always 
               crashes
14:14 < mst__> _rene_, sc.ScAccessible* tests also fail on some systems some of 
               the time

diff --git a/toolkit/Module_toolkit.mk b/toolkit/Module_toolkit.mk
index 25db0b6..14e507c 100644
--- a/toolkit/Module_toolkit.mk
+++ b/toolkit/Module_toolkit.mk
@@ -26,11 +26,11 @@ $(eval $(call gb_Module_add_targets,toolkit,\
 ifneq ($(OOO_JUNIT_JAR),)
 $(eval $(call gb_Module_add_subsequentcheck_targets,toolkit,\
     JunitTest_toolkit_complex \
-    JunitTest_toolkit_unoapi_1 \
-    JunitTest_toolkit_unoapi_2 \
-    JunitTest_toolkit_unoapi_3 \
-    JunitTest_toolkit_unoapi_4 \
 ))
 endif
+#    JunitTest_toolkit_unoapi_1 \
+#    JunitTest_toolkit_unoapi_2 \
+#    JunitTest_toolkit_unoapi_3 \
+#    JunitTest_toolkit_unoapi_4 \
 
 # vim: set noet sw=4 ts=4:
diff --git a/sc/qa/unoapi/sc_1.sce b/sc/qa/unoapi/sc_1.sce
index fa1684c..cc8e1a5 100644
--- a/sc/qa/unoapi/sc_1.sce
+++ b/sc/qa/unoapi/sc_1.sce
@@ -24,10 +24,3 @@
 # i84554 -o sc.AccessibleEditableTextPara_PreviewNote
 # i88241 -o sc.AccessibleEditableTextPara_HeaderFooter
 -o sc.AccessibleEditableTextPara_PreviewCell
--o sc.ScAccessibleCell
-# i91044 -o sc.ScAccessibleCsvCell
-# i91044 -o sc.ScAccessibleCsvGrid
-# i84641 -o sc.ScAccessibleCsvRuler
-# i88330 -o sc.ScAccessibleDocument
-# i91045 -o sc.ScAccessibleDocumentPagePreview
--o sc.ScAccessiblePageHeader
diff --git a/sc/qa/unoapi/sc_2.sce b/sc/qa/unoapi/sc_2.sce
index dbfc3e1..d235c5d 100644
--- a/sc/qa/unoapi/sc_2.sce
+++ b/sc/qa/unoapi/sc_2.sce
@@ -15,11 +15,6 @@
 #   except in compliance with the License. You may obtain a copy of
 #   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 #
-# fdo#FOO -o sc.ScAccessiblePageHeaderArea
--o sc.ScAccessiblePreviewCell
--o sc.ScAccessiblePreviewHeaderCell
--o sc.ScAccessiblePreviewTable
-# fdo#45337 -o sc.ScAccessibleSpreadsheet
 # FIXME_REMOVE_WHEN_RE_BASE_COMPLETE
 # -o sc.ScAnnotationObj
 # -o sc.ScAnnotationShapeObj

12:18 < _rene_> chris_wot: ping?
12:18 < chris_wot> heya
12:18 < chris_wot> you pinged?
12:19 < _rene_> chris_wot: any news on 
                https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=815292?
12:20 < _rene_> (of course the this-night-uploaded rc3 also failed)
12:21 < chris_wot> ah, sorry - I've looked at an EMF regression, but I've not 
                   gotten any further on that one
12:22 < chris_wot> I honestly think that for this one just disable the test for 
                   now
12:22 < chris_wot> I'll ping the ML

This seems fixed when opening the original doc.

diff --git a/sw/qa/extras/ooxmlexport/ooxmlexport7.cxx b/sw/qa/extras/ooxmlexport/ooxmlexport7.cxx
index 54eed4d..78019bd 100644
--- a/sw/qa/extras/ooxmlexport/ooxmlexport7.cxx
+++ b/sw/qa/extras/ooxmlexport/ooxmlexport7.cxx
@@ -1128,30 +1128,30 @@ DECLARE_OOXMLEXPORT_TEST(testTDF93675, "no-numlevel-but-indented.odt")
 
 
 
-DECLARE_OOXMLEXPORT_TEST(testFlipAndRotateCustomShape, "flip_and_rotate.odt")
-{
-    xmlDocPtr pXmlDoc = parseExport("word/document.xml");
-    if (!pXmlDoc)
-        return;
-    // there should be no flipH and flipV attributes in this case
-    assertXPathNoAttribute(pXmlDoc, "//a:xfrm", "flipH");
-    assertXPathNoAttribute(pXmlDoc, "//a:xfrm", "flipV");
-    // check rotation angle
-    assertXPath(pXmlDoc, "//a:xfrm", "rot", "13500000");
-    // check the first few coordinates of the polygon
-#ifndef MACOSX /* Retina-related rounding roundtrip error
-                * hard to smooth out due to the use of string compare
-                * instead of number */
-#if !defined(_WIN32)
-    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[1]/a:pt", "x", "2351");
-    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[1]/a:pt", "y", "3171");
-    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[2]/a:pt", "x", "1695");
-    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[2]/a:pt", "y", "3171");
-    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[3]/a:pt", "x", "1695");
-    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[3]/a:pt", "y", "1701");
-#endif
-#endif
-}
+//DECLARE_OOXMLEXPORT_TEST(testFlipAndRotateCustomShape, "flip_and_rotate.odt")
+//{
+//    xmlDocPtr pXmlDoc = parseExport("word/document.xml");
+//    if (!pXmlDoc)
+//        return;
+//    // there should be no flipH and flipV attributes in this case
+//    assertXPathNoAttribute(pXmlDoc, "//a:xfrm", "flipH");
+//    assertXPathNoAttribute(pXmlDoc, "//a:xfrm", "flipV");
+//    // check rotation angle
+//    assertXPath(pXmlDoc, "//a:xfrm", "rot", "13500000");
+//    // check the first few coordinates of the polygon
+//#ifndef MACOSX /* Retina-related rounding roundtrip error
+//                * hard to smooth out due to the use of string compare
+//                * instead of number */
+//#if !defined(_WIN32)
+//    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[1]/a:pt", "x", "2351");
+//    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[1]/a:pt", "y", "3171");
+//    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[2]/a:pt", "x", "1695");
+//    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[2]/a:pt", "y", "3171");
+//    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[3]/a:pt", "x", "1695");
+//    assertXPath(pXmlDoc, "//a:custGeom/a:pathLst/a:path/a:lnTo[3]/a:pt", "y", "1701");
+//#endif
+//#endif
+//}
 
 
 CPPUNIT_PLUGIN_IMPLEMENT();
diff --git a/svx/qa/unoapi/svx.sce b/svx/qa/unoapi/svx.sce
index 1c3925f..a16f001 100644
--- a/svx/qa/unoapi/svx.sce
+++ b/svx/qa/unoapi/svx.sce
@@ -25,7 +25,7 @@
 #i111216 -o svx.AccessiblePresentationGraphicShape
 #i111216 -o svx.AccessiblePresentationOLEShape
 #i85539 -o svx.AccessiblePresentationShape
--o svx.AccessibleShape
+#-o svx.AccessibleShape
 #i90294 -o svx.GraphicExporter
 -o svx.SvxDrawPage
 #i85501 -o svx.SvxGraphCtrlAccessibleContext

19:26 <@x1sc0> _rene_, since that test is using exact dimensions, it seems it 
               fails on your side probably because the paragraph style is 
               different. 1. I will change the test to avoid the exact 
               dimensions. 2. meantime you can skip that test: 
https://cgit.freedesktop.org/libreoffice/core/commit/?id=e05f16e6bf36efbaab16dd2ed1427a750ce7cafd
19:26 < IZBot> core - disable UI test that does exact comparison
19:27 < _rene_> mmh, ok, saw that but that was for a different test, so.. :)
19:27 -!- jacobo [~jaragunde@fanzine.igalia.com] has quit [Quit: Leaving.]
19:27 < _rene_> thanks, will do

diff --git a/uitest/writer_tests/tdf79236.py b/uitest/writer_tests/tdf79236.py
index 8585e48d8c64..704f42c009a1 100644
--- a/uitest/writer_tests/tdf79236.py
+++ b/uitest/writer_tests/tdf79236.py
@@ -8,8 +8,11 @@ from uitest.framework import UITestCase
 import time
 from uitest.uihelper.common import get_state_as_dict, type_text
 
+import unittest
+
 class tdf79236(UITestCase):
 
+    @unittest.skip("Currently broken")
     def test_paragraph(self):
 
         self.ui_test.create_doc_in_start_center("writer")

14:39 < ztamas> _rene_: chart2dump is used to fail because of font size differences, just use a bigger delta or disable it if it 
                fails for you.
14:40 <@sberg_> noelgrandin, no
14:40 < noelgrandin> sberg_, sure seems that way both in the debugger and in the resulting SAL_WARN output
14:42 < ztamas> _rene_: there were some work on making font rendering consistent on different platforms, but it's not finished 
                yet, I guess
diff --git a/chart2/Module_chart2.mk b/chart2/Module_chart2.mk
index 3273055d5373..cb452139170c 100644
--- a/chart2/Module_chart2.mk
+++ b/chart2/Module_chart2.mk
@@ -33,9 +33,9 @@ $(eval $(call gb_Module_add_slowcheck_targets,chart2,\
     CppunitTest_chart2_export \
     CppunitTest_chart2_import \
     CppunitTest_chart2_trendcalculators \
-    CppunitTest_chart2_dump \
     CppunitTest_chart2_pivot_chart_test \
 ))
+#    CppunitTest_chart2_dump \
 
 ifeq ($(ENABLE_CHART_TESTS),TRUE)
 ifeq ($(WITH_FONTS), TRUE)
diff --git a/sw/qa/extras/ooxmlimport/ooxmlimport.cxx b/sw/qa/extras/ooxmlimport/ooxmlimport.cxx
index 4d65beeb90c4..f3d71501c41a 100644
--- a/sw/qa/extras/ooxmlimport/ooxmlimport.cxx
+++ b/sw/qa/extras/ooxmlimport/ooxmlimport.cxx
@@ -1559,14 +1559,14 @@ DECLARE_OOXMLIMPORT_TEST(testTdf43017, "tdf43017.docx")
 }
 
 
-DECLARE_OOXMLIMPORT_TEST(testTdf112443, "tdf112443.docx")
+/*DECLARE_OOXMLIMPORT_TEST(testTdf112443, "tdf112443.docx")
 {
     // the position of the flying text frame should be off page
     // 30624 below its anchor
     OUString aTop = parseDump("//fly[1]/infos/bounds", "top");
     CPPUNIT_ASSERT_EQUAL( OUString("30624"), aTop );
 
-}
+}*/

 DECLARE_OOXMLIMPORT_TEST(testTdf113946, "tdf113946.docx")
 {
