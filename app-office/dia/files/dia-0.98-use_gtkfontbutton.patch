https://salsa.debian.org/debian/dia/-/blob/debian/0.98+git20250827-2/debian/patches/use-gtkfontbutton.patch
Origin: https://gitlab.gnome.org/GNOME/dia/-/merge_requests/114
This patch changes the custom font-selector window by a GtkFontButton widget.
Fix the custom font-selector window which is very long to load.
--- a/lib/font.c
+++ b/lib/font.c
@@ -39,6 +39,7 @@
 #include "font.h"
 #include "message.h"
 #include "textline.h"
+#include "units.h"
 
 static PangoContext *pango_context = NULL;
 
@@ -53,13 +54,6 @@ struct _DiaFont {
   PangoFontDescription *pfd;
   /* mutable */ char *legacy_name;
 
-  /* there is a difference between Pango's font size and Dia's font height */
-  /* Calculated  font_size is to make 'font_height = ascent + descent */
-  /* The font_height is used as default line height, there used to be a hard-coded size = 0.7 * height  */
-  /* before using pango_set_absolute_size() to overcome font size differences between renderers */
-  double height;
-  /* Need to load a font to query it's metrics */
-  PangoFont *loaded;
   PangoFontMetrics *metrics;
 };
 
@@ -136,8 +130,6 @@ dia_font_finalize (GObject *object)
   g_clear_pointer (&font->pfd, pango_font_description_free);
   g_clear_pointer (&font->metrics, pango_font_metrics_unref);
 
-  g_clear_object (&font->loaded);
-
   G_OBJECT_CLASS (dia_font_parent_class)->finalize (object);
 }
 
@@ -166,33 +158,17 @@ dia_pfd_set_height(PangoFontDescription *pfd, double height)
 }
 
 
-/*!
- * In Dia a font is usually referred to by it's (line-) height, not it's size.
- *
- * This methods "calculates" the latter from the former. This used to be some magic factor of 0.7 which did not
- * solve the resolution dependencance of the former calculation. In fact there is new magic factor now because
- * really calculating the font size from the height would involve two font loads which seem to be two expensive.
- */
 static void
-_dia_font_adjust_size (DiaFont *font, double height, gboolean recalc_alwways)
+dia_font_update_metrics (DiaFont *font)
 {
+  PangoFont *loaded;
 
-  if (font->height != height || !font->metrics || recalc_alwways) {
-    PangoFont *loaded;
-
-    dia_pfd_set_height (font->pfd, height);
-    /* need to load a font to get it's metrics */
-    loaded = font->loaded;
-    font->loaded = pango_context_load_font (dia_font_get_context (), font->pfd);
-
-    g_clear_object (&loaded);
-
-    g_clear_pointer (&font->metrics, pango_font_metrics_unref);
+  g_clear_pointer (&font->metrics, pango_font_metrics_unref);
 
-    /* caching metrics */
-    font->metrics = pango_font_get_metrics (font->loaded, NULL);
-    font->height = height;
-  }
+  /* need to load a font to get its metrics */
+  loaded = pango_context_load_font (dia_font_get_context (), font->pfd);
+  font->metrics = pango_font_get_metrics (loaded, NULL);
+  g_clear_object (&loaded);
 }
 
 
@@ -205,15 +181,8 @@ DiaFont *
 dia_font_new (const char *family, DiaFontStyle style, double height)
 {
   DiaFont* font = dia_font_new_from_style(style, height);
-  gboolean changed;
-
-  changed = family != NULL && g_strcmp0 (pango_font_description_get_family (font->pfd), family) != 0;
   pango_font_description_set_family(font->pfd, family);
 
-  if (changed) {
-    _dia_font_adjust_size (font, font->height, TRUE);
-  }
-
   return font;
 }
 
@@ -316,9 +285,31 @@ dia_font_new_from_style (DiaFontStyle style, double height)
 
   retval = g_object_new (DIA_TYPE_FONT, NULL);
   retval->pfd = pfd;
-  _dia_font_adjust_size (retval, height, FALSE);
   retval->legacy_name = NULL;
 
+  dia_font_update_metrics (retval);
+
+  return retval;
+}
+
+
+DiaFont *
+dia_font_new_from_description (const char *desc)
+{
+  DiaFont *retval;
+  PangoFontDescription *pfd = pango_font_description_from_string (desc);
+
+  if (!pango_font_description_get_size_is_absolute (pfd)) {
+    double size = pango_font_description_get_size (pfd);
+    pango_font_description_set_absolute_size(pfd, size * global_zoom_factor * 72.0);
+  }
+
+  retval = g_object_new (DIA_TYPE_FONT, NULL);
+  retval->pfd = pfd;
+  retval->legacy_name = NULL;
+
+  dia_font_update_metrics (retval);
+
   return retval;
 }
 
@@ -407,8 +398,9 @@ double
 dia_font_get_height (DiaFont *font)
 {
   g_return_val_if_fail (font != NULL, 0.0);
+  g_return_val_if_fail (pango_font_description_get_size_is_absolute (font->pfd), 0.0);
 
-  return font->height;
+  return pdu_to_dcm(pango_font_description_get_size(font->pfd)) / 0.8;
 }
 
 
@@ -430,6 +422,23 @@ dia_font_get_size (DiaFont *font)
 }
 
 
+/**
+ * dia_font_set_size:
+ * @font: The font to modify.
+ * @size: The new size in centimetres.
+ *
+ * Sets the size of font to the provided (positive) size.
+ */
+void
+dia_font_set_size (DiaFont *font, double size)
+{
+  g_return_if_fail (size >= 0);
+
+  pango_font_description_set_absolute_size (font->pfd, dcm_to_pdu (size));
+  dia_font_update_metrics (font);
+}
+
+
 /**
  * dia_font_set_height:
  *
@@ -438,7 +447,8 @@ dia_font_get_size (DiaFont *font)
 void
 dia_font_set_height (DiaFont* font, double height)
 {
-  _dia_font_adjust_size (font, height, FALSE);
+  /* FIXME For now, assume height is 80% of size. */
+  dia_font_set_size (font, height / 0.8);
 }
 
 
@@ -493,7 +503,7 @@ dia_font_set_any_family (DiaFont *font, const char *family)
   pango_font_description_set_family (font->pfd, family);
   if (changed) {
     /* force recalculation on name change */
-    _dia_font_adjust_size (font, font->height, TRUE);
+    dia_font_update_metrics (font);
   }
 
   g_clear_pointer (&font->legacy_name, g_free);
@@ -531,7 +541,7 @@ dia_font_set_weight (DiaFont *font, DiaFontWeight weight)
   dia_pfd_set_weight(font->pfd,weight);
 
   if (old_weight != weight) {
-    _dia_font_adjust_size (font, font->height, TRUE);
+    dia_font_update_metrics (font);
   }
 }
 
@@ -548,7 +558,7 @@ dia_font_set_slant (DiaFont *font, DiaFontSlant slant)
   g_return_if_fail(font != NULL);
   dia_pfd_set_slant(font->pfd,slant);
   if (slant != old_slant)
-    _dia_font_adjust_size (font, font->height, TRUE);
+    dia_font_update_metrics (font);
 }
 
 
@@ -702,7 +712,8 @@ dia_font_ascent (const char *string, DiaFont *font, double height)
 {
   if (font->metrics) {
     double ascent = pdu_to_dcm (pango_font_metrics_get_ascent (font->metrics));
-    return ascent * (height / font->height);
+    double factor = height / dia_font_get_height (font);
+    return ascent * factor;
   } else {
     /* previous, _expensive_ but string specific way */
     TextLine *text_line = text_line_new (string, font, height);
@@ -723,7 +734,8 @@ dia_font_descent (const char *string, DiaFont *font, double height)
 {
   if (font->metrics) {
     double descent = pdu_to_dcm (pango_font_metrics_get_descent (font->metrics));
-    return descent * (height / font->height);
+    double factor = height / dia_font_get_height (font);
+    return descent * factor;
   } else {
     /* previous, _expensive_ but string specific way */
     TextLine *text_line = text_line_new (string, font, height);
--- a/lib/font.h
+++ b/lib/font.h
@@ -95,6 +95,7 @@ DiaFont                    *dia_font_new                    (const char       *f
 DiaFont                    *dia_font_new_from_style         (DiaFontStyle      style,
                                                              double            height);
 DiaFont                    *dia_font_new_from_legacy_name   (const char       *name);
+DiaFont                    *dia_font_new_from_description   (const char       *description);
 const char                 *dia_font_get_legacy_name        (DiaFont          *font);
 DiaFont                    *dia_font_copy                   (DiaFont          *font);
 DiaFontStyle                dia_font_get_style              (DiaFont          *font);
@@ -103,6 +104,8 @@ const PangoFontDescription *dia_font_get_description        (DiaFont          *f
 double                      dia_font_get_height             (DiaFont          *font);
 void                        dia_font_set_height             (DiaFont          *font,
                                                              double            height);
+void                        dia_font_set_size               (DiaFont          *font,
+                                                             double            size);
 double                      dia_font_get_size               (DiaFont          *font);
 void                        dia_font_set_slant              (DiaFont          *font,
                                                              DiaFontSlant      slant);
--- a/lib/libdia.def
+++ b/lib/libdia.def
@@ -241,8 +241,10 @@ EXPORTS
  dia_font_new
  dia_font_new_from_legacy_name
  dia_font_new_from_style
+ dia_font_new_from_description
  dia_font_set_any_family
  dia_font_set_height
+ dia_font_set_size
  dia_font_set_slant
  dia_font_set_slant_from_string
  dia_font_set_weight
@@ -250,11 +252,6 @@ EXPORTS
  dia_font_copy
  dia_font_string_width
 
- dia_font_selector_get_font
- dia_font_selector_get_type
- dia_font_selector_new
- dia_font_selector_set_font
-
  dia_guide_new
  dia_guide_copy
  dia_guide_free
--- a/lib/meson.build
+++ b/lib/meson.build
@@ -167,8 +167,6 @@ libdia_sources = stdprop_sources + [
     'dia-colour-cell-renderer.h',
     'dia-colour-selector.c',
     'dia-colour-selector.h',
-    'dia-font-selector.c',
-    'dia-font-selector.h',
     'dia-graphene.h',
     'dia-guide.c',
     'dia-guide.h',
--- a/lib/prop_attr.c
+++ b/lib/prop_attr.c
@@ -29,11 +29,11 @@
 
 #include <gtk/gtk.h>
 #include "dia_xml.h"
+#include "font.h"
 #include "properties.h"
 #include "propinternals.h"
 #include "dia-arrow-selector.h"
 #include "dia-colour-selector.h"
-#include "dia-font-selector.h"
 #include "dia-line-style-selector.h"
 
 /***************************/
@@ -421,22 +421,27 @@ fontprop_copy(FontProperty *src)
 static WIDGET *
 fontprop_get_widget(FontProperty *prop, PropDialog *dialog)
 {
-  GtkWidget *ret = dia_font_selector_new();
-  prophandler_connect(&prop->common, G_OBJECT(ret), "value-changed");
+  GtkWidget *ret = gtk_font_button_new();
+  gtk_font_chooser_set_level (GTK_FONT_CHOOSER (ret), GTK_FONT_CHOOSER_LEVEL_FAMILY | GTK_FONT_CHOOSER_LEVEL_STYLE);
+  prophandler_connect(&prop->common, G_OBJECT(ret), "font-set");
   return ret;
 }
 
 static void
 fontprop_reset_widget(FontProperty *prop, WIDGET *widget)
 {
-  dia_font_selector_set_font (DIA_FONT_SELECTOR (widget),
-                              prop->font_data);
+  const PangoFontDescription *desc = dia_font_get_description (prop->font_data);
+  gtk_font_chooser_set_font_desc (GTK_FONT_CHOOSER (widget), desc);
 }
 
 static void
 fontprop_set_from_widget(FontProperty *prop, WIDGET *widget)
 {
-  prop->font_data = dia_font_selector_get_font (DIA_FONT_SELECTOR (widget));
+  char *desc = gtk_font_chooser_get_font (GTK_FONT_CHOOSER (widget));
+  DiaFont *new_font = dia_font_new_from_description (desc);
+
+  g_clear_pointer (&desc, g_free);
+  g_set_object (&prop->font_data, new_font);
 }
 
 static void
--- a/lib/prop_text.c
+++ b/lib/prop_text.c
@@ -125,6 +125,7 @@ multistringprop_get_widget(StringProperty *prop, PropDialog *dialog)
   GtkWidget *ret = gtk_text_view_new();
   GtkTextBuffer *buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(ret));
   GtkWidget *frame = gtk_frame_new(NULL);
+  gtk_text_view_set_accepts_tab (GTK_TEXT_VIEW (ret), FALSE);
   gtk_frame_set_shadow_type(GTK_FRAME(frame), GTK_SHADOW_IN);
   gtk_container_add(GTK_CONTAINER(frame), ret);
   g_signal_connect(G_OBJECT(ret), "key-release-event",
--- a/objects/UML/class_attributes_dialog.c
+++ b/objects/UML/class_attributes_dialog.c
@@ -729,6 +729,7 @@ _attributes_create_page (GtkNotebook *notebook, UMLClass *umlclass)
   gtk_container_add (GTK_CONTAINER (scrolledwindow), entry);
   gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW (entry), GTK_WRAP_WORD);
   gtk_text_view_set_cursor_visible (GTK_TEXT_VIEW (entry), TRUE);
+  gtk_text_view_set_accepts_tab (GTK_TEXT_VIEW (entry), FALSE);
   gtk_widget_show (entry);
 #if 0 /* while the GtkEntry has a "activate" signal, GtkTextView does not.
        * Maybe we should connect to "set-focus-child" instead?
--- a/objects/UML/class_dialog.c
+++ b/objects/UML/class_dialog.c
@@ -40,6 +40,7 @@
 #include <math.h>
 #include <string.h>
 
+#include "font.h"
 #include "object.h"
 #include "class.h"
 #include "diaoptionmenu.h"
@@ -196,6 +197,28 @@ _class_set_comment (GtkTextView *view, gchar *text)
 }
 
 
+static DiaFont *
+_font_from_button (GtkFontButton *btn)
+{
+  char *font_desc;
+  DiaFont *ret;
+
+  font_desc = gtk_font_chooser_get_font (GTK_FONT_CHOOSER (btn));
+  ret = dia_font_new_from_description (font_desc);
+  g_clear_pointer (&font_desc, g_free);
+
+  return ret;
+}
+
+
+static void
+_set_selector_font (GtkFontButton *btn, DiaFont *font)
+{
+  gtk_font_chooser_set_font_desc (GTK_FONT_CHOOSER (btn),
+                                  dia_font_get_description (font));
+}
+
+
 static void
 class_read_from_dialog(UMLClass *umlclass, UMLClassDialog *prop_dialog)
 {
@@ -243,12 +266,12 @@ class_read_from_dialog(UMLClass *umlclass, UMLClassDialog *prop_dialog)
   dia_colour_selector_get_colour (DIA_COLOUR_SELECTOR (prop_dialog->fill_color),
                                   &umlclass->fill_color);
 
-  umlclass->normal_font = dia_font_selector_get_font (prop_dialog->normal_font);
-  umlclass->polymorphic_font = dia_font_selector_get_font (prop_dialog->polymorphic_font);
-  umlclass->abstract_font = dia_font_selector_get_font (prop_dialog->abstract_font);
-  umlclass->classname_font = dia_font_selector_get_font (prop_dialog->classname_font);
-  umlclass->abstract_classname_font = dia_font_selector_get_font (prop_dialog->abstract_classname_font);
-  umlclass->comment_font = dia_font_selector_get_font (prop_dialog->comment_font);
+  umlclass->normal_font = _font_from_button(prop_dialog->normal_font);
+  umlclass->polymorphic_font = _font_from_button(prop_dialog->polymorphic_font);
+  umlclass->abstract_font = _font_from_button(prop_dialog->abstract_font);
+  umlclass->classname_font = _font_from_button (prop_dialog->classname_font);
+  umlclass->abstract_classname_font = _font_from_button (prop_dialog->abstract_classname_font);
+  umlclass->comment_font = _font_from_button (prop_dialog->comment_font);
 
   umlclass->font_height = gtk_spin_button_get_value (prop_dialog->normal_font_height);
   umlclass->abstract_font_height = gtk_spin_button_get_value (prop_dialog->abstract_font_height);
@@ -291,12 +314,12 @@ class_fill_in_dialog(UMLClass *umlclass)
   dia_colour_selector_set_colour (prop_dialog->text_color, &umlclass->text_color);
   dia_colour_selector_set_colour (prop_dialog->line_color, &umlclass->line_color);
   dia_colour_selector_set_colour (prop_dialog->fill_color, &umlclass->fill_color);
-  dia_font_selector_set_font (prop_dialog->normal_font, umlclass->normal_font);
-  dia_font_selector_set_font (prop_dialog->polymorphic_font, umlclass->polymorphic_font);
-  dia_font_selector_set_font (prop_dialog->abstract_font, umlclass->abstract_font);
-  dia_font_selector_set_font (prop_dialog->classname_font, umlclass->classname_font);
-  dia_font_selector_set_font (prop_dialog->abstract_classname_font, umlclass->abstract_classname_font);
-  dia_font_selector_set_font (prop_dialog->comment_font, umlclass->comment_font);
+  _set_selector_font (prop_dialog->normal_font, umlclass->normal_font);
+  _set_selector_font (prop_dialog->polymorphic_font, umlclass->polymorphic_font);
+  _set_selector_font (prop_dialog->abstract_font, umlclass->abstract_font);
+  _set_selector_font (prop_dialog->classname_font, umlclass->classname_font);
+  _set_selector_font (prop_dialog->abstract_classname_font, umlclass->abstract_classname_font);
+  _set_selector_font (prop_dialog->comment_font, umlclass->comment_font);
   gtk_spin_button_set_value (prop_dialog->normal_font_height, umlclass->font_height);
   gtk_spin_button_set_value (prop_dialog->polymorphic_font_height, umlclass->polymorphic_font_height);
   gtk_spin_button_set_value (prop_dialog->abstract_font_height, umlclass->abstract_font_height);
@@ -311,7 +334,7 @@ create_font_props_row (GtkGrid    *grid,
                        gint        row,
                        DiaFont    *font,
                        real        height,
-                       DiaFontSelector **fontsel,
+                       GtkFontButton   **fontsel,
                        GtkSpinButton   **heightsel)
 {
   GtkWidget *label;
@@ -320,9 +343,10 @@ create_font_props_row (GtkGrid    *grid,
   label = gtk_label_new (kind);
   gtk_misc_set_alignment (GTK_MISC (label), 0.0, 0.5);
   gtk_grid_attach (grid, label, 0, row, 1, 1);
-  *fontsel = DIA_FONT_SELECTOR (dia_font_selector_new ());
+  *fontsel = GTK_FONT_BUTTON (gtk_font_button_new ());
   gtk_widget_set_hexpand (GTK_WIDGET (*fontsel), TRUE);
-  dia_font_selector_set_font (DIA_FONT_SELECTOR (*fontsel), font);
+  gtk_font_chooser_set_font_desc (GTK_FONT_CHOOSER (*fontsel), dia_font_get_description (font));
+  gtk_font_chooser_set_level (GTK_FONT_CHOOSER (*fontsel), GTK_FONT_CHOOSER_LEVEL_FAMILY | GTK_FONT_CHOOSER_LEVEL_STYLE);
   gtk_grid_attach (GTK_GRID (grid), GTK_WIDGET(*fontsel), 1, row, 1, 1);
 
   adj = GTK_ADJUSTMENT (gtk_adjustment_new (height, 0.1, 10.0, 0.1, 1.0, 0));
@@ -382,6 +406,7 @@ class_create_page(GtkNotebook *notebook,  UMLClass *umlclass)
   gtk_scrolled_window_set_shadow_type (GTK_SCROLLED_WINDOW (scrolledwindow),
 				       GTK_SHADOW_IN);
   entry = gtk_text_view_new ();
+  gtk_text_view_set_accepts_tab (GTK_TEXT_VIEW (entry), FALSE);
   prop_dialog->comment = GTK_TEXT_VIEW(entry);
   gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW (entry), GTK_WRAP_WORD);
 
--- a/objects/UML/class_dialog.h
+++ b/objects/UML/class_dialog.h
@@ -1,7 +1,6 @@
 #pragma once
 
 #include "dia-colour-selector.h"
-#include "dia-font-selector.h"
 
 G_BEGIN_DECLS
 
@@ -32,12 +31,12 @@ struct _UMLClassDialog {
   GtkToggleButton *op_supp;
   GtkToggleButton *comments_vis;
   GtkToggleButton *op_wrap;
-  DiaFontSelector *normal_font;
-  DiaFontSelector *abstract_font;
-  DiaFontSelector *polymorphic_font;
-  DiaFontSelector *classname_font;
-  DiaFontSelector *abstract_classname_font;
-  DiaFontSelector *comment_font;
+  GtkFontButton *normal_font;
+  GtkFontButton *abstract_font;
+  GtkFontButton *polymorphic_font;
+  GtkFontButton *classname_font;
+  GtkFontButton *abstract_classname_font;
+  GtkFontButton *comment_font;
   GtkSpinButton *normal_font_height;
   GtkSpinButton *abstract_font_height;
   GtkSpinButton *polymorphic_font_height;
--- a/objects/UML/class_operations_dialog.c
+++ b/objects/UML/class_operations_dialog.c
@@ -982,6 +982,7 @@ operations_data_create_hbox (UMLClass *umlclass)
   gtk_container_add (GTK_CONTAINER (scrolledwindow), entry);
   gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW (entry), GTK_WRAP_WORD);
   gtk_text_view_set_cursor_visible (GTK_TEXT_VIEW (entry),TRUE);
+  gtk_text_view_set_accepts_tab (GTK_TEXT_VIEW (entry), FALSE);
 
 
   gtk_grid_attach (GTK_GRID (grid), label, 4, 0, 1, 1);
@@ -1340,6 +1341,7 @@ operations_parameters_data_create_vbox (UMLClass *umlclass)
   gtk_container_add (GTK_CONTAINER (scrolledwindow), entry);
   gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW (entry), GTK_WRAP_WORD);
   gtk_text_view_set_cursor_visible (GTK_TEXT_VIEW (entry),TRUE);
+  gtk_text_view_set_accepts_tab (GTK_TEXT_VIEW (entry), FALSE);
 
   gtk_misc_set_alignment (GTK_MISC (label), 0.0, 0.5);
   gtk_grid_attach (GTK_GRID (grid), label, 2, 1, 1, 1);
