--- a/src/ballistics.c
+++ b/src/ballistics.c
@@ -92,6 +92,7 @@
 	    break;
 	case WALL_LAST:
 	    /* just to satisfy gcc -Wall */
+	    ;
     }
 }
 
@@ -210,7 +211,7 @@
 		break;
 	    case WALL_RANDOM:	/* both of this can't happen, */
 	    case WALL_LAST:	/* so they are here to satisfy gcc -Wall */
-
+	    	;
 	}
     }
     return FLYING;
--- a/src/gfx.c
+++ b/src/gfx.c
@@ -51,7 +51,7 @@
 int gfx_armorBar=0;
 
 /* The maximum value for a color. */
-#define CMAX ((uint16)(~0))
+#define CMAX ((uint16_t)(~0))
 #define MAX(a, b)  (((a) > (b)) ? (a) : (b))
 #define MIN(a, b)  (((a) < (b)) ? (a) : (b))
 
--- a/src/gfx.h
+++ b/src/gfx.h
@@ -24,7 +24,7 @@
 #include "terrain.h"
 
 /* The maximum value for a color. */
-#define CMAX ((uint16)(~0))
+#define CMAX ((uint16_t)(~0))
 #define MAX_WALLS 6
 
 extern ggi_visual_t gfx_vis;
--- a/src/log.c
+++ b/src/log.c
@@ -26,7 +26,7 @@
 
 Levels_log log_level = INTERESTING;
 
-inline void logPrintf(Levels_log level, char *fmt, ...)
+void logPrintf(Levels_log level, char *fmt, ...)
 {
     if(log_level < level)
 	return;
--- a/src/log.h
+++ b/src/log.h
@@ -25,6 +25,6 @@
 
 extern Levels_log log_level;
 
-inline void logPrintf(Levels_log level, char *fmt, ...);
+void logPrintf(Levels_log level, char *fmt, ...);
 
 #endif
--- a/src/relay.c
+++ b/src/relay.c
@@ -260,6 +260,7 @@
 		    else goto bail;
 		    goto nextpkt;
 		bail:
+		    ;
 		}
 	    }	
 	}
