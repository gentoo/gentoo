Index: printing/backend/print_backend.h
diff --git a/printing/backend/print_backend.h b/printing/backend/print_backend.h
index e03ef42e37cf0785ba735f4a241310f70125a6e7..a8123325a613f527ba4e91a412ba09cd3225c8ec 100644
--- a/printing/backend/print_backend.h
+++ b/printing/backend/print_backend.h
@@ -111,7 +111,6 @@ class PRINTING_EXPORT PrintBackend
 
   // Allocate a print backend. If |print_backend_settings| is NULL, default
   // settings will be used.
-  // Return NULL if no print backend available.
   static scoped_refptr<PrintBackend> CreateInstance(
       const base::DictionaryValue* print_backend_settings);
 
Index: printing/backend/print_backend_dummy.cc
diff --git a/printing/backend/print_backend_dummy.cc b/printing/backend/print_backend_dummy.cc
index c73e5370720eda7a2f989401f37dc62c5e438e24..db269a75920d3c44381c87d67b91d923f0bfd8dc 100644
--- a/printing/backend/print_backend_dummy.cc
+++ b/printing/backend/print_backend_dummy.cc
@@ -13,10 +13,49 @@
 
 namespace printing {
 
+class DummyPrintBackend : public PrintBackend {
+ public:
+  DummyPrintBackend() {
+  }
+
+  bool EnumeratePrinters(PrinterList* printer_list) override {
+    return false;
+  }
+
+  std::string GetDefaultPrinterName() override {
+    return std::string();
+  }
+
+  bool GetPrinterSemanticCapsAndDefaults(
+      const std::string& printer_name,
+      PrinterSemanticCapsAndDefaults* printer_info) override {
+    return false;
+  }
+
+  bool GetPrinterCapsAndDefaults(
+      const std::string& printer_name,
+      PrinterCapsAndDefaults* printer_info) override {
+    return false;
+  }
+
+  std::string GetPrinterDriverInfo(
+      const std::string& printer_name) override {
+    return std::string();
+  }
+
+  bool IsValidPrinter(const std::string& printer_name) override {
+    return false;
+  }
+
+ private:
+  ~DummyPrintBackend() {}
+
+  DISALLOW_COPY_AND_ASSIGN(DummyPrintBackend);
+};
+
 scoped_refptr<PrintBackend> PrintBackend::CreateInstance(
     const base::DictionaryValue* print_backend_settings) {
-  NOTREACHED();
-  return NULL;
+  return new DummyPrintBackend();
 }
 
 }  // namespace printing
