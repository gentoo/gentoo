From bf7e95285e8df1bc3b86085791de7cf94c2f544f Mon Sep 17 00:00:00 2001
From: Luca <luca@ant.local>
Date: Tue, 10 Apr 2012 16:39:57 +0200
Subject: [PATCH] + patches from Vincent Untz

Conflicts:

	CONTRIBUTORS
---
 mathmlps/main.cc                               |    7 +++++++
 mathmlsvg/SMS.cc                               |    1 +
 mathmlsvg/main.cc                              |    7 +++++++
 src/frontend/common/TemplateBuilder.hh         |    7 ++++---
 src/frontend/common/TemplateElementIterator.hh |    2 +-
 5 files changed, 20 insertions(+), 4 deletions(-)

diff --git a/mathmlps/main.cc b/mathmlps/main.cc
index 48339af..6de113c 100644
--- a/mathmlps/main.cc
+++ b/mathmlps/main.cc
@@ -21,6 +21,13 @@
 #include <cassert>
 #include <cstring>
 #include <fstream>
+#ifdef __linux__
+/* to get getopt on Linux */
+#ifndef __USE_POSIX2
+#define __USE_POSIX2
+#endif
+#endif
+#include <unistd.h>
 
 #include <popt.h>
 
diff --git a/mathmlsvg/SMS.cc b/mathmlsvg/SMS.cc
index be7add8..f4b0ddc 100644
--- a/mathmlsvg/SMS.cc
+++ b/mathmlsvg/SMS.cc
@@ -704,6 +704,7 @@ SMS::fun_depart(const HandlerArgs& args) const
   if (asLocation(args[0], loc1) && asLocation(args[1], loc2))
   // delete "return 0" and insert here the code
     return 0;
+  return 0;
 }
 
 SmartPtr<Value>
diff --git a/mathmlsvg/main.cc b/mathmlsvg/main.cc
index c49e8ac..42e7895 100644
--- a/mathmlsvg/main.cc
+++ b/mathmlsvg/main.cc
@@ -21,6 +21,13 @@
 #include <cassert>
 #include <cstring>
 #include <fstream>
+#ifdef __linux__
+/* to get getopt on Linux */
+#ifndef __USE_POSIX2
+#define __USE_POSIX2
+#endif
+#endif
+#include <unistd.h>
 
 #include <popt.h>
 
diff --git a/src/frontend/common/TemplateBuilder.hh b/src/frontend/common/TemplateBuilder.hh
index f5c8341..2b9a1ac 100644
--- a/src/frontend/common/TemplateBuilder.hh
+++ b/src/frontend/common/TemplateBuilder.hh
@@ -47,12 +47,13 @@ protected:
   SmartPtr<typename ElementBuilder::type>
   getElement(const typename Model::Element& el) const
   {
-    if (SmartPtr<typename ElementBuilder::type> elem = smart_cast<typename ElementBuilder::type>(linkerAssoc(el)))
+    SmartPtr<typename ElementBuilder::type> elem;
+    if (elem = smart_cast<typename ElementBuilder::type>(this->linkerAssoc(el)))
       return elem;
     else
       {
-	SmartPtr<typename ElementBuilder::type> elem = ElementBuilder::type::create(ElementBuilder::getContext(*this));
-	linkerAdd(el, elem);
+	elem = ElementBuilder::type::create(ElementBuilder::getContext(*this));
+	this->linkerAdd(el, elem);
 	return elem;
       }
   }
diff --git a/src/frontend/common/TemplateElementIterator.hh b/src/frontend/common/TemplateElementIterator.hh
index 5366040..25b5fef 100644
--- a/src/frontend/common/TemplateElementIterator.hh
+++ b/src/frontend/common/TemplateElementIterator.hh
@@ -43,7 +43,7 @@ protected:
   findValidNodeForward(const typename Model::Node& p0) const
   {
     for (typename Model::Node p = p0; p; p = Model::getNextSibling(p))
-      if (valid(p)) return Model::asElement(p);
+      if (this->valid(p)) return Model::asElement(p);
     return typename Model::Element();
   }
     
-- 
1.7.8.6

