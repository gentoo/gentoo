From: Sam James <sam@gentoo.org>
Date: Sat, 6 Nov 2021 00:34:22 +0000
Subject: [PATCH] Revert doc changes from mpfr-4.1.0-patch10

We don't want to invoke	texinfo	via maintainer-mode because
of some	(somewhat minor) changes to the	manual from patch10.

See: https://archives.gentoo.org/gentoo-releng-autobuilds/message/c2dd39fc4ebc849db6bb0f551739e2ed
Signed-off-by: Sam James <sam@gentoo.org>
---
 doc/mpfr.info | 46 +++++++++++++++++++++-------------------------
 doc/mpfr.texi |  6 ------
 2 files changed, 21 insertions(+), 31 deletions(-)

diff --git a/doc/mpfr.info b/doc/mpfr.info
index 062c0c4..264896d 100644
--- a/doc/mpfr.info
+++ b/doc/mpfr.info
@@ -3217,11 +3217,7 @@ destroying, garbaging) is left to the application.
 
    Each function in this interface is also implemented as a macro for
 efficiency reasons: for example ‘mpfr_custom_init (s, p)’ uses the
-macro, while ‘(mpfr_custom_init) (s, p)’ uses the function.  Note that
-the macro may evaluate arguments multiple times (or none).  Moreover,
-macros implementing functions with the ‘void’ return type may not be
-used in contexts where an expression is expected, e.g., inside
-‘for(...)’ or before a comma operator.
+macro, while ‘(mpfr_custom_init) (s, p)’ uses the function.
 
    Note 1: MPFR functions may still initialize temporary floating-point
 numbers using ‘mpfr_init’ and similar functions.  See Custom Allocation
@@ -4583,13 +4579,13 @@ Function and Type Index
                                                               (line 115)
 * mpfr_csch:                             Transcendental Functions.
                                                               (line 180)
-* mpfr_custom_get_exp:                   Custom Interface.    (line  80)
-* mpfr_custom_get_kind:                  Custom Interface.    (line  70)
-* mpfr_custom_get_significand:           Custom Interface.    (line  75)
-* mpfr_custom_get_size:                  Custom Interface.    (line  41)
-* mpfr_custom_init:                      Custom Interface.    (line  45)
-* mpfr_custom_init_set:                  Custom Interface.    (line  52)
-* mpfr_custom_move:                      Custom Interface.    (line  89)
+* mpfr_custom_get_exp:                   Custom Interface.    (line  76)
+* mpfr_custom_get_kind:                  Custom Interface.    (line  66)
+* mpfr_custom_get_significand:           Custom Interface.    (line  71)
+* mpfr_custom_get_size:                  Custom Interface.    (line  37)
+* mpfr_custom_init:                      Custom Interface.    (line  41)
+* mpfr_custom_init_set:                  Custom Interface.    (line  48)
+* mpfr_custom_move:                      Custom Interface.    (line  85)
 * MPFR_DECL_INIT:                        Initialization Functions.
                                                               (line  77)
 * mpfr_digamma:                          Transcendental Functions.
@@ -5169,19 +5165,19 @@ Node: Exception Related Functions145661
 Node: Memory Handling Functions155904
 Node: Compatibility with MPF157792
 Node: Custom Interface160961
-Node: Internals165852
-Node: API Compatibility167396
-Node: Type and Macro Changes169344
-Node: Added Functions172527
-Node: Changed Functions177334
-Node: Removed Functions184693
-Node: Other Changes185423
-Node: MPFR and the IEEE 754 Standard187124
-Node: Contributors189741
-Node: References192880
-Node: GNU Free Documentation License194761
-Node: Concept Index217355
-Node: Function and Type Index223428
+Node: Internals165592
+Node: API Compatibility167136
+Node: Type and Macro Changes169084
+Node: Added Functions172267
+Node: Changed Functions177074
+Node: Removed Functions184433
+Node: Other Changes185163
+Node: MPFR and the IEEE 754 Standard186864
+Node: Contributors189481
+Node: References192620
+Node: GNU Free Documentation License194501
+Node: Concept Index217095
+Node: Function and Type Index223168
 
 End Tag Table
 
diff --git a/doc/mpfr.texi b/doc/mpfr.texi
index b26555a..54b6aa8 100644
--- a/doc/mpfr.texi
+++ b/doc/mpfr.texi
@@ -3817,12 +3817,6 @@ to the application.
 Each function in this interface is also implemented as a macro for
 efficiency reasons: for example @code{mpfr_custom_init (s, p)}
 uses the macro, while @code{(mpfr_custom_init) (s, p)} uses the function.
-Note that the macro may evaluate arguments multiple times (or none).
-Moreover, macros implementing functions with the @code{void} return type
-may not be used in contexts where an expression is expected, e.g., inside
-@code{for(...)} or before a comma operator.
-@c These limitations with macros cannot be avoided in a C90 compatible way.
-@c In the future, inline functions could be used.
 
 Note 1: MPFR functions may still initialize temporary floating-point numbers
 using @code{mpfr_init} and similar functions. See Custom Allocation (GNU MP)@.
-- 
2.33.1

