diff --git a/CMakeLists.txt b/CMakeLists.txt
index 63df360..00db314 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -21,6 +21,8 @@ endif()
 
 project(OpenCL-ROCm)
 
+include (GNUInstallDirs)
+
 # Add path for custom modules
 set(CMAKE_MODULE_PATH
   ${CMAKE_MODULE_PATH}
@@ -38,38 +40,28 @@ set(CLANG_ENABLE_STATIC_ANALYZER OFF CACHE BOOL "")
 # override default option value in library and driver
 set(GENERIC_IS_ZERO ON CACHE BOOL ON FORCE)
 
-add_subdirectory(compiler/llvm EXCLUDE_FROM_ALL)
-
-find_package(LLVM REQUIRED CONFIG PATHS ${CMAKE_BINARY_DIR}/compiler/llvm NO_DEFAULT_PATH)
+find_package(LLVM REQUIRED CONFIG PATHS ${LLVM_DIR} "/opt/rocm/llvm" NO_DEFAULT_PATH)
 
 list(APPEND CMAKE_MODULE_PATH "${LLVM_CMAKE_DIR}")
 include(AddLLVM)
 
 add_definitions(${LLVM_DEFINITIONS})
-# TODO: add find_package for Clang and lld, and also use LLVM/Clang variables got from their config
-include_directories(${CMAKE_SOURCE_DIR}/compiler/llvm/tools/clang/include)
-include_directories(${CMAKE_BINARY_DIR}/compiler/llvm/tools/clang/include)
-include_directories(${CMAKE_SOURCE_DIR}/compiler/llvm/tools/lld/include)
-
-# TODO: move AMDGPU.h header to include folder
-include_directories(${CMAKE_SOURCE_DIR}/compiler/llvm/lib/Target/AMDGPU)
-include_directories(${CMAKE_BINARY_DIR}/compiler/llvm/lib/Target/AMDGPU)
-
-if(${USE_COMGR_LIBRARY} MATCHES "yes")
-  set(COMGR_DYN_DLL "yes")
-  add_definitions(-DCOMGR_DYN_DLL="yes")
-  include_directories(${CMAKE_SOURCE_DIR}/compiler/llvm/include)
-  add_definitions(-DUSE_COMGR_LIBRARY)
-else()
-  add_subdirectory(compiler/driver EXCLUDE_FROM_ALL)
-endif()
+set(USE_COMGR_LIBRARY "yes")
+find_package(amd_comgr REQUIRED CONFIG)
+add_definitions(-DUSE_COMGR_LIBRARY)
+FOREACH(DIR ${LLVM_INCLUDE_DIRS})
+  include_directories("${DIR}")
+  include_directories("${DIR}/clang")
+  include_directories("${DIR}/lld")
+  # TODO: move AMDGPU.h header to include folder
+  include_directories("${DIR}/llvm/Target/AMDGPU")
+ENDFOREACH()
 
 set(BUILD_HC_LIB OFF CACHE BOOL "")
 set(ROCM_DEVICELIB_INCLUDE_TESTS OFF CACHE BOOL "")
 set(AMDGCN_TARGETS_LIB_LIST "AMDGCN_LIB_TARGETS")
 set(AMDGCN_TARGETS_LIB_DEPS "AMDGCN_DEP_TARGETS")
 set(AMDGPU_TARGET_TRIPLE "amdgcn-amd-amdhsa")
-add_subdirectory(library/amdgcn EXCLUDE_FROM_ALL)
 
 add_subdirectory(compiler/lib/loaders/elf/utils/libelf)
 
@@ -82,28 +74,6 @@ set(OPENCL_INCLUDE_DIRS
   ${CMAKE_SOURCE_DIR}/api/opencl/khronos/headers/opencl2.2)
 
 add_subdirectory(api/opencl/amdocl)
-add_subdirectory(api/opencl/khronos/icd)
-
-add_subdirectory(tools/clinfo)
-
-install(PROGRAMS $<TARGET_FILE:clang> $<TARGET_FILE:lld>
-        DESTINATION bin/x86_64
-        COMPONENT libraries)
-
-install(PROGRAMS $<TARGET_FILE:OpenCL>
-        DESTINATION lib/x86_64
-        COMPONENT applications)
-
-install(PROGRAMS $<TARGET_LINKER_FILE:OpenCL>
-        DESTINATION lib/x86_64
-        COMPONENT libraries)
-
-install(DIRECTORY
-        "${CMAKE_CURRENT_SOURCE_DIR}/api/opencl/khronos/headers/opencl2.2/CL"
-        DESTINATION include
-        COMPONENT libraries
-        USE_SOURCE_PERMISSIONS
-        PATTERN cl_egl.h EXCLUDE)
 
 foreach(AMDGCN_LIB_TARGET ${AMDGCN_LIB_TARGETS})
   get_target_property(lib_file_name ${AMDGCN_LIB_TARGET} ARCHIVE_OUTPUT_NAME)
diff --git a/README.md b/README.md
index a834965..e319be2 100644
--- a/README.md
+++ b/README.md
@@ -7,13 +7,6 @@ Developer preview Version 2 of the new
 * Supports offline ahead of time compilation today; during the Beta phase we will add in-process/in-memory compilation.
 
 
-## GETTING REPO
-
-Repo is a git wrapper that manages a collection of git repositories. Install this tool and add it to the command search PATH:
-
-    curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
-    chmod a+x ~/bin/repo
-
 ## GETTING THE SOURCE CODE
 
 Main OpenCL™ Compatible Components:
@@ -26,11 +19,6 @@ Main OpenCL™ Compatible Components:
 * https://github.com/RadeonOpenCompute/lld 
 * https://github.com/KhronosGroup/OpenCL-ICD-Loader
 
-Download the git projects with the following commands:
-
-    ~/bin/repo init -u https://github.com/RadeonOpenCompute/ROCm-OpenCL-Runtime.git -b master -m opencl.xml
-    ~/bin/repo sync
-    
 ## INSTALL ROCm
 
 Follow the instructions at https://rocm.github.io/install.html to install ROCm.
@@ -45,6 +33,11 @@ Copy the amdocl64.icd file to /etc/OpenCL/vendors
 
 To install additional dependencies:
 
+* ROCm-OpenCL-Runtime
+* ROCm-OpenCL-Driver
+* ROC versions of LLVM, Clang, and lld
+* ROCm-Device-Libs
+* OpenCL-ICD-Loader
 * OCaml
 * findlib
 * A Python 2 environment or active virtualenv with the Microsoft Z3 package
diff --git a/api/opencl/amdocl/CMakeLists.txt b/api/opencl/amdocl/CMakeLists.txt
index 642ce8c..993ffeb 100644
--- a/api/opencl/amdocl/CMakeLists.txt
+++ b/api/opencl/amdocl/CMakeLists.txt
@@ -22,7 +22,7 @@ include_directories(${CMAKE_SOURCE_DIR}/api/opencl/khronos)
 include_directories(${CMAKE_SOURCE_DIR}/api/opencl/khronos/headers)
 include_directories(${CMAKE_SOURCE_DIR}/api/opencl/khronos/headers/opencl2.2)
 if(${USE_COMGR_LIBRARY} MATCHES "yes")
-  add_definitions(-DUSE_COMGR_LIBRARY -DCOMGR_DYN_DLL)
+  add_definitions(-DUSE_COMGR_LIBRARY)
   find_package(amd_comgr REQUIRED CONFIG)
   include_directories("$<TARGET_PROPERTY:amd_comgr,INTERFACE_INCLUDE_DIRECTORIES>")
 else()
@@ -73,8 +73,12 @@ add_library(amdocl64 SHARED
   ${ADDITIONAL_LIBRARIES}
 )
 if(${USE_COMGR_LIBRARY} MATCHES "yes")
-  target_link_libraries(amdocl64 oclelf pthread dl ${ROCT_LIBRARIES} ${ROCR_LIBRARIES})
+  target_link_libraries(amdocl64 oclelf pthread dl ${ROCT_LIBRARIES} ${ROCR_LIBRARIES} amd_comgr LLVMBitWriter LLVMIRReader LLVMLinker LLVMMCParser)
 else()
-  target_link_libraries(amdocl64 opencl_driver oclelf pthread dl ${ROCT_LIBRARIES} ${ROCR_LIBRARIES})
+  target_link_libraries(amdocl64 opencl_driver oclelf pthread dl ${ROCT_LIBRARIES} ${ROCR_LIBRARIES} LLVMBitWriter LLVMIRReader LLVMLinker LLVMMCParser)
 endif()
-install(TARGETS amdocl64 LIBRARY DESTINATION lib/x86_64 COMPONENT applications)
+
+install(TARGETS amdocl64 LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT applications)
+
+file(GENERATE OUTPUT "${CMAKE_BINARY_DIR}/amdocl64.icd" CONTENT "$<TARGET_FILE_NAME:amdocl64>")
+install(FILES "${CMAKE_BINARY_DIR}/amdocl64.icd" DESTINATION "${CMAKE_INSTALL_FULL_SYSCONFDIR}/OpenCL/vendors/")
diff --git a/api/opencl/amdocl/cl_execute.cpp b/api/opencl/amdocl/cl_execute.cpp
index 0336353..ee799e6 100644
--- a/api/opencl/amdocl/cl_execute.cpp
+++ b/api/opencl/amdocl/cl_execute.cpp
@@ -10,7 +10,7 @@
 #include "platform/program.hpp"
 #include "os/os.hpp"
 
-#include <icd/icd_dispatch.h>
+#include <icd/loader/icd_dispatch.h>
 
 /*! \addtogroup API
  *  @{
diff --git a/api/opencl/amdocl/cl_icd.cpp b/api/opencl/amdocl/cl_icd.cpp
index 71b886c..7e4e317 100644
--- a/api/opencl/amdocl/cl_icd.cpp
+++ b/api/opencl/amdocl/cl_icd.cpp
@@ -10,7 +10,7 @@
 #include "cl_d3d11_amd.hpp"
 #endif  //_WIN32
 
-#include <icd/icd_dispatch.h>
+#include <icd/loader/icd_dispatch.h>
 
 #include <mutex>
 
diff --git a/opencl.xml b/opencl.xml
deleted file mode 100644
index 325dab3..0000000
--- a/opencl.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<manifest>
-  <remote name="RadeonOpenCompute" fetch="https://github.com/RadeonOpenCompute/"/>
-  <remote name="KhronosGroup" fetch="https://github.com/KhronosGroup/"/>
-
-  <default remote="RadeonOpenCompute" revision="refs/tags/roc-2.7.0" sync-c="true" sync-j="4"/>
-
-  <project path="opencl" name="ROCm-OpenCL-Runtime"/>
-  <project path="opencl/compiler/driver" name="ROCm-OpenCL-Driver"/>
-  <project path="opencl/compiler/llvm" name="llvm" revision="refs/tags/roc-ocl-2.7.0"/>
-  <project path="opencl/compiler/llvm/tools/clang" name="clang"/>
-  <project path="opencl/compiler/llvm/tools/lld" name="lld" revision="refs/tags/roc-ocl-2.7.0"/>
-
-  <project path="opencl/library/amdgcn" name="ROCm-Device-Libs" revision="refs/tags/roc-ocl-2.7.0"/>
-
-  <project path="opencl/api/opencl/khronos/icd" name="OpenCL-ICD-Loader" remote="KhronosGroup" revision="7433f2acbf5bbc400f26494ff1dc895da6265bef"/>
-</manifest>
diff --git a/runtime/CMakeLists.txt b/runtime/CMakeLists.txt
index 0a55cf5..7c56be3 100644
--- a/runtime/CMakeLists.txt
+++ b/runtime/CMakeLists.txt
@@ -14,8 +14,6 @@ include_directories(${CMAKE_SOURCE_DIR}/api/opencl)
 include_directories(${CMAKE_SOURCE_DIR}/api/opencl/khronos)
 include_directories(${CMAKE_SOURCE_DIR}/api/opencl/khronos/headers)
 include_directories(${CMAKE_SOURCE_DIR}/api/opencl/khronos/headers/opencl2.2)
-include_directories(${CMAKE_SOURCE_DIR}/compiler/llvm/include)
-include_directories(${CMAKE_SOURCE_DIR}/compiler/driver/src)
 include_directories(${CMAKE_SOURCE_DIR}/compiler/lib)
 include_directories(${CMAKE_SOURCE_DIR}/compiler/lib/include)
 include_directories(${CMAKE_SOURCE_DIR}/compiler/lib/backends/common)
@@ -43,6 +41,7 @@ add_library(oclruntime OBJECT
   utils/flags.cpp
   utils/debug.cpp
   device/appprofile.cpp
+  device/comgrctx.cpp
   device/device.cpp
   device/hwdebug.cpp
   device/blitcl.cpp
@@ -71,6 +70,8 @@ add_library(oclruntime OBJECT
   ${COMGR_CPP}
 )
 set_target_properties(oclruntime PROPERTIES POSITION_INDEPENDENT_CODE ON)
+add_dependencies(oclruntime opencl1.2-c.amdgcn.inc_target)
+add_dependencies(oclruntime opencl2.0-c.amdgcn.inc_target)
 
 set(AMDGCN_DEP_LIST)
 if(AMDGCN_TARGETS_LIB_DEPS)
diff --git a/runtime/device/device.hpp b/runtime/device/device.hpp
index 9eb45b2..a721463 100644
--- a/runtime/device/device.hpp
+++ b/runtime/device/device.hpp
@@ -21,7 +21,7 @@
 
 #if defined(WITH_LIGHTNING_COMPILER) && !defined(USE_COMGR_LIBRARY)
 #include "caching/cache.hpp"
-#include "driver/AmdCompiler.h"
+#include "AmdCompiler.h"
 #endif  // defined(WITH_LIGHTNING_COMPILER) && ! defined(USE_COMGR_LIBRARY)
 #include "acl.h"
 
diff --git a/runtime/device/devprogram.cpp b/runtime/device/devprogram.cpp
index c797f98..cfbfe74 100644
--- a/runtime/device/devprogram.cpp
+++ b/runtime/device/devprogram.cpp
@@ -14,7 +14,7 @@
 
 #if defined(WITH_LIGHTNING_COMPILER) || defined(USE_COMGR_LIBRARY)
 #ifndef USE_COMGR_LIBRARY
-#include "driver/AmdCompiler.h"
+#include "AmdCompiler.h"
 #include "libraries.amdgcn.inc"
 #include "opencl1.2-c.amdgcn.inc"
 #include "opencl2.0-c.amdgcn.inc"
@@ -706,7 +706,7 @@ bool Program::compileImplLC(const std::string& sourceCode,
   driverOptions.push_back("-amdgpu-prelink");
 
   if (device().settings().lcWavefrontSize64_) {
-     driverOptions.append(" -mwavefrontsize64");
+     driverOptions.push_back("-mwavefrontsize64");
   }
 
   // Iterate through each source code and dump it into tmp
@@ -1547,7 +1547,7 @@ bool Program::linkImplLC(amd::option::Options* options) {
 #endif
 
   if (device().settings().lcWavefrontSize64_) {
-     codegenOptions.append(" -mwavefrontsize64");
+     codegenOptions.push_back("-mwavefrontsize64");
   }
 
   // NOTE: The params is also used to identy cached code object. This parameter
diff --git a/runtime/device/devprogram.hpp b/runtime/device/devprogram.hpp
index 68de7ba..8b91ba2 100644
--- a/runtime/device/devprogram.hpp
+++ b/runtime/device/devprogram.hpp
@@ -11,7 +11,7 @@
 
 #if defined(WITH_LIGHTNING_COMPILER) || defined(USE_COMGR_LIBRARY)
 #ifndef USE_COMGR_LIBRARY
-#include "driver/AmdCompiler.h"
+#include "AmdCompiler.h"
 #else
 #include "amd_comgr.h"
 #endif
diff --git a/runtime/device/rocm/CMakeLists.txt b/runtime/device/rocm/CMakeLists.txt
index 7dce5b9..3e64054 100644
--- a/runtime/device/rocm/CMakeLists.txt
+++ b/runtime/device/rocm/CMakeLists.txt
@@ -1,3 +1,21 @@
+find_package(Clang REQUIRED CONFIG)
+
+# FIXME: CLANG_CMAKE_DIR seems like the most stable way to find this, but
+# really there is no way to reliably discover this header.
+#
+# We effectively back up to the Clang output directory (for the case of a build
+# tree) or install prefix (for the case of an installed copy), and then search
+# for a file named opencl-c.h anywhere below that. We take the first result in
+# the case where there are multiple (e.g. if there is an installed copy nested
+# in a build directory). This is a bit imprecise, but it covers cases like MSVC
+# adding some additional configuration-specific subdirectories to the build
+# tree but not to an installed copy.
+file(GLOB_RECURSE OPENCL_C_H_LIST "${CLANG_CMAKE_DIR}/../../../*/opencl-c.h")
+list(GET OPENCL_C_H_LIST 0 OPENCL_C_H)
+if (NOT EXISTS "${OPENCL_C_H}" OR IS_DIRECTORY "${OPENCL_C_H}")
+  message(FATAL_ERROR "Unable to locate opencl-c.h from the supplied Clang. The path '${CLANG_CMAKE_DIR}/../../../*' was searched.")
+endif()
+
 include(bc2h)
 
 set(INC_SUFFIX "amdgcn.inc")
@@ -80,8 +98,8 @@ endforeach()
 
 # generating opencl*.inc files
 add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/opencl1.2-c.amdgcn.pch
-  COMMAND clang -cc1 -x cl-header -triple amdgcn-amd-amdhsa -Werror -O3 -DNDEBUG -cl-std=CL1.2 -emit-pch -o ${CMAKE_CURRENT_BINARY_DIR}/opencl1.2-c.amdgcn.pch < ${CMAKE_SOURCE_DIR}/compiler/llvm/tools/clang/lib/Headers/opencl-c.h
-  DEPENDS clang ${CMAKE_SOURCE_DIR}/compiler/llvm/tools/clang/lib/Headers/opencl-c.h
+  COMMAND clang -cc1 -x cl-header -triple amdgcn-amd-amdhsa -Werror -O3 -DNDEBUG -cl-std=CL1.2 -emit-pch -o ${CMAKE_CURRENT_BINARY_DIR}/opencl1.2-c.amdgcn.pch < ${OPENCL_C_H}
+  DEPENDS clang ${OPENCL_C_H}
   COMMENT "Generating opencl1.2-c.amdgcn.pch"
 )
 add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/opencl1.2-c.amdgcn.inc
@@ -94,8 +112,8 @@ add_custom_target(opencl1.2-c.amdgcn.inc_target ALL DEPENDS ${CMAKE_CURRENT_BINA
 add_dependencies(oclrocm opencl1.2-c.amdgcn.inc_target)
 
 add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/opencl2.0-c.amdgcn.pch
-  COMMAND clang -cc1 -x cl-header -triple amdgcn-amd-amdhsa -Werror -O3 -DNDEBUG -cl-std=CL2.0 -emit-pch -o ${CMAKE_CURRENT_BINARY_DIR}/opencl2.0-c.amdgcn.pch < ${CMAKE_SOURCE_DIR}/compiler/llvm/tools/clang/lib/Headers/opencl-c.h
-  DEPENDS clang ${CMAKE_SOURCE_DIR}/compiler/llvm/tools/clang/lib/Headers/opencl-c.h
+  COMMAND clang -cc1 -x cl-header -triple amdgcn-amd-amdhsa -Werror -O3 -DNDEBUG -cl-std=CL2.0 -emit-pch -o ${CMAKE_CURRENT_BINARY_DIR}/opencl2.0-c.amdgcn.pch < ${OPENCL_C_H}
+  DEPENDS clang ${OPENCL_C_H}
   COMMENT "Generating opencl2.0-c.amdgcn.pch"
 )
 add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/opencl2.0-c.amdgcn.inc
diff --git a/runtime/device/rocm/rocdevice.cpp b/runtime/device/rocm/rocdevice.cpp
index 4cba9d7..7ab30ed 100644
--- a/runtime/device/rocm/rocdevice.cpp
+++ b/runtime/device/rocm/rocdevice.cpp
@@ -20,7 +20,7 @@
 #include "device/rocm/rocvirtual.hpp"
 #include "device/rocm/rocprogram.hpp"
 #if defined(WITH_LIGHTNING_COMPILER) && ! defined(USE_COMGR_LIBRARY)
-#include "driver/AmdCompiler.h"
+#include "AmdCompiler.h"
 #endif  // defined(WITH_LIGHTNING_COMPILER) && ! defined(USE_COMGR_LIBRARY)
 #include "device/rocm/rocmemory.hpp"
 #include "device/rocm/rocglinterop.hpp"
diff --git a/runtime/device/rocm/rockernel.cpp b/runtime/device/rocm/rockernel.cpp
index 8a28acc..7d5b62d 100644
--- a/runtime/device/rocm/rockernel.cpp
+++ b/runtime/device/rocm/rockernel.cpp
@@ -11,7 +11,7 @@
 
 #if defined(WITH_LIGHTNING_COMPILER) || defined(USE_COMGR_LIBRARY)
 #ifndef USE_COMGR_LIBRARY
-#include "driver/AmdCompiler.h"
+#include "AmdCompiler.h"
 #endif
 #include "llvm/Support/AMDGPUMetadata.h"
 
diff --git a/runtime/device/rocm/rocprogram.cpp b/runtime/device/rocm/rocprogram.cpp
index 191e58c..58d82e6 100644
--- a/runtime/device/rocm/rocprogram.cpp
+++ b/runtime/device/rocm/rocprogram.cpp
@@ -11,7 +11,7 @@
 #include <gelf.h>
 #include "libraries.amdgcn.inc"
 #ifndef USE_COMGR_LIBRARY
-#include "driver/AmdCompiler.h"
+#include "AmdCompiler.h"
 #endif
 #endif  // defined(WITH_LIGHTNING_COMPILER) || defined(USE_COMGR_LIBRARY)
 
diff --git a/runtime/platform/object.hpp b/runtime/platform/object.hpp
index 8ab1b68..b33a9e3 100644
--- a/runtime/platform/object.hpp
+++ b/runtime/platform/object.hpp
@@ -9,7 +9,7 @@
 #include "os/alloc.hpp"
 #include "thread/monitor.hpp"
 #include "utils/util.hpp"
-#include <icd/icd_dispatch.h>
+#include <icd/loader/icd_dispatch.h>
 
 
 #define KHR_CL_TYPES_DO(F)                                                                         \
