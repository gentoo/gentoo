amd64 does not like int pointers

diff -ruN v_1_0.orig/src/ldp-in/ldv1000.cpp v_1_0/src/ldp-in/ldv1000.cpp
--- a/ldp-in/ldv1000.cpp	2008-01-29 18:04:34.000000000 +0100
+++ b/ldp-in/ldv1000.cpp	2008-09-19 14:29:40.000000000 +0200
@@ -607,9 +607,9 @@
 
 void ldv1000_event_callback(void *eventType)
 {
-	g_ldv1000_last_event = (unsigned int) eventType;
+	g_ldv1000_last_event = (unsigned long) eventType;
 
-	switch ((unsigned int) eventType)
+	switch ((unsigned long) eventType)
 	{
 	case LDV1000_EVENT_VSYNC_END:
 #ifdef DEBUG
diff -ruN v_1_0.orig/src/vldp2/libvo/video_out_null.c v_1_0/src/vldp2/libvo/video_out_null.c
--- a/vldp2/libvo/video_out_null.c	2008-01-29 18:04:43.000000000 +0100
+++ b/vldp2/libvo/video_out_null.c	2008-09-19 14:30:03.000000000 +0200
@@ -82,7 +82,7 @@
 				// this is the potentially expensive callback that gets the hardware overlay
 				// ready to be displayed, so we do this before we sleep
 				// NOTE : if this callback fails, we don't want to display the frame due to double buffering considerations
-				if (g_in_info->prepare_frame(&g_yuv_buf[(int) id]))
+				if (g_in_info->prepare_frame(&g_yuv_buf[(long) id]))
 				{
 #ifndef VLDP_BENCHMARK
 				
@@ -133,7 +133,7 @@
 #endif
 						// draw the frame
 						// we are using the pointer 'id' as an index, kind of risky, but convenient :)
-						g_in_info->display_frame(&g_yuv_buf[(int) id]);
+						g_in_info->display_frame(&g_yuv_buf[(long) id]);
 #ifndef VLDP_BENCHMARK
 					} // end if we didn't get a new command to interrupt the frame being displayed
 #endif
@@ -272,7 +272,7 @@
 			    uint8_t ** buf, void ** id)
 {
 	static buffer_index = 0;
-	*id = (int *) buffer_index;	// THIS IS A LITTLE TRICKY
+	*id = (long *) buffer_index;	// THIS IS A LITTLE TRICKY
 	// We are setting an integer value to a pointer ...
 	// Because it is convenient to let the pointer hold the value of this integer for us
 	// Hopefully it doesn't cause any trouble later ;)
