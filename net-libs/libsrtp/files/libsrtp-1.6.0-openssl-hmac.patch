Backport of https://github.com/cisco/libsrtp/commit/5781341d99cd286a1f3d164e0576c2e837a444b7

--- a/crypto/hash/hmac_ossl.c	2017-08-01 11:57:38 UTC
+++ b/crypto/hash/hmac_ossl.c
@@ -46,11 +46,12 @@
     #include <config.h>
 #endif
 
-#include "hmac.h"
+#include "auth.h"
 #include "alloc.h"
 #include <openssl/evp.h>
+#include <openssl/hmac.h>
 
-#define HMAC_KEYLEN_MAX		20
+#define SHA1_DIGEST_SIZE		20
 
 /* the debug module for authentiation */
 
@@ -65,26 +66,18 @@ hmac_alloc (auth_t **a, int key_len, int out_len)
 {
     extern auth_type_t hmac;
     uint8_t *pointer;
-    hmac_ctx_t *new_hmac_ctx;
+    HMAC_CTX *new_hmac_ctx;
 
     debug_print(mod_hmac, "allocating auth func with key length %d", key_len);
     debug_print(mod_hmac, "                          tag length %d", out_len);
 
-    /*
-     * check key length - note that we don't support keys larger
-     * than 20 bytes yet
-     */
-    if (key_len > HMAC_KEYLEN_MAX) {
-        return err_status_bad_param;
-    }
-
     /* check output length - should be less than 20 bytes */
-    if (out_len > HMAC_KEYLEN_MAX) {
+    if (out_len > SHA1_DIGEST_SIZE) {
         return err_status_bad_param;
     }
 
-    /* allocate memory for auth and hmac_ctx_t structures */
-    pointer = (uint8_t*)crypto_alloc(sizeof(hmac_ctx_t) + sizeof(auth_t));
+    /* allocate memory for auth and HMAC_CTX structures */
+    pointer = (uint8_t*)crypto_alloc(sizeof(HMAC_CTX) + sizeof(auth_t));
     if (pointer == NULL) {
         return err_status_alloc_fail;
     }
@@ -96,8 +89,8 @@ hmac_alloc (auth_t **a, int key_len, int out_len)
     (*a)->out_len = out_len;
     (*a)->key_len = key_len;
     (*a)->prefix_len = 0;
-    new_hmac_ctx = (hmac_ctx_t*)((*a)->state);
-    memset(new_hmac_ctx, 0, sizeof(hmac_ctx_t));
+    new_hmac_ctx = (HMAC_CTX*)((*a)->state);
+    HMAC_CTX_init(new_hmac_ctx);
 
     /* increment global count of all hmac uses */
     hmac.ref_count++;
@@ -109,19 +102,15 @@ err_status_t
 hmac_dealloc (auth_t *a)
 {
     extern auth_type_t hmac;
-    hmac_ctx_t *hmac_ctx;
+    HMAC_CTX *hmac_ctx;
 
-    hmac_ctx = (hmac_ctx_t*)a->state;
-    if (hmac_ctx->ctx_initialized) {
-        EVP_MD_CTX_cleanup(&hmac_ctx->ctx);
-    }
-    if (hmac_ctx->init_ctx_initialized) {
-        EVP_MD_CTX_cleanup(&hmac_ctx->init_ctx);
-    }
+    hmac_ctx = (HMAC_CTX*)a->state;
 
+    HMAC_CTX_cleanup(hmac_ctx);
+
     /* zeroize entire state*/
     octet_string_set_to_zero((uint8_t*)a,
-                             sizeof(hmac_ctx_t) + sizeof(auth_t));
+                             sizeof(HMAC_CTX) + sizeof(auth_t));
 
     /* free memory */
     crypto_free(a);
@@ -133,113 +122,65 @@ hmac_dealloc (auth_t *a)
 }
 
 err_status_t
-hmac_init (hmac_ctx_t *state, const uint8_t *key, int key_len)
+hmac_init (HMAC_CTX *state, const uint8_t *key, int key_len)
 {
-    int i;
-    uint8_t ipad[64];
+    if (HMAC_Init_ex(state, key, key_len, EVP_sha1(), NULL) == 0)
+        return err_status_auth_fail;
 
-    /*
-     * check key length - note that we don't support keys larger
-     * than 20 bytes yet
-     */
-    if (key_len > HMAC_KEYLEN_MAX) {
-        return err_status_bad_param;
-    }
-
-    /*
-     * set values of ipad and opad by exoring the key into the
-     * appropriate constant values
-     */
-    for (i = 0; i < key_len; i++) {
-        ipad[i] = key[i] ^ 0x36;
-        state->opad[i] = key[i] ^ 0x5c;
-    }
-    /* set the rest of ipad, opad to constant values */
-    for (; i < sizeof(ipad); i++) {
-        ipad[i] = 0x36;
-        ((uint8_t*)state->opad)[i] = 0x5c;
-    }
-
-    debug_print(mod_hmac, "ipad: %s", octet_string_hex_string(ipad, sizeof(ipad)));
-
-    /* initialize sha1 context */
-    sha1_init(&state->init_ctx);
-    state->init_ctx_initialized = 1;
-
-    /* hash ipad ^ key */
-    sha1_update(&state->init_ctx, ipad, sizeof(ipad));
-    return (hmac_start(state));
+    return err_status_ok;
 }
 
 err_status_t
-hmac_start (hmac_ctx_t *state)
+hmac_start (HMAC_CTX *state)
 {
-    if (state->ctx_initialized) {
-        EVP_MD_CTX_cleanup(&state->ctx);
-    }
-    if (!EVP_MD_CTX_copy(&state->ctx, &state->init_ctx)) {
+    if (HMAC_Init_ex(state, NULL, 0, NULL, NULL) == 0)
         return err_status_auth_fail;
-    } else {
-        state->ctx_initialized = 1;
-        return err_status_ok;
-    }
+
+    return err_status_ok;
 }
 
 err_status_t
-hmac_update (hmac_ctx_t *state, const uint8_t *message, int msg_octets)
+hmac_update (HMAC_CTX *state, const uint8_t *message, int msg_octets)
 {
     debug_print(mod_hmac, "input: %s",
                 octet_string_hex_string(message, msg_octets));
 
-    /* hash message into sha1 context */
-    sha1_update(&state->ctx, message, msg_octets);
+    if (HMAC_Update(state, message, msg_octets) == 0)
+        return err_status_auth_fail;
 
     return err_status_ok;
 }
 
 err_status_t
-hmac_compute (hmac_ctx_t *state, const void *message,
+hmac_compute (HMAC_CTX *state, const void *message,
               int msg_octets, int tag_len, uint8_t *result)
 {
-    uint32_t hash_value[5];
-    uint32_t H[5];
+    uint8_t hash_value[SHA1_DIGEST_SIZE];
     int i;
+    unsigned int len;
 
     /* check tag length, return error if we can't provide the value expected */
-    if (tag_len > HMAC_KEYLEN_MAX) {
+    if (tag_len > SHA1_DIGEST_SIZE) {
         return err_status_bad_param;
     }
 
     /* hash message, copy output into H */
-    sha1_update(&state->ctx, message, msg_octets);
-    sha1_final(&state->ctx, H);
+    if (HMAC_Update(state, message, msg_octets) == 0)
+        return err_status_auth_fail;
 
-    /*
-     * note that we don't need to debug_print() the input, since the
-     * function hmac_update() already did that for us
-     */
-    debug_print(mod_hmac, "intermediate state: %s",
-                octet_string_hex_string((uint8_t*)H, sizeof(H)));
+    if (HMAC_Final(state, hash_value, &len) == 0)
+        return err_status_auth_fail;
 
-    /* re-initialize hash context */
-    sha1_init(&state->ctx);
+    if (len < tag_len)
+        return err_status_auth_fail;
 
-    /* hash opad ^ key  */
-    sha1_update(&state->ctx, (uint8_t*)state->opad, sizeof(state->opad));
-
-    /* hash the result of the inner hash */
-    sha1_update(&state->ctx, (uint8_t*)H, sizeof(H));
-
-    /* the result is returned in the array hash_value[] */
-    sha1_final(&state->ctx, hash_value);
-
     /* copy hash_value to *result */
     for (i = 0; i < tag_len; i++) {
-        result[i] = ((uint8_t*)hash_value)[i];
+        result[i] = hash_value[i];
     }
 
     debug_print(mod_hmac, "output: %s",
-                octet_string_hex_string((uint8_t*)hash_value, tag_len));
+                octet_string_hex_string(hash_value, tag_len));
 
     return err_status_ok;
 }
@@ -248,7 +189,7 @@ hmac_compute (hmac_ctx_t *state, const void *message,
 /* begin test case 0 */
 
 uint8_t
-    hmac_test_case_0_key[HMAC_KEYLEN_MAX] = {
+    hmac_test_case_0_key[SHA1_DIGEST_SIZE] = {
     0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
     0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
     0x0b, 0x0b, 0x0b, 0x0b
@@ -260,7 +201,7 @@ uint8_t
 };
 
 uint8_t
-    hmac_test_case_0_tag[HMAC_KEYLEN_MAX] = {
+    hmac_test_case_0_tag[SHA1_DIGEST_SIZE] = {
     0xb6, 0x17, 0x31, 0x86, 0x55, 0x05, 0x72, 0x64,
     0xe2, 0x8b, 0xc0, 0xb6, 0xfb, 0x37, 0x8c, 0x8e,
     0xf1, 0x46, 0xbe, 0x00
--- a/crypto/include/hmac.h	2017-08-01 11:57:38 UTC
+++ b/crypto/include/hmac.h
@@ -53,10 +53,6 @@ typedef struct {
   uint8_t    opad[64];
   sha1_ctx_t ctx;
   sha1_ctx_t init_ctx;
-#ifdef OPENSSL
-  int ctx_initialized;
-  int init_ctx_initialized;
-#endif
 } hmac_ctx_t;
 
 err_status_t
