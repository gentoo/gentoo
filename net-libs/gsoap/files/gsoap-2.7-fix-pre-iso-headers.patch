--- gsoap/samples/factorytest/factorytest.cpp.orig	2009-03-04 01:16:22.300484305 +0100
+++ gsoap/samples/factorytest/factorytest.cpp	2009-03-04 01:15:47.656485143 +0100
@@ -49,7 +49,7 @@
 #include "soapH.h"
 #include "factorytest.nsmap"
 
-#include <iostream.h>
+#include <iostream>
 
 // default factory service endpoint:
 const char *factory = "http://localhost:18085";
@@ -167,7 +167,7 @@
 int main(int argc, char **argv)
 { if (argc > 1)
     factory = argv[1];			// use factory from command line arg by default
-  cout << "Connecting to factory " << factory << endl;
+  std::cout << "Connecting to factory " << factory << std::endl;
   Adder adder;				// create unique new remote adder object
   Counter counter1("myCounter");	// new counter object "myCounter" (created if not exists)
   Counter counter2("myCounter");	// lookup and use counter "myCounter" (this is an alias to counter1!)
@@ -175,22 +175,22 @@
   counter1.set(adder.get());
   adder.add(3.0);
   counter1.inc();
-  cout << "Adder=" << adder.get() << endl;
-  cout << "Counter=" << counter2.get() << endl;		// counter2 is an alias for counter1 so this prints the value of counter1
-  cout << "Sleep for 90 seconds to test factory server purging objects:" << endl;
+  std::cout << "Adder=" << adder.get() << std::endl;
+  std::cout << "Counter=" << counter2.get() << std::endl;		// counter2 is an alias for counter1 so this prints the value of counter1
+  std::cout << "Sleep for 90 seconds to test factory server purging objects:" << std::endl;
   // counter is periodically incremented which keeps it alive
   sleep(30);
   counter1.inc();
-  cout << "Counter=" << counter2.get() << endl;
+  std::cout << "Counter=" << counter2.get() << std::endl;
   sleep(30);
   counter1.inc();
-  cout << "Counter=" << counter2.get() << endl;
+  std::cout << "Counter=" << counter2.get() << std::endl;
   sleep(30);
   counter1.inc();
-  cout << "Counter=" << counter2.get() << endl;
+  std::cout << "Counter=" << counter2.get() << std::endl;
   // after 90 secs, the adder should be gone
-  cout << "Adder is no longer available:" << endl;
+  std::cout << "Adder is no longer available:" << std::endl;
   adder.add(3.0);
-  cout << "Adder status = " << adder.status << endl;
+  std::cout << "Adder status = " << adder.status << std::endl;
   return 0;
 }
--- gsoap/samples/lu/luclient.cpp.orig	2009-03-04 01:16:48.632483467 +0100
+++ gsoap/samples/lu/luclient.cpp	2009-03-04 01:17:54.550483188 +0100
@@ -32,7 +32,7 @@
 */
 
 #include "soapH.h"
-#include <iostream.h>
+#include <iostream>
 
 const char luserver[] = "http://websrv.cs.fsu.edu/~engelen/luserver.cgi";
 
@@ -51,14 +51,14 @@
   a[3].resize(2,3); // 2-element vector indexed from 2 to 3
   a[3][2] = 1;
   a[3][3] = 2;
-  cout << "* Demonstration example *" << endl;
-  cout << "Matrix:" << endl;
+  std::cout << "* Demonstration example *" << std::endl;
+  std::cout << "Matrix:" << std::endl;
   a.print();
   vector b(soap, 3);
   b[1] = 1;
   b[2] = 2;
   b[3] = 3;
-  cout << "Vector:" << endl;
+  std::cout << "Vector:" << std::endl;
   b.print();
   vector x(soap);
   if (argc < 2)
@@ -71,7 +71,7 @@
     soap_print_fault_location(soap, stderr);
   }
   else
-  { cout << "Solution vector from service:" << endl;
+  { std::cout << "Solution vector from service:" << std::endl;
     x.print();
   }
   matrix a1(soap);
@@ -80,7 +80,7 @@
     soap_print_fault_location(soap, stderr);
   }
   else
-  { cout << "Inverse matrix matrix from service:" << endl;
+  { std::cout << "Inverse matrix matrix from service:" << std::endl;
     a1.print();
   }
   soap_destroy(soap);
