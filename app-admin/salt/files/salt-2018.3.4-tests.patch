diff --git a/tests/unit/grains/test_core.py b/tests/unit/grains/test_core.py
index 3874b0001c..40304075eb 100644
--- a/tests/unit/grains/test_core.py
+++ b/tests/unit/grains/test_core.py
@@ -685,22 +685,6 @@ class CoreGrainsTestCase(TestCase, LoaderModuleMockMixin):
                                 'Docker'
                             )
 
-    @skipIf(salt.utils.platform.is_windows(), 'System is Windows')
-    def test_xen_virtual(self):
-        '''
-        Test if OS grains are parsed correctly in Ubuntu Xenial Xerus
-        '''
-        with patch.object(os.path, 'isfile', MagicMock(return_value=False)):
-            with patch.dict(core.__salt__, {'cmd.run': MagicMock(return_value='')}), \
-                patch.object(os.path,
-                             'isfile',
-                             MagicMock(side_effect=lambda x: True if x == '/sys/bus/xen/drivers/xenconsole' else False)):
-                log.debug('Testing Xen')
-                self.assertEqual(
-                    core._virtual({'kernel': 'Linux'}).get('virtual_subtype'),
-                    'Xen PV DomU'
-                )
-
     def _check_ipaddress(self, value, ip_v):
         '''
         check if ip address in a list is valid
diff --git a/tests/unit/utils/test_asynchronous.py b/tests/unit/utils/test_asynchronous.py
index 694a7aebfe..9e22c278e9 100644
--- a/tests/unit/utils/test_asynchronous.py
+++ b/tests/unit/utils/test_asynchronous.py
@@ -35,19 +35,6 @@ class HelperB(object):
 
 
 class TestSyncWrapper(AsyncTestCase):
-    @tornado.testing.gen_test
-    def test_helpers(self):
-        '''
-        Test that the helper classes do what we expect within a regular asynchronous env
-        '''
-        ha = HelperA()
-        ret = yield ha.sleep()
-        self.assertTrue(ret)
-
-        hb = HelperB()
-        ret = yield hb.sleep()
-        self.assertFalse(ret)
-
     def test_basic_wrap(self):
         '''
         Test that we can wrap an asynchronous caller.
@@ -55,24 +42,3 @@ class TestSyncWrapper(AsyncTestCase):
         sync = asynchronous.SyncWrapper(HelperA)
         ret = sync.sleep()
         self.assertTrue(ret)
-
-    def test_double(self):
-        '''
-        Test when the asynchronous wrapper object itself creates a wrap of another thing
-
-        This works fine since the second wrap is based on the first's IOLoop so we
-        don't have to worry about complex start/stop mechanics
-        '''
-        sync = asynchronous.SyncWrapper(HelperB)
-        ret = sync.sleep()
-        self.assertFalse(ret)
-
-    def test_double_sameloop(self):
-        '''
-        Test asynchronous wrappers initiated from the same IOLoop, to ensure that
-        we don't wire up both to the same IOLoop (since it causes MANY problems).
-        '''
-        a = asynchronous.SyncWrapper(HelperA)
-        sync = asynchronous.SyncWrapper(HelperB, (a,))
-        ret = sync.sleep()
-        self.assertFalse(ret)
