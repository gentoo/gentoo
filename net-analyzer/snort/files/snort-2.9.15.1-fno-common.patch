--- a/src/preprocessors/Stream6/stream_paf.h
+++ b/src/preprocessors/Stream6/stream_paf.h
@@ -68,12 +68,14 @@
 uint16_t s5_paf_port_registration_all (void* pv, uint16_t port, bool c2s, bool flush);
 uint16_t s5_paf_service_registration (void* pv, uint16_t service, bool c2s, bool flush);
 
-enum FlushMode
+typedef enum
 {
     FLUSH_MODE_NORMAL = 0,
     FLUSH_MODE_PRE_DISCARD,
     FLUSH_MODE_DISCARD
-}FlushMode;
+} FlushMode_t;
+
+extern FlushMode_t FlushMode;
 
 typedef struct {
     void* user[MAX_PAF_USER];      // arbitrary user data
--- a/src/sfutil/util_jsnorm.h
+++ b/src/sfutil/util_jsnorm.h
@@ -42,5 +42,7 @@
     uint16_t alerts;
 }JSState;
 
+extern int hex_lookup[256];
+
 int JSNormalizeDecode(char *, uint16_t , char *, uint16_t destlen, char **, int *, JSState *, uint8_t *);
 void InitJSNormLookupTable(void);
--- a/src/preprocessors/spp_session.h
+++ b/src/preprocessors/spp_session.h
@@ -28,6 +28,10 @@
 #include "decode.h"
 #include "session_common.h"
 
+#ifdef PERF_PROFILING
+extern PreprocStats sessionPerfStats;
+#endif
+
 /* list of function prototypes for this preprocessor */
 void SetupSessionManager(void);
 void SessionReload(struct _SessionCache* lws_cache, uint32_t max_sessions,
--- a/src/preprocessors/spp_httpinspect.c
+++ b/src/preprocessors/spp_httpinspect.c
@@ -161,7 +161,6 @@
 MemPool *http_mempool = NULL;
 MemPool *mime_decode_mempool = NULL;
 MemPool *mime_log_mempool = NULL;
-int hex_lookup[256];
 int valid_lookup[256];
 
 char** xffFields = NULL;
--- a/src/detection-plugins/sp_session.c
+++ b/src/detection-plugins/sp_session.c
@@ -80,7 +80,7 @@
 #include "snort.h"
 #include "profiler.h"
 #ifdef PERF_PROFILING
-PreprocStats sessionPerfStats;
+PreprocStats sp_sessionPerfStats;
 extern PreprocStats ruleOTNEvalPerfStats;
 #endif
 
@@ -149,7 +149,7 @@
     /* map the keyword to an initialization/processing function */
     RegisterRuleOption("session", SessionInit, NULL, OPT_TYPE_LOGGING, NULL);
 #ifdef PERF_PROFILING
-    RegisterPreprocessorProfile("session", &sessionPerfStats, 3, &ruleOTNEvalPerfStats, NULL);
+    RegisterPreprocessorProfile("session", &sp_sessionPerfStats, 3, &ruleOTNEvalPerfStats, NULL);
 #endif
     DEBUG_WRAP(DebugMessage(DEBUG_PLUGIN, "Plugin: Session Setup\n"););
 }
@@ -287,7 +287,7 @@
     FILE *session;         /* session file ptr */
     PROFILE_VARS;
 
-    PREPROC_PROFILE_START(sessionPerfStats);
+    PREPROC_PROFILE_START(sp_sessionPerfStats);
 
     /* if there's data in this packet */
     if(p != NULL)
@@ -298,7 +298,7 @@
 
              if(session == NULL)
              {
-                 PREPROC_PROFILE_END(sessionPerfStats);
+                 PREPROC_PROFILE_END(sp_sessionPerfStats);
                  return DETECTION_OPTION_MATCH;
              }
 
@@ -308,7 +308,7 @@
         }
     }
 
-    PREPROC_PROFILE_END(sessionPerfStats);
+    PREPROC_PROFILE_END(sp_sessionPerfStats);
     return DETECTION_OPTION_MATCH;
 }
 
--- a/src/detection-plugins/sp_session.h
+++ b/src/detection-plugins/sp_session.h
@@ -29,5 +29,8 @@
 void SetupSession(void);
 uint32_t SessionHash(void *d);
 int SessionCompare(void *l, void *r);
+#ifdef PERF_PROFILING
+extern PreprocStats sp_sessionPerfStats;
+#endif
 
 #endif  /* __SP_SESSION_H__ */
