--- a/lib/process.c
+++ b/lib/process.c
@@ -230,12 +230,12 @@
  *   calls a user function pointing to the data
  *
  * XXX: filter is not used.  capture_seconds also isn't, but snoop is
  *	always read from a file.
  */
-int get_snoop_data(char *fname, char *filter, int flags,
-	Double capture_seconds, void (*hook)(packet_data *, void **),
+int get_snoop_data(char *fname,  char *filter __attribute__((unused)), int flags,
+	Double capture_seconds __attribute__((unused)), void (*hook)(packet_data *, void **),
 	void **args) {
 
 	u_char *packet;
 	int fd, len, blen, ret = 0;
 	struct snoop_file_header	fh;
--- a/lib/tcpseq.c
+++ b/lib/tcpseq.c
@@ -54,11 +54,10 @@
 	u_char	flags;
 	struct tcpseq_ha test_ha;
 	struct tcphdr *tp = NULL;
 	struct ip *ip;
 #ifdef INET6
-	int is_ip6 = 0;
 	struct ip6_hdr *ip6;
 
 	ip6 = (struct ip6_hdr *) &pd->data.ip6.hdr;
 	if (is_ip6_packet(pd))
 		tp= &(pd->data.ip6.body.tcphdr);
--- a/src/catpcap.c
+++ b/src/catpcap.c
@@ -52,13 +52,12 @@
 	return '.';
 }
 
-void proc_pcap(u_char *user, const struct pcap_pkthdr *h, const u_char *p) {
+void proc_pcap(u_char *user __attribute__((unused)), const struct pcap_pkthdr *h, const u_char *p) {
 	u_int length = h->caplen, i, j, k, step;
-	u_char *r, *s;
+	u_char *r;
 	char c;
 
 	r = (u_char *)p;
-	s = (u_char *)p;
 	step = 22;
 	printf("%u: %lu.%.6lu, caplen %u, len %u\n",
 		p_number++,
@@ -92,7 +91,7 @@
  * process_file() takes the output of tcpdump, saves packets, and displays
  * statistics
  */
-void process_file(char *fname, u_int unused) {
+void process_file(char *fname, u_int unused __attribute__((unused))) {
 	int run = 1, i;
 	pcap_t	*pd;
 	char	ebuf[PCAP_ERRBUF_SIZE];
--- a/src/dump.c
+++ b/src/dump.c
@@ -37,21 +37,21 @@
 char filterexpr[BUF_SIZ]	= "";
 int	get_tcp_flags		= 0;
 int	what_to_show		= 0;
 int	packet_number		= 0;
 
-void my_hook(packet_data *pd, void **args) {
+void my_hook(packet_data *pd) {
 	printf("PACKET NUMBER: %d\n", ++packet_number);
 	print_packet(pd, what_to_show);
 	printf("-------------------\n");
 }
 
 /*
  * process_file() takes the output of tcpdump, saves packets, and displays
  * statistics
  */
-void process_file(char *fname, u_int unused) {
+void process_file(char *fname, u_int unused __attribute__((unused))) {
         get_dump_data(fname, filterexpr, get_tcp_flags,
 		-1.0, my_hook, NULL);
 }
 
 int parse_show_types(char *in) {
--- a/src/tcpstat.c
+++ b/src/tcpstat.c
@@ -421,11 +421,11 @@
 }
 
 /*
  * process_file() gets the data, and then displays the statistics
  */
-void process_file(char *fname, u_int unused) {
+void process_file(char *fname, u_int unused __attribute__((unused))) {
 	void		*argv[2];
 	statistics	stats;
 	Double		x;
 
 	signal(SIGUSR1, catch_signal);
