From 40c6f7605765e0bf00cb37a46ec142854621683a Mon Sep 17 00:00:00 2001
From: Christoph Cullmann <christoph@cullmann.io>
Date: Thu, 6 Feb 2025 17:57:54 +0100
Subject: [PATCH 1/2] binary search instead of gperf

(cherry picked from commit 5c3beb43c0d99d8092a768eb70399e906cbd0f43)
---
 CMakeLists.txt      |   2 -
 src/CMakeLists.txt  |  12 +-
 src/kcharsets.cpp   |  55 +++++++-
 src/kentities.gperf | 312 --------------------------------------------
 4 files changed, 50 insertions(+), 331 deletions(-)
 delete mode 100644 src/kentities.gperf

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 248422b..d2afb22 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -25,8 +25,6 @@ if (QT_MAJOR_VERSION STREQUAL "6")
     find_package(Qt6Core5Compat ${REQUIRED_QT_VERSION} REQUIRED CONFIG) # QTextCodec
 endif()
 
-find_package(Gperf REQUIRED)
-
 include(ECMGenerateExportHeader)
 include(CMakePackageConfigHelpers)
 include(ECMSetupVersion)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index d19122a..8216075 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -3,17 +3,7 @@ add_library(KF5::Codecs ALIAS KF5Codecs)
 
 ecm_create_qm_loader(KF5Codecs kcodecs5_qt)
 
-ecm_gperf_generate(kentities.gperf ${CMAKE_CURRENT_BINARY_DIR}/kentities.h KF5Codecs
-                   GENERATION_FLAGS "--key-positions=* -D -s 2")
-
-# gperf < 3.1 always adds a "register" keyword to function arguments,
-# which itself is removed from C++17,
-# so sources including the generated header need to use C++14 only.
-# Only kcharsets.cpp is affected, but right now nothing else needs C++17,
-# so simply set standard for the while library
-# Current version of FindGperf in ECM does not support a version check yet,
-# so for now always lower to C++14.
-set_target_properties(KF5Codecs PROPERTIES CXX_STANDARD 14)
+set_target_properties(KF5Codecs PROPERTIES CXX_STANDARD 20)
 
 target_sources(KF5Codecs PRIVATE
     kcharsets.cpp
diff --git a/src/kcharsets.cpp b/src/kcharsets.cpp
index 82a1b23..1464a74 100644
--- a/src/kcharsets.cpp
+++ b/src/kcharsets.cpp
@@ -12,7 +12,6 @@
 #include "kcodecs_debug.h"
 
 #include "kusasciitextcodec.h"
-#include <kentities.h>
 
 #include <QHash>
 #include <QTextCodec>
@@ -489,6 +488,50 @@ KCharsets::KCharsets()
 
 KCharsets::~KCharsets() = default;
 
+// sorted entities list for lookup
+static const std::pair<std::string_view, int> entities[] = {
+    {"AElig", 0x00c6},   {"Aacute", 0x00c1},  {"Acirc", 0x00c2},   {"Agrave", 0x00c0},  {"Alpha", 0x0391},    {"AMP", 38},         {"Aring", 0x00c5},
+    {"Atilde", 0x00c3},  {"Auml", 0x00c4},    {"Beta", 0x0392},    {"Ccaron", 0x010c},  {"Ccedil", 0x00c7},   {"Chi", 0x03a7},     {"Dagger", 0x2021},
+    {"Dcaron", 0x010e},  {"Delta", 0x0394},   {"ETH", 0x00d0},     {"Eacute", 0x00c9},  {"Ecaron", 0x011a},   {"Ecirc", 0x00ca},   {"Egrave", 0x00c8},
+    {"Eague", 0x00c9},   {"Epsilon", 0x0395}, {"Eta", 0x0397},     {"Euml", 0x00cb},    {"Gamma", 0x0393},    {"GT", 62},          {"Iacute", 0x00cd},
+    {"Icirc", 0x00ce},   {"Igrave", 0x00cc},  {"Iota", 0x0399},    {"Iuml", 0x00cf},    {"Kappa", 0x039a},    {"Lambda", 0x039b},  {"LT", 60},
+    {"Mu", 0x039c},      {"Ncaron", 0x0147},  {"Ntilde", 0x00d1},  {"Nu", 0x039d},      {"OElig", 0x0152},    {"Oacute", 0x00d3},  {"Ocirc", 0x00d4},
+    {"Ograve", 0x00d2},  {"Omega", 0x03a9},   {"Omicron", 0x039f}, {"Oslash", 0x00d8},  {"Otilde", 0x00d5},   {"Ouml", 0x00d6},    {"Phi", 0x03a6},
+    {"Pi", 0x03a0},      {"Prime", 0x2033},   {"Psi", 0x03a8},     {"QUOT", 34},        {"Rcaron", 0x0158},   {"Rho", 0x03a1},     {"Scaron", 0x0160},
+    {"Sigma", 0x03a3},   {"THORN", 0x00de},   {"Tau", 0x03a4},     {"Tcaron", 0x0164},  {"Theta", 0x0398},    {"Uacute", 0x00da},  {"Ucirc", 0x00db},
+    {"Ugrave", 0x00d9},  {"Upsilon", 0x03a5}, {"Uring", 0x016e},   {"Uuml", 0x00dc},    {"Xi", 0x039e},       {"Yacute", 0x00dd},  {"Yuml", 0x0178},
+    {"Zcaron", 0x017d},  {"Zeta", 0x0396},    {"aacute", 0x00e1},  {"acirc", 0x00e2},   {"acute", 0x00b4},    {"aelig", 0x00e6},   {"agrave", 0x00e0},
+    {"alefsym", 0x2135}, {"alpha", 0x03b1},   {"amp", 38},         {"and", 0x2227},     {"ang", 0x2220},      {"apos", 0x0027},    {"aring", 0x00e5},
+    {"asymp", 0x2248},   {"atilde", 0x00e3},  {"auml", 0x00e4},    {"bdquo", 0x201e},   {"beta", 0x03b2},     {"brvbar", 0x00a6},  {"bull", 0x2022},
+    {"cap", 0x2229},     {"ccaron", 0x010d},  {"ccedil", 0x00e7},  {"cedil", 0x00b8},   {"cent", 0x00a2},     {"chi", 0x03c7},     {"circ", 0x02c6},
+    {"clubs", 0x2663},   {"cong", 0x2245},    {"copy", 0x00a9},    {"crarr", 0x21b5},   {"cup", 0x222a},      {"curren", 0x00a4},  {"dArr", 0x21d3},
+    {"dagger", 0x2020},  {"darr", 0x2193},    {"dcaron", 0x10f},   {"deg", 0x00b0},     {"delta", 0x03b4},    {"diams", 0x2666},   {"divide", 0x00f7},
+    {"dol", 0x0024},     {"dollar", 0x0024},  {"eacute", 0x00e9},  {"ecaron", 0x011b},  {"eague", 0x00e9},    {"ecirc", 0x00ea},   {"egrave", 0x00e8},
+    {"emdash", 0x2014},  {"empty", 0x2205},   {"emsp", 0x2003},    {"endash", 0x2013},  {"ensp", 0x2002},     {"epsilon", 0x03b5}, {"equiv", 0x2261},
+    {"eta", 0x03b7},     {"eth", 0x00f0},     {"euml", 0x00eb},    {"euro", 0x20ac},    {"exist", 0x2203},    {"fnof", 0x0192},    {"forall", 0x2200},
+    {"frac12", 0x00bd},  {"frac14", 0x00bc},  {"frac34", 0x00be},  {"frasl", 0x2044},   {"gamma", 0x03b3},    {"ge", 0x2265},      {"gt", 62},
+    {"hArr", 0x21d4},    {"harr", 0x2194},    {"hearts", 0x2665},  {"hellip", 0x2026},  {"iacute", 0x00ed},   {"icirc", 0x00ee},   {"iexcl", 0x00a1},
+    {"igrave", 0x00ec},  {"image", 0x2111},   {"infin", 0x221e},   {"int", 0x222b},     {"iota", 0x03b9},     {"iquest", 0x00bf},  {"isin", 0x2208},
+    {"iuml", 0x00ef},    {"kappa", 0x03ba},   {"lArr", 0x21d0},    {"lambda", 0x03bb},  {"lang", 0x2329},     {"laquo", 0x00ab},   {"larr", 0x2190},
+    {"lceil", 0x2308},   {"ldquo", 0x201c},   {"le", 0x2264},      {"lfloor", 0x230a},  {"lowast", 0x2217},   {"loz", 0x25ca},     {"lrm", 0x200e},
+    {"lsaquo", 0x2039},  {"lsquo", 0x2018},   {"lt", 60},          {"macr", 0x00af},    {"mdash", 0x2014},    {"micro", 0x00b5},   {"middot", 0x00b7},
+    {"minus", 0x2212},   {"mu", 0x03bc},      {"nabla", 0x2207},   {"nbsp", 0x00a0},    {"ncaron", 0x0148},   {"ndash", 0x2013},   {"ne", 0x2260},
+    {"ni", 0x220b},      {"not", 0x00ac},     {"notin", 0x2209},   {"nsub", 0x2284},    {"ntilde", 0x00f1},   {"nu", 0x03bd},      {"oacute", 0x00f3},
+    {"ocirc", 0x00f4},   {"oelig", 0x0153},   {"ograve", 0x00f2},  {"oline", 0x203e},   {"omega", 0x03c9},    {"omicron", 0x03bf}, {"oplus", 0x2295},
+    {"or", 0x2228},      {"ordf", 0x00aa},    {"ordm", 0x00ba},    {"oslash", 0x00f8},  {"otilde", 0x00f5},   {"otimes", 0x2297},  {"ouml", 0x00f6},
+    {"para", 0x00b6},    {"part", 0x2202},    {"percnt", 0x0025},  {"permil", 0x2030},  {"perp", 0x22a5},     {"phi", 0x03c6},     {"pi", 0x03c0},
+    {"piv", 0x03d6},     {"plusmn", 0x00b1},  {"pound", 0x00a3},   {"prime", 0x2032},   {"prod", 0x220f},     {"prop", 0x221d},    {"psi", 0x03c8},
+    {"quot", 34},        {"rArr", 0x21d2},    {"radic", 0x221a},   {"rang", 0x232a},    {"raquo", 0x00bb},    {"rarr", 0x2192},    {"rcaron", 0x0159},
+    {"rceil", 0x2309},   {"rdquo", 0x201d},   {"real", 0x211c},    {"reg", 0x00ae},     {"rfloor", 0x230b},   {"rho", 0x03c1},     {"rlm", 0x200f},
+    {"rsaquo", 0x203a},  {"rsquo", 0x2019},   {"sbquo", 0x201a},   {"scaron", 0x0161},  {"sdot", 0x22c5},     {"sect", 0x00a7},    {"shy", 0x00ad},
+    {"sigma", 0x03c3},   {"sigmaf", 0x03c2},  {"sim", 0x223c},     {"spades", 0x2660},  {"sub", 0x2282},      {"sube", 0x2286},    {"sum", 0x2211},
+    {"sup1", 0x00b9},    {"supl", 0x00b9},    {"sup2", 0x00b2},    {"sup3", 0x00b3},    {"sup", 0x2283},      {"supe", 0x2287},    {"szlig", 0x00df},
+    {"tau", 0x03c4},     {"tcaron", 0x0165},  {"there4", 0x2234},  {"theta", 0x03b8},   {"thetasym", 0x03d1}, {"thinsp", 0x2009},  {"thorn", 0x00fe},
+    {"tilde", 0x02dc},   {"times", 0x00d7},   {"trade", 0x2122},   {"uArr", 0x21d1},    {"uacute", 0x00fa},   {"uarr", 0x2191},    {"ucirc", 0x00fb},
+    {"ugrave", 0x00f9},  {"uml", 0x00a8},     {"upsih", 0x03d2},   {"upsilon", 0x03c5}, {"uring", 0x016f},    {"uuml", 0x00fc},    {"weierp", 0x2118},
+    {"xi", 0x03be},      {"yacute", 0x00fd},  {"yen", 0x00a5},     {"yuml", 0x00ff},    {"zcaron", 0x017e},   {"zeta", 0x03b6},    {"zwj", 0x200d},
+    {"zwnj", 0x200c}};
+
 QChar KCharsets::fromEntity(const QString &str)
 {
     QChar res = QChar::Null;
@@ -524,15 +567,15 @@ QChar KCharsets::fromEntity(const QString &str)
     }
 
     const QByteArray raw(str.toLatin1());
-    const entity *e = KCodecsEntities::kde_findEntity(raw.data(), raw.length());
+    const auto e = std::lower_bound(std::begin(entities), std::end(entities), raw, [](const auto &entry, auto value) {
+        return entry.first < value;
+    });
 
-    if (!e) {
-        // qCDebug(KCODECS_LOG) << "unknown entity " << str <<", len = " << str.length();
+    if (e == std::end(entities) || e->first != raw) {
         return QChar::Null;
     }
-    // qCDebug(KCODECS_LOG) << "got entity " << str << " = " << e->code;
 
-    return QChar(e->code);
+    return QChar(e->second);
 }
 
 QChar KCharsets::fromEntity(const QString &str, int &len)
diff --git a/src/kentities.gperf b/src/kentities.gperf
deleted file mode 100644
index df2677c..0000000
--- a/src/kentities.gperf
+++ /dev/null
@@ -1,312 +0,0 @@
-%language=C++
-%enum
-%readonly-tables
-%compare-strncmp
-%struct-type
-%define lookup-function-name kde_findEntity
-%define hash-function-name hash_Entity
-%define word-array-name wordlist_Entity
-%define class-name KCodecsEntities
-%{
-/*   This file is part of the KDE libraries
-
-     SPDX-FileCopyrightText: 1999 Lars Knoll <knoll@mpi-hd.mpg.de>
-
-     SPDX-License-Identifier: LGPL-2.0-or-later
-
-  ----------------------------------------------------------------------------
-
-    kentities.gperf: input file to generate a hash table for entities
-    kentities.c: DO NOT EDIT! generated by the command
-    "gperf -k '*' -D -s 2 --output-file=kentities.h kentities.gperf"
-    from kentities.gperf
-*/
-%}
-struct entity {
-    const char *name;
-    int code;
-};
-%%
-AElig, 0x00c6
-Aacute, 0x00c1
-Acirc, 0x00c2
-Agrave, 0x00c0
-Alpha, 0x0391
-AMP, 38
-Aring, 0x00c5
-Atilde, 0x00c3
-Auml, 0x00c4
-Beta, 0x0392
-Ccaron, 0x010c
-Ccedil, 0x00c7
-Chi, 0x03a7
-Dagger, 0x2021
-Dcaron, 0x010e
-Delta, 0x0394
-ETH, 0x00d0
-Eacute, 0x00c9
-Ecaron, 0x011a
-Ecirc, 0x00ca
-Egrave, 0x00c8
-Eague, 0x00c9
-Epsilon, 0x0395
-Eta, 0x0397
-Euml, 0x00cb
-Gamma, 0x0393
-GT, 62
-Iacute, 0x00cd
-Icirc, 0x00ce
-Igrave, 0x00cc
-Iota, 0x0399
-Iuml, 0x00cf
-Kappa, 0x039a
-Lambda, 0x039b
-LT, 60
-Mu, 0x039c
-Ncaron, 0x0147
-Ntilde, 0x00d1
-Nu, 0x039d
-OElig, 0x0152
-Oacute, 0x00d3
-Ocirc, 0x00d4
-Ograve, 0x00d2
-Omega, 0x03a9
-Omicron, 0x039f
-Oslash, 0x00d8
-Otilde, 0x00d5
-Ouml, 0x00d6
-Phi, 0x03a6
-Pi, 0x03a0
-Prime, 0x2033
-Psi, 0x03a8
-QUOT, 34
-Rcaron, 0x0158
-Rho, 0x03a1
-Scaron, 0x0160
-Sigma, 0x03a3
-THORN, 0x00de
-Tau, 0x03a4
-Tcaron, 0x0164
-Theta, 0x0398
-Uacute, 0x00da
-Ucirc, 0x00db
-Ugrave, 0x00d9
-Upsilon, 0x03a5
-Uring, 0x016e
-Uuml, 0x00dc
-Xi, 0x039e
-Yacute, 0x00dd
-Yuml, 0x0178
-Zcaron, 0x017d
-Zeta, 0x0396
-aacute, 0x00e1
-acirc, 0x00e2
-acute, 0x00b4
-aelig, 0x00e6
-agrave, 0x00e0
-alefsym, 0x2135
-alpha, 0x03b1
-amp, 38
-and, 0x2227
-ang, 0x2220
-apos, 0x0027
-aring, 0x00e5
-asymp, 0x2248
-atilde, 0x00e3
-auml, 0x00e4
-bdquo, 0x201e
-beta, 0x03b2
-brvbar, 0x00a6
-bull, 0x2022
-cap, 0x2229
-ccaron, 0x010d
-ccedil, 0x00e7
-cedil, 0x00b8
-cent, 0x00a2
-chi, 0x03c7
-circ, 0x02c6
-clubs, 0x2663
-cong, 0x2245
-copy, 0x00a9
-crarr, 0x21b5
-cup, 0x222a
-curren, 0x00a4
-dArr, 0x21d3
-dagger, 0x2020
-darr, 0x2193
-dcaron, 0x10f
-deg, 0x00b0
-delta, 0x03b4
-diams, 0x2666
-divide, 0x00f7
-dol, 0x0024
-dollar, 0x0024
-eacute, 0x00e9
-ecaron, 0x011b
-eague, 0x00e9
-ecirc, 0x00ea
-egrave, 0x00e8
-emdash, 0x2014
-empty, 0x2205
-emsp, 0x2003
-endash, 0x2013
-ensp, 0x2002
-epsilon, 0x03b5
-equiv, 0x2261
-eta, 0x03b7
-eth, 0x00f0
-euml, 0x00eb
-euro, 0x20ac
-exist, 0x2203
-fnof, 0x0192
-forall, 0x2200
-frac12, 0x00bd
-frac14, 0x00bc
-frac34, 0x00be
-frasl, 0x2044
-gamma, 0x03b3
-ge, 0x2265
-gt, 62
-hArr, 0x21d4
-harr, 0x2194
-hearts, 0x2665
-hellip, 0x2026
-iacute, 0x00ed
-icirc, 0x00ee
-iexcl, 0x00a1
-igrave, 0x00ec
-image, 0x2111
-infin, 0x221e
-int, 0x222b
-iota, 0x03b9
-iquest, 0x00bf
-isin, 0x2208
-iuml, 0x00ef
-kappa, 0x03ba
-lArr, 0x21d0
-lambda, 0x03bb
-lang, 0x2329
-laquo, 0x00ab
-larr, 0x2190
-lceil, 0x2308
-ldquo, 0x201c
-le, 0x2264
-lfloor, 0x230a
-lowast, 0x2217
-loz, 0x25ca
-lrm, 0x200e
-lsaquo, 0x2039
-lsquo, 0x2018
-lt, 60
-macr, 0x00af
-mdash, 0x2014
-micro, 0x00b5
-middot, 0x00b7
-minus, 0x2212
-mu, 0x03bc
-nabla, 0x2207
-nbsp, 0x00a0
-ncaron, 0x0148
-ndash, 0x2013
-ne, 0x2260
-ni, 0x220b
-not, 0x00ac
-notin, 0x2209
-nsub, 0x2284
-ntilde, 0x00f1
-nu, 0x03bd
-oacute, 0x00f3
-ocirc, 0x00f4
-oelig, 0x0153
-ograve, 0x00f2
-oline, 0x203e
-omega, 0x03c9
-omicron, 0x03bf
-oplus, 0x2295
-or, 0x2228
-ordf, 0x00aa
-ordm, 0x00ba
-oslash, 0x00f8
-otilde, 0x00f5
-otimes, 0x2297
-ouml, 0x00f6
-para, 0x00b6
-part, 0x2202
-percnt, 0x0025
-permil, 0x2030
-perp, 0x22a5
-phi, 0x03c6
-pi, 0x03c0
-piv, 0x03d6
-plusmn, 0x00b1
-pound, 0x00a3
-prime, 0x2032
-prod, 0x220f
-prop, 0x221d
-psi, 0x03c8
-quot, 34
-rArr, 0x21d2
-radic, 0x221a
-rang, 0x232a
-raquo, 0x00bb
-rarr, 0x2192
-rcaron, 0x0159
-rceil, 0x2309
-rdquo, 0x201d
-real, 0x211c
-reg, 0x00ae
-rfloor, 0x230b
-rho, 0x03c1
-rlm, 0x200f
-rsaquo, 0x203a
-rsquo, 0x2019
-sbquo, 0x201a
-scaron, 0x0161
-sdot, 0x22c5
-sect, 0x00a7
-shy, 0x00ad
-sigma, 0x03c3
-sigmaf, 0x03c2
-sim, 0x223c
-spades, 0x2660
-sub, 0x2282
-sube, 0x2286
-sum, 0x2211
-sup1, 0x00b9
-supl, 0x00b9
-sup2, 0x00b2
-sup3, 0x00b3
-sup, 0x2283
-supe, 0x2287
-szlig, 0x00df
-tau, 0x03c4
-tcaron, 0x0165
-there4, 0x2234
-theta, 0x03b8
-thetasym, 0x03d1
-thinsp, 0x2009
-thorn, 0x00fe
-tilde, 0x02dc
-times, 0x00d7
-trade, 0x2122
-uArr, 0x21d1
-uacute, 0x00fa
-uarr, 0x2191
-ucirc, 0x00fb
-ugrave, 0x00f9
-uml, 0x00a8
-upsih, 0x03d2
-upsilon, 0x03c5
-uring, 0x016f
-uuml, 0x00fc
-weierp, 0x2118
-xi, 0x03be
-yacute, 0x00fd
-yen, 0x00a5
-yuml, 0x00ff
-zcaron, 0x017e
-zeta, 0x03b6
-zwj, 0x200d
-zwnj, 0x200c
-%%
-
-- 
2.49.0


From d7bb0fc595d5406ad869df652449320acabd21c4 Mon Sep 17 00:00:00 2001
From: Christoph Cullmann <christoph@cullmann.io>
Date: Wed, 12 Feb 2025 19:12:26 +0000
Subject: [PATCH 2/2] Move entities table into read-only data section

This requires storing strings inline rather than as char pointers, which
we can do at no extra cost on 64bit architectures at least, as none of
them is longer than 8 byte.

The Entity ctor might look counter-intuitive, but this runs at
compile-time and thus doesn't actually cost us anything either.

(cherry picked from commit 87751d30f2e7f622668db9da5ea64d227fb4b0a1)

Co-authored-by: Volker Krause <vkrause@kde.org>
(cherry picked from commit ab0a558b65892f64522e2f47014846e3ce88916e)
---
 autotests/kcharsetstest.cpp |  3 +++
 src/kcharsets.cpp           | 34 ++++++++++++++++++++++++++++------
 2 files changed, 31 insertions(+), 6 deletions(-)

diff --git a/autotests/kcharsetstest.cpp b/autotests/kcharsetstest.cpp
index ac20941..85752a8 100644
--- a/autotests/kcharsetstest.cpp
+++ b/autotests/kcharsetstest.cpp
@@ -222,6 +222,9 @@ void KCharsetsTest::testFromEntity()
     QCOMPARE(singleton->fromEntity(QString::fromLatin1("quot")), QChar::fromLatin1('"'));
     QCOMPARE(singleton->fromEntity(QString::fromLatin1("amp")), QChar::fromLatin1('&'));
     QCOMPARE(singleton->fromEntity(QString::fromLatin1("apos")), QChar::fromLatin1('\''));
+    QCOMPARE(singleton->fromEntity(QString::fromLatin1("aposgarbagesuffix")), QChar());
+    QCOMPARE(singleton->fromEntity(QString::fromLatin1("thetasym")), QChar(0x03d1));
+    QCOMPARE(singleton->fromEntity(QString::fromLatin1("thetasymgarbagesuffix")), QChar());
 }
 
 void KCharsetsTest::testToEntity()
diff --git a/src/kcharsets.cpp b/src/kcharsets.cpp
index 1464a74..07fb8e3 100644
--- a/src/kcharsets.cpp
+++ b/src/kcharsets.cpp
@@ -18,6 +18,7 @@
 
 #include <algorithm>
 #include <assert.h>
+#include <cstring>
 
 /*
  * The encoding names (like "ISO 8859-1") in this list are user-visible,
@@ -489,7 +490,25 @@ KCharsets::KCharsets()
 KCharsets::~KCharsets() = default;
 
 // sorted entities list for lookup
-static const std::pair<std::string_view, int> entities[] = {
+constexpr inline auto MAX_CODE_SIZE = 8;
+
+struct Entity {
+    template<std::size_t N>
+    constexpr inline Entity(const char (&n)[N], uint32_t c)
+        : code(c)
+    {
+        for (std::size_t i = 0; i < N - 1; ++i) {
+            name[i] = n[i];
+        }
+        for (std::size_t i = N - 1; i < MAX_CODE_SIZE; ++i) {
+            name[i] = '\0';
+        }
+    }
+
+    char name[MAX_CODE_SIZE];
+    uint32_t code;
+};
+static constexpr inline const Entity entities[] = {
     {"AElig", 0x00c6},   {"Aacute", 0x00c1},  {"Acirc", 0x00c2},   {"Agrave", 0x00c0},  {"Alpha", 0x0391},    {"AMP", 38},         {"Aring", 0x00c5},
     {"Atilde", 0x00c3},  {"Auml", 0x00c4},    {"Beta", 0x0392},    {"Ccaron", 0x010c},  {"Ccedil", 0x00c7},   {"Chi", 0x03a7},     {"Dagger", 0x2021},
     {"Dcaron", 0x010e},  {"Delta", 0x0394},   {"ETH", 0x00d0},     {"Eacute", 0x00c9},  {"Ecaron", 0x011a},   {"Ecirc", 0x00ca},   {"Egrave", 0x00c8},
@@ -532,6 +551,11 @@ static const std::pair<std::string_view, int> entities[] = {
     {"xi", 0x03be},      {"yacute", 0x00fd},  {"yen", 0x00a5},     {"yuml", 0x00ff},    {"zcaron", 0x017e},   {"zeta", 0x03b6},    {"zwj", 0x200d},
     {"zwnj", 0x200c}};
 
+[[nodiscard]] static bool operator<(const Entity &lhs, const QByteArray &rhs)
+{
+    return std::strncmp(lhs.name, rhs.constData(), MAX_CODE_SIZE) < 0;
+}
+
 QChar KCharsets::fromEntity(const QString &str)
 {
     QChar res = QChar::Null;
@@ -567,15 +591,13 @@ QChar KCharsets::fromEntity(const QString &str)
     }
 
     const QByteArray raw(str.toLatin1());
-    const auto e = std::lower_bound(std::begin(entities), std::end(entities), raw, [](const auto &entry, auto value) {
-        return entry.first < value;
-    });
+    const auto e = std::lower_bound(std::begin(entities), std::end(entities), raw);
 
-    if (e == std::end(entities) || e->first != raw) {
+    if (e == std::end(entities) || raw.size() > MAX_CODE_SIZE || std::strncmp(e->name, raw.constData(), MAX_CODE_SIZE) != 0) {
         return QChar::Null;
     }
 
-    return QChar(e->second);
+    return QChar(e->code);
 }
 
 QChar KCharsets::fromEntity(const QString &str, int &len)
-- 
2.49.0

