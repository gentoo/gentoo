Description: Support SIIT-DC styled EAM static maps
 Introduce Explicit Address Mapping as defined in RFC7757.  This extends the
 `map <ipv4> <ipv6>` into `map <ipv4 subnet> <ipv6 subnet>`.
 .
Author: Benda Xu <heroxbd@gentoo.org>
Forwarded: Nathan Lutchansky <lutchann@litech.org>
Last-Update: 2018-12-28

--- a/conffile.c
+++ b/conffile.c
@@ -217,16 +217,43 @@
 
 	m = alloc_map_static(ln);
 
+	char *slash;
+	slash = strchr(args[0], '/');
+	unsigned int prefix4 = 32;
+	if (slash) {
+		prefix4 = atoi(slash+1);
+		slash[0] = NULL;
+	}
+
 	if (!inet_pton(AF_INET, args[0], &m->map4.addr)) {
-		slog(LOG_CRIT, "Expected an IPv4 address but found \"%s\" on "
+		slog(LOG_CRIT, "Expected an IPv4 subnet but found \"%s\" on "
 				"line %d\n", args[0], ln);
 		exit(1);
 	}
+	m->map4.prefix_len = prefix4;
+	calc_ip4_mask(&m->map4.mask, NULL, prefix4);
+
+	unsigned int prefix6 = 128;
+	slash = strchr(args[1], '/');
+	if (slash) {
+		prefix6 = atoi(slash+1);
+		slash[0] = NULL;
+	}
+
+	if ((32 - prefix4) != (128 - prefix6)) {
+		slog(LOG_CRIT, "IPv4 and IPv6 subnet must be of the same size, but found"
+				" %s and %s on line %d\n", args[0], args[1], ln);
+		exit(1);
+	}
+
 	if (!inet_pton(AF_INET6, args[1], &m->map6.addr)) {
-		slog(LOG_CRIT, "Expected an IPv6 address but found \"%s\" on "
+		slog(LOG_CRIT, "Expected an IPv6 subnet but found \"%s\" on "
 				"line %d\n", args[1], ln);
 		exit(1);
 	}
+	m->map6.prefix_len = prefix6;
+	calc_ip6_mask(&m->map6.mask, NULL, prefix6);
+        
 	if (validate_ip4_addr(&m->map4.addr) < 0) {
 		slog(LOG_CRIT, "Cannot use reserved address %s in map "
 				"directive, aborting...\n", args[0]);
@@ -490,3 +517,10 @@
 	slog(LOG_CRIT, "Unable to allocate config memory\n");
 	exit(1);
 }
+
+/*
+Local Variables:
+c-basic-offset: 8
+indent-tabs-mode: t
+End:
+*/
--- a/addrmap.c
+++ b/addrmap.c
@@ -97,7 +97,12 @@
 
 int calc_ip4_mask(struct in_addr *mask, const struct in_addr *addr, int len)
 {
-	mask->s_addr = htonl(~((1 << (32 - len)) - 1));
+	if (len) {
+		mask->s_addr = htonl(~((1 << (32 - len)) - 1));
+	} else {
+		/* len==0 */
+		mask->s_addr = 0;
+	}
 	if (addr && (addr->s_addr & ~mask->s_addr))
 		return -1;
 	return 0;
@@ -422,6 +427,9 @@
 	case MAP_TYPE_STATIC:
 		s = container_of(map4, struct map_static, map4);
 		*addr6 = s->map6.addr;
+		if (map4->prefix_len < 32) {
+			addr6->s6_addr32[3] = s->map6.addr.s6_addr32[3] | (addr4->s_addr & ~map4->mask.s_addr);
+		}
 		break;
 	case MAP_TYPE_RFC6052:
 		s = container_of(map4, struct map_static, map4);
@@ -564,7 +572,13 @@
 	switch (map6->type) {
 	case MAP_TYPE_STATIC:
 		s = container_of(map6, struct map_static, map6);
-		*addr4 = s->map4.addr;
+		
+		if (map6->prefix_len < 128) {
+			addr4->s_addr = s->map4.addr.s_addr | (addr6->s6_addr32[3] & ~map6->mask.s6_addr32[3]);
+		} else {
+			*addr4 = s->map4.addr;
+		}
+
 		break;
 	case MAP_TYPE_RFC6052:
 		if (extract_from_prefix(addr4, addr6, map6->prefix_len) < 0)
@@ -629,3 +643,10 @@
 		}
 	}
 }
+
+/*
+Local Variables:
+c-basic-offset: 8
+indent-tabs-mode: t
+End:
+*/
