diff --git a/CMakeLists.txt b/CMakeLists.txt
index dbabecbe97..d12b696bb5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -640,7 +640,7 @@ set(BOOST_HEADER_COMPONENTS container)
 
 if(WITH_MGR)
   list(APPEND BOOST_COMPONENTS
-    python${MGR_PYTHON_VERSION_MAJOR}${MGR_PYTHON_VERSION_MINOR})
+    python-${MGR_PYTHON_VERSION_MAJOR}.${MGR_PYTHON_VERSION_MINOR})
 endif()
 if(WITH_BOOST_CONTEXT)
   list(APPEND BOOST_COMPONENTS context coroutine)
diff --git a/cmake/modules/FindBoost.cmake b/cmake/modules/FindBoost.cmake
index bfab4ca436..90ed0cbb17 100644
--- a/cmake/modules/FindBoost.cmake
+++ b/cmake/modules/FindBoost.cmake
@@ -1181,10 +1181,10 @@ endif()
 # on all platforms to keep end user code free from platform dependent
 # code.  Also provide convenience targets to disable autolinking and
 # enable dynamic linking.
-if(NOT TARGET Boost::diagnostic_definitions)
-  add_library(Boost::diagnostic_definitions INTERFACE IMPORTED)
-  add_library(Boost::disable_autolinking INTERFACE IMPORTED)
-  add_library(Boost::dynamic_linking INTERFACE IMPORTED)
+if(NOT TARGET boost_diagnostic_definitions)
+  add_library(boost_diagnostic_definitions INTERFACE IMPORTED)
+  add_library(boost_disable_autolinking INTERFACE IMPORTED)
+  add_library(boost_dynamic_linking INTERFACE IMPORTED)
 endif()
 if(WIN32)
   # In windows, automatic linking is performed, so you do not have
@@ -1205,11 +1205,11 @@ if(WIN32)
   # code to emit a #pragma message each time a library is selected
   # for linking.
   set(Boost_LIB_DIAGNOSTIC_DEFINITIONS "-DBOOST_LIB_DIAGNOSTIC")
-  set_target_properties(Boost::diagnostic_definitions PROPERTIES
+  set_target_properties(boost_diagnostic_definitions PROPERTIES
     INTERFACE_COMPILE_DEFINITIONS "BOOST_LIB_DIAGNOSTIC")
-  set_target_properties(Boost::disable_autolinking PROPERTIES
+  set_target_properties(boost_disable_autolinking PROPERTIES
     INTERFACE_COMPILE_DEFINITIONS "BOOST_ALL_NO_LIB")
-  set_target_properties(Boost::dynamic_linking PROPERTIES
+  set_target_properties(boost_dynamic_linking PROPERTIES
     INTERFACE_COMPILE_DEFINITIONS "BOOST_ALL_DYN_LINK")
 endif()
 
@@ -2018,52 +2018,52 @@ if(Boost_FOUND)
   endif()
 
   foreach(COMPONENT ${Boost_FIND_COMPONENTS})
-    if(_Boost_IMPORTED_TARGETS AND NOT TARGET Boost::${COMPONENT})
+    if(_Boost_IMPORTED_TARGETS AND NOT TARGET boost_${COMPONENT})
       string(TOUPPER ${COMPONENT} UPPERCOMPONENT)
       if(Boost_${UPPERCOMPONENT}_FOUND)
         if(Boost_USE_STATIC_LIBS)
-          add_library(Boost::${COMPONENT} STATIC IMPORTED)
+          add_library(boost_${COMPONENT} STATIC IMPORTED)
         else()
           # Even if Boost_USE_STATIC_LIBS is OFF, we might have static
           # libraries as a result.
-          add_library(Boost::${COMPONENT} UNKNOWN IMPORTED)
+          add_library(boost_${COMPONENT} UNKNOWN IMPORTED)
         endif()
         if(Boost_INCLUDE_DIRS)
-          set_target_properties(Boost::${COMPONENT} PROPERTIES
+          set_target_properties(boost_${COMPONENT} PROPERTIES
             INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIRS}")
         endif()
         if(EXISTS "${Boost_${UPPERCOMPONENT}_LIBRARY}")
-          set_target_properties(Boost::${COMPONENT} PROPERTIES
+          set_target_properties(boost_${COMPONENT} PROPERTIES
             IMPORTED_LINK_INTERFACE_LANGUAGES "CXX"
             IMPORTED_LOCATION "${Boost_${UPPERCOMPONENT}_LIBRARY}")
         endif()
         if(EXISTS "${Boost_${UPPERCOMPONENT}_LIBRARY_RELEASE}")
-          set_property(TARGET Boost::${COMPONENT} APPEND PROPERTY
+          set_property(TARGET boost_${COMPONENT} APPEND PROPERTY
             IMPORTED_CONFIGURATIONS RELEASE)
-          set_target_properties(Boost::${COMPONENT} PROPERTIES
+          set_target_properties(boost_${COMPONENT} PROPERTIES
             IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
             IMPORTED_LOCATION_RELEASE "${Boost_${UPPERCOMPONENT}_LIBRARY_RELEASE}")
         endif()
         if(EXISTS "${Boost_${UPPERCOMPONENT}_LIBRARY_DEBUG}")
-          set_property(TARGET Boost::${COMPONENT} APPEND PROPERTY
+          set_property(TARGET boost_${COMPONENT} APPEND PROPERTY
             IMPORTED_CONFIGURATIONS DEBUG)
-          set_target_properties(Boost::${COMPONENT} PROPERTIES
+          set_target_properties(boost_${COMPONENT} PROPERTIES
             IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"
             IMPORTED_LOCATION_DEBUG "${Boost_${UPPERCOMPONENT}_LIBRARY_DEBUG}")
         endif()
         if(_Boost_${UPPERCOMPONENT}_DEPENDENCIES)
           unset(_Boost_${UPPERCOMPONENT}_TARGET_DEPENDENCIES)
           foreach(dep ${_Boost_${UPPERCOMPONENT}_DEPENDENCIES})
-            list(APPEND _Boost_${UPPERCOMPONENT}_TARGET_DEPENDENCIES Boost::${dep})
+            list(APPEND _Boost_${UPPERCOMPONENT}_TARGET_DEPENDENCIES boost_${dep})
           endforeach()
           if(COMPONENT STREQUAL "thread")
             list(APPEND _Boost_${UPPERCOMPONENT}_TARGET_DEPENDENCIES Threads::Threads)
           endif()
-          set_target_properties(Boost::${COMPONENT} PROPERTIES
+          set_target_properties(boost_${COMPONENT} PROPERTIES
             INTERFACE_LINK_LIBRARIES "${_Boost_${UPPERCOMPONENT}_TARGET_DEPENDENCIES}")
         endif()
         if(_Boost_${UPPERCOMPONENT}_COMPILER_FEATURES)
-          set_target_properties(Boost::${COMPONENT} PROPERTIES
+          set_target_properties(boost_${COMPONENT} PROPERTIES
             INTERFACE_COMPILE_FEATURES "${_Boost_${UPPERCOMPONENT}_COMPILER_FEATURES}")
         endif()
       endif()
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 1b1f19d464..21c222280f 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -353,12 +353,12 @@ set(ceph_common_objs
 set(ceph_common_deps
   json_spirit erasure_code arch crc32
   ${LIB_RESOLV}
-  Boost::thread
-  Boost::system
-  Boost::random
-  Boost::program_options
-  Boost::date_time
-  Boost::iostreams
+  boost_thread
+  boost_system
+  boost_random
+  boost_program_options
+  boost_date_time
+  boost_iostreams
   ${BLKID_LIBRARIES}
   ${Backtrace_LIBRARIES}
   ${BLKIN_LIBRARIES}
@@ -518,7 +518,7 @@ if (WITH_CEPHFS)
     ceph_mds.cc)
   add_executable(ceph-mds ${ceph_mds_srcs})
   target_link_libraries(ceph-mds mds ${CMAKE_DL_LIBS} global-static ceph-common
-    Boost::thread)
+    boost_thread)
   install(TARGETS ceph-mds DESTINATION bin)
 endif()
 
diff --git a/src/crimson/CMakeLists.txt b/src/crimson/CMakeLists.txt
index d7b58521d4..e1533af33f 100644
--- a/src/crimson/CMakeLists.txt
+++ b/src/crimson/CMakeLists.txt
@@ -106,8 +106,8 @@ target_link_libraries(crimson-common
   PRIVATE
     crc32
     crimson::cflags
-    Boost::iostreams
-    Boost::random
+    boost_iostreams
+    boost_random
     ${NSS_LIBRARIES} ${NSPR_LIBRARIES} OpenSSL::Crypto)
 
 set(crimson_auth_srcs
diff --git a/src/mgr/CMakeLists.txt b/src/mgr/CMakeLists.txt
index 252fb3e5e3..3f3823a68e 100644
--- a/src/mgr/CMakeLists.txt
+++ b/src/mgr/CMakeLists.txt
@@ -26,7 +26,7 @@ target_include_directories(ceph-mgr SYSTEM PRIVATE "${PYTHON_INCLUDE_DIRS}")
 target_link_libraries(ceph-mgr
   osdc client heap_profiler
   global-static ceph-common
-  Boost::python${MGR_PYTHON_VERSION_MAJOR}${MGR_PYTHON_VERSION_MINOR}
+  boost_python-${MGR_PYTHON_VERSION_MAJOR}.${MGR_PYTHON_VERSION_MINOR}
   ${MGR_PYTHON_LIBRARIES} ${CMAKE_DL_LIBS} ${GSSAPI_LIBRARIES})
 set_target_properties(ceph-mgr PROPERTIES
   POSITION_INDEPENDENT_CODE ${EXE_LINKER_USE_PIE})
diff --git a/src/rbd_replay/CMakeLists.txt b/src/rbd_replay/CMakeLists.txt
index e9d3804c5f..5c6eb58de1 100644
--- a/src/rbd_replay/CMakeLists.txt
+++ b/src/rbd_replay/CMakeLists.txt
@@ -36,7 +36,7 @@ if(HAVE_BABELTRACE)
     global
     babeltrace
     babeltrace-ctf
-    Boost::date_time
+    boost_date_time
     )
   install(TARGETS rbd-replay-prep DESTINATION bin)
 endif(HAVE_BABELTRACE)
diff --git a/src/rgw/CMakeLists.txt b/src/rgw/CMakeLists.txt
index ccc4f74cfe..854aa6e5e9 100644
--- a/src/rgw/CMakeLists.txt
+++ b/src/rgw/CMakeLists.txt
@@ -199,7 +199,7 @@ if(WITH_CURL_OPENSSL)
 endif()
 
 if(WITH_BOOST_CONTEXT)
-  target_link_libraries(rgw_a PRIVATE Boost::coroutine Boost::context)
+  target_link_libraries(rgw_a PRIVATE boost_coroutine boost_context)
 endif()
 
 set(rgw_libs rgw_a)
@@ -341,7 +341,7 @@ if(WITH_RADOSGW_AMQP_ENDPOINT)
   target_link_libraries(rgw_admin_user PRIVATE RabbitMQ::RabbitMQ)
 endif()
 if(WITH_BOOST_CONTEXT)
-  target_link_libraries(rgw_admin_user PRIVATE Boost::coroutine Boost::context)
+  target_link_libraries(rgw_admin_user PRIVATE boost_coroutine boost_context)
 endif()
 
 if(WITH_TESTS)
diff --git a/src/test/CMakeLists.txt b/src/test/CMakeLists.txt
index 20a64fd41b..a8bb323614 100644
--- a/src/test/CMakeLists.txt
+++ b/src/test/CMakeLists.txt
@@ -158,7 +158,7 @@ add_executable(ceph_omapbench
   )
 target_link_libraries(ceph_omapbench
   librados
-  Boost::program_options
+  boost_program_options
   global
   ${BLKID_LIBRARIES}
   ${CMAKE_DL_LIBS}
diff --git a/src/test/common/CMakeLists.txt b/src/test/common/CMakeLists.txt
index 71fb77cda9..aff8fb6565 100644
--- a/src/test/common/CMakeLists.txt
+++ b/src/test/common/CMakeLists.txt
@@ -315,8 +315,8 @@ add_ceph_unittest(unittest_hobject)
 
 add_executable(unittest_async_completion test_async_completion.cc)
 add_ceph_unittest(unittest_async_completion)
-target_link_libraries(unittest_async_completion Boost::system)
+target_link_libraries(unittest_async_completion boost_system)
 
 add_executable(unittest_async_shared_mutex test_async_shared_mutex.cc)
 add_ceph_unittest(unittest_async_shared_mutex)
-target_link_libraries(unittest_async_shared_mutex ceph-common Boost::system)
+target_link_libraries(unittest_async_shared_mutex ceph-common boost_system)
diff --git a/src/test/erasure-code/CMakeLists.txt b/src/test/erasure-code/CMakeLists.txt
index 721f6c3675..1cd9635c77 100644
--- a/src/test/erasure-code/CMakeLists.txt
+++ b/src/test/erasure-code/CMakeLists.txt
@@ -2,15 +2,15 @@
 add_executable(ceph_erasure_code_benchmark 
   ${CMAKE_SOURCE_DIR}/src/erasure-code/ErasureCode.cc
   ceph_erasure_code_benchmark.cc)
-target_link_libraries(ceph_erasure_code_benchmark ceph-common Boost::program_options global ${CMAKE_DL_LIBS})
+target_link_libraries(ceph_erasure_code_benchmark ceph-common boost_program_options global ${CMAKE_DL_LIBS})
 install(TARGETS ceph_erasure_code_benchmark
   DESTINATION bin)
 
 add_executable(ceph_erasure_code_non_regression ceph_erasure_code_non_regression.cc)
-target_link_libraries(ceph_erasure_code_non_regression ceph-common Boost::program_options global ${CMAKE_DL_LIBS})
+target_link_libraries(ceph_erasure_code_non_regression ceph-common boost_program_options global ${CMAKE_DL_LIBS})
 
 add_executable(ceph_erasure_code ceph_erasure_code.cc)
-target_link_libraries(ceph_erasure_code ceph-common Boost::program_options global ${CMAKE_DL_LIBS})
+target_link_libraries(ceph_erasure_code ceph-common boost_program_options global ${CMAKE_DL_LIBS})
 install(TARGETS ceph_erasure_code
   DESTINATION bin)
 
diff --git a/src/test/librados/CMakeLists.txt b/src/test/librados/CMakeLists.txt
index 4fc53d2406..e6304394f8 100644
--- a/src/test/librados/CMakeLists.txt
+++ b/src/test/librados/CMakeLists.txt
@@ -62,7 +62,7 @@ add_executable(ceph_test_rados_api_asio asio.cc)
 target_link_libraries(ceph_test_rados_api_asio global
   librados ${UNITTEST_LIBS})
 if(WITH_BOOST_CONTEXT)
-  target_link_libraries(ceph_test_rados_api_asio Boost::coroutine Boost::context)
+  target_link_libraries(ceph_test_rados_api_asio boost_coroutine boost_context)
 endif()
 
 add_executable(ceph_test_rados_api_list
@@ -132,7 +132,7 @@ add_executable(ceph_test_rados_api_tier_pp
   tier_cxx.cc
   $<TARGET_OBJECTS:unit-main>)
 target_link_libraries(ceph_test_rados_api_tier_pp
-  librados global ${UNITTEST_LIBS} Boost::system radostest-cxx)
+  librados global ${UNITTEST_LIBS} boost_system radostest-cxx)
 
 add_executable(ceph_test_rados_api_snapshots
   snapshots.cc)
diff --git a/src/test/librbd/CMakeLists.txt b/src/test/librbd/CMakeLists.txt
index 2bf6723c40..e99b8afa11 100644
--- a/src/test/librbd/CMakeLists.txt
+++ b/src/test/librbd/CMakeLists.txt
@@ -27,7 +27,7 @@ target_link_libraries(rbd_test PRIVATE
   radostest
   radostest-cxx
   librados
-  Boost::thread
+  boost_thread
   GMock::GMock
   GTest::GTest)
 
diff --git a/src/test/rgw/CMakeLists.txt b/src/test/rgw/CMakeLists.txt
index 9b2c6b6321..80e4cb7829 100644
--- a/src/test/rgw/CMakeLists.txt
+++ b/src/test/rgw/CMakeLists.txt
@@ -143,7 +143,7 @@ add_ceph_unittest(unittest_rgw_dmclock_scheduler)
 target_link_libraries(unittest_rgw_dmclock_scheduler ${rgw_libs} dmclock)
 if(WITH_BOOST_CONTEXT)
   target_compile_definitions(unittest_rgw_dmclock_scheduler PRIVATE BOOST_COROUTINES_NO_DEPRECATION_WARNING)
-  target_link_libraries(unittest_rgw_dmclock_scheduler Boost::coroutine Boost::context)
+  target_link_libraries(unittest_rgw_dmclock_scheduler boost_coroutine boost_context)
 endif()
 
 if(WITH_RADOSGW_AMQP_ENDPOINT)
diff --git a/src/tools/CMakeLists.txt b/src/tools/CMakeLists.txt
index d31f3d2408..6945018b11 100644
--- a/src/tools/CMakeLists.txt
+++ b/src/tools/CMakeLists.txt
@@ -35,20 +35,20 @@ install(PROGRAMS
 endif(WITH_TESTS)
 
 add_executable(ceph-osdomap-tool ceph_osdomap_tool.cc)
-target_link_libraries(ceph-osdomap-tool os global Boost::program_options)
+target_link_libraries(ceph-osdomap-tool os global boost_program_options)
 install(TARGETS ceph-osdomap-tool DESTINATION bin)
 
 add_executable(ceph-monstore-tool
   ceph_monstore_tool.cc
   ../mgr/mgr_commands.cc)
-target_link_libraries(ceph-monstore-tool os global Boost::program_options)
+target_link_libraries(ceph-monstore-tool os global boost_program_options)
 install(TARGETS ceph-monstore-tool DESTINATION bin)
 
 add_executable(ceph-objectstore-tool
   ceph_objectstore_tool.cc
   rebuild_mondb.cc
   RadosDump.cc)
-target_link_libraries(ceph-objectstore-tool osd os global Boost::program_options ${CMAKE_DL_LIBS})
+target_link_libraries(ceph-objectstore-tool osd os global boost_program_options ${CMAKE_DL_LIBS})
 if(WITH_FUSE)
   target_link_libraries(ceph-objectstore-tool ${FUSE_LIBRARIES})
 endif(WITH_FUSE)
