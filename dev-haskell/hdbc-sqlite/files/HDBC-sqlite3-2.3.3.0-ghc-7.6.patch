--- HDBC-sqlite3-2.3.3.0-orig/testsrc/TestSbasics.hs	2011-08-10 07:08:57.000000000 +1000
+++ HDBC-sqlite3-2.3.3.0/testsrc/TestSbasics.hs	2012-10-13 11:28:21.094200366 +1100
@@ -1,9 +1,13 @@
+{-# LANGUAGE CPP, ScopedTypeVariables #-}
 module TestSbasics(tests) where
 import Test.HUnit
 import Database.HDBC
 import TestUtils
 import System.IO
-import Control.Exception hiding (catch)
+#if !MIN_VERSION_base(4,6,0)
+import Prelude hiding (catch)
+#endif
+import Control.Exception
 
 openClosedb = sqlTestCase $ 
     do dbh <- connectDB
@@ -140,7 +144,7 @@
        -- Let's try a rollback.
        catch (withTransaction dbh (\_ -> do sExecuteMany sth rows
                                             fail "Foo"))
-             (\_ -> return ())
+             (\(_::IOException) -> return ())
        sExecute qrysth []
        sFetchAllRows qrysth >>= (assertEqual "rollback" [[Just "0"]])
 
--- HDBC-sqlite3-2.3.3.0-orig/testsrc/Testbasics.hs	2011-08-10 07:08:57.000000000 +1000
+++ HDBC-sqlite3-2.3.3.0/testsrc/Testbasics.hs	2012-10-13 11:27:20.025541058 +1100
@@ -1,9 +1,13 @@
+{-# LANGUAGE CPP, ScopedTypeVariables #-}
 module Testbasics(tests) where
 import Test.HUnit
 import Database.HDBC
 import TestUtils
 import System.IO
-import Control.Exception hiding (catch)
+#if !MIN_VERSION_base(4,6,0)
+import Prelude hiding (catch)
+#endif
+import Control.Exception
 
 openClosedb = sqlTestCase $ 
     do dbh <- connectDB
@@ -140,7 +144,7 @@
        -- Let's try a rollback.
        catch (withTransaction dbh (\_ -> do executeMany sth rows
                                             fail "Foo"))
-             (\_ -> return ())
+             (\(_::IOException) -> return ())
        execute qrysth []
        fetchAllRows qrysth >>= (assertEqual "rollback" [[SqlString "0"]])
 
