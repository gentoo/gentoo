--- HDBC-postgresql-2.3.2.1-orig/testsrc/TestSbasics.hs	2012-03-04 04:08:01.000000000 +1100
+++ HDBC-postgresql-2.3.2.1/testsrc/TestSbasics.hs	2012-10-13 11:08:27.482597846 +1100
@@ -1,10 +1,14 @@
+{-# LANGUAGE CPP, ScopedTypeVariables #-}
 module TestSbasics(tests) where
 import Test.HUnit
 import Data.List
 import Database.HDBC
 import TestUtils
 import System.IO
-import Control.Exception hiding (catch)
+#if !MIN_VERSION_base(4,6,0)
+import Prelude hiding (catch)
+#endif
+import Control.Exception
 
 openClosedb = sqlTestCase $ 
     do dbh <- connectDB
@@ -142,7 +146,7 @@
        -- Let's try a rollback.
        catch (withTransaction dbh (\_ -> do sExecuteMany sth rows
                                             fail "Foo"))
-             (\_ -> return ())
+             (\(_::IOException) -> return ())
        sExecute qrysth []
        sFetchAllRows qrysth >>= (assertEqual "rollback" [[Just "0"]])
 
--- HDBC-postgresql-2.3.2.1-orig/testsrc/Testbasics.hs	2012-03-04 04:08:01.000000000 +1100
+++ HDBC-postgresql-2.3.2.1/testsrc/Testbasics.hs	2012-10-13 11:07:43.622396904 +1100
@@ -1,9 +1,13 @@
+{-# LANGUAGE CPP, ScopedTypeVariables #-}
 module Testbasics(tests) where
 import Test.HUnit
 import Database.HDBC
 import TestUtils
 import System.IO
-import Control.Exception hiding (catch)
+#if !MIN_VERSION_base(4,6,0)
+import Prelude hiding (catch)
+#endif
+import Control.Exception
 
 openClosedb = sqlTestCase $ 
     do dbh <- connectDB
@@ -140,7 +144,7 @@
        -- Let's try a rollback.
        catch (withTransaction dbh (\_ -> do executeMany sth rows
                                             fail "Foo"))
-             (\_ -> return ())
+             (\(_::IOException) -> return ())
        execute qrysth []
        fetchAllRows qrysth >>= (assertEqual "rollback" [[SqlString "0"]])
 
