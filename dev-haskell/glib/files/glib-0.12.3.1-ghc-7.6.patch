--- glib-0.12.3.1-orig/System/Glib/GObject.chs	2012-05-28 08:18:53.000000000 +1000
+++ glib-0.12.3.1/System/Glib/GObject.chs	2012-10-11 09:48:16.313701201 +1100
@@ -127,8 +127,6 @@
 
 {#pointer GDestroyNotify as DestroyNotify#}
 
-foreign import ccall "wrapper" mkDestroyNotifyPtr :: IO () -> IO DestroyNotify
-
 -- | This function wraps any newly created objects that derives from
 -- GInitiallyUnowned also known as objects with
 -- \"floating-references\". The object will be refSink (for glib
--- glib-0.12.3.1-orig/System/Glib/MainLoop.chs	2012-05-28 08:18:53.000000000 +1000
+++ glib-0.12.3.1/System/Glib/MainLoop.chs	2012-10-11 09:48:04.779383615 +1100
@@ -71,7 +71,7 @@
 
 {#pointer SourceFunc#}
 
-foreign import ccall "wrapper" mkSourceFunc :: IO {#type gint#} -> IO SourceFunc
+foreign import ccall "wrapper" mkSourceFunc :: (Ptr () -> IO {#type gint#}) -> IO SourceFunc
 
 type HandlerId = {#type guint#}
 
@@ -79,7 +79,7 @@
 --
 makeCallback :: IO {#type gint#} -> IO (SourceFunc, DestroyNotify)
 makeCallback fun = do
-  funPtr <- mkSourceFunc fun
+  funPtr <- mkSourceFunc (const fun)
   return (funPtr, destroyFunPtr)
 
 -- | Sets a function to be called at regular intervals, with the default
