<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="project">
		<email>haskell@gentoo.org</email>
		<name>Gentoo Haskell</name>
	</maintainer>
	<use>
		<flag name="network">Include network support</flag>
		<flag name="zlib">Include zlib support</flag>
	</use>
	<longdescription>
		/Overview/
		
		The io-streams library contains simple and easy-to-use primitives for I/O
		using streams. Most users will want to import the top-level convenience
		module &quot;System.IO.Streams&quot;, which re-exports most of the library:
		
		@
		import           System.IO.Streams (InputStream, OutputStream)
		import qualified System.IO.Streams as Streams
		@
		
		For first-time users, @io-streams@ comes with an included tutorial, which can
		be found in the &quot;System.IO.Streams.Tutorial&quot; module.
		
		/Features/
		
		The @io-streams@ user API has two basic types: @InputStream a@ and
		@OutputStream a@, and three fundamental I/O primitives:
		
		@
		\-\- read an item from an input stream
		Streams.read :: InputStream a -&gt; IO (Maybe a)
		
		\-\- push an item back to an input stream
		Streams.unRead :: a -&gt; InputStream a -&gt; IO ()
		
		\-\- write to an output stream
		Streams.write :: Maybe a -&gt; OutputStream a -&gt; IO ()
		@
		
		Streams can be transformed by composition and hooked together with provided combinators:
		
		@
		ghci&gt; Streams.fromList [1,2,3::Int] &gt;&gt;= Streams.map (*10) &gt;&gt;= Streams.toList
		[10,20,30]
		@
		
		Stream composition leaves the original stream accessible:
		
		@
		ghci&gt; input \&lt;- Streams.fromByteString \&quot;long string\&quot;
		ghci&gt; wrapped \&lt;- Streams.takeBytes 4 input
		ghci&gt; Streams.read wrapped
		Just \&quot;long\&quot;
		ghci&gt; Streams.read wrapped
		Nothing
		ghci&gt; Streams.read input
		Just \&quot; string\&quot;
		@
		
		Simple types and operations in the IO monad mean straightforward and simple
		exception handling and resource cleanup using Haskell standard library
		facilities like &#39;Control.Exception.bracket&#39;.
		
		@io-streams@ comes with:
		
		* functions to use files, handles, concurrent channels, sockets, lists,
		vectors, and more as streams.
		
		* a variety of combinators for wrapping and transforming streams, including
		compression and decompression using zlib, controlling precisely how many
		bytes are read from or written to a stream, buffering output using
		bytestring builders, folds, maps, filters, zips, etc.
		
		* support for parsing from streams using @attoparsec@.
		
		* support for spawning processes and communicating with them using streams.
	</longdescription>
</pkgmetadata>
