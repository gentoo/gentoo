--- a/DB/HSQL/Core.hs
+++ b/DB/HSQL/Core.hs
@@ -7,3 +7,3 @@ import Control.Exception(Exception,throw,catch,handle)
 import Control.Concurrent.MVar(MVar,withMVar,modifyMVar_)
-import Data.Dynamic(cast)
+import Data.Typeable(cast)
 
--- a/DB/HSQL/Error.hs
+++ b/DB/HSQL/Error.hs
@@ -7,3 +7,3 @@ module DB.HSQL.Error(SqlError(..)) where
 import Control.Exception(Exception(..),SomeException(..))
-import Data.Dynamic(Typeable,TyCon,mkTyCon3,cast)
+import Data.Typeable(Typeable, cast)
 import DB.HSQL.Type(SqlType)
@@ -32,14 +32,3 @@ data SqlError
     | SqlClosedHandle -- ^ referenced handle is already closed
-#ifdef __GLASGOW_HASKELL__
    deriving (Eq,Ord,Typeable)
-#else
-   deriving (Eq,Ord)
-
-instance Typeable SqlError where
-	typeOf _ = mkAppTy sqlErrorTc []
-#endif
-
--- | The `TyCon' of `SqlError'.
-sqlErrorTc :: TyCon
-sqlErrorTc = mkTyCon3 "DB.HSQL" "Error" "SqlError"
 
