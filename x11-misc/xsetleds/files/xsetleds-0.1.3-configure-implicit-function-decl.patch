https://bugs.gentoo.org/870571

Not sent upstream as it's a generated file and configure.in
is written for autoconf 2.13.
--- a/configure
+++ b/configure
@@ -1057,7 +1057,7 @@ cat > conftest.$ac_ext << EOF
 #line 1058 "configure"
 #include "confdefs.h"
 
-main(){return(0);}
+int main(){return(0);}
 EOF
 if { (eval echo configure:1063: \"$ac_link\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then
   ac_cv_prog_cc_works=yes
@@ -1304,6 +1304,7 @@ else
 #line 1305 "configure"
 #include "confdefs.h"
 #include <ctype.h>
+#include <stdlib.h>
 #define ISLOWER(c) ('a' <= (c) && (c) <= 'z')
 #define TOUPPER(c) (ISLOWER(c) ? 'A' + ((c) - 'a') : (c))
 #define XOR(e, f) (((e) && !(f)) || (!(e) && (f)))
@@ -2477,7 +2478,7 @@ for ac_kw in inline __inline__ __inline; do
 #include "confdefs.h"
 
 int main() {
-} $ac_kw foo() {
+} int $ac_kw foo() {
 ; return 0; }
 EOF
 if { (eval echo configure:2484: \"$ac_compile\") 1>&5; (eval $ac_compile) 2>&5; }; then
@@ -2855,13 +2856,14 @@ else
   cat > conftest.$ac_ext <<EOF
 #line 2857 "configure"
 #include "confdefs.h"
+#include <unistd.h>
 /* System header to define __stub macros and hopefully few prototypes,
     which can conflict with char $ac_func(); below.  */
 #include <assert.h>
 /* Override any gcc2 internal prototype to avoid an error.  */
 /* We use char because int might match the return type of a gcc2
     builtin and then its argument prototype would still apply.  */
-char $ac_func();
+int $ac_func();
 
 int main() {
 
@@ -2934,14 +2936,13 @@ else
    * does it exist and is it safe to write into the mmap'd area
    * how to use it (BSD variants)  */
 #include <sys/types.h>
+#include <sys/stat.h>
 #include <fcntl.h>
 #include <sys/mman.h>
+#include <stdlib.h>
+#include <unistd.h>
 
-/* This mess was copied from the GNU getpagesize.h.  */
 #ifndef HAVE_GETPAGESIZE
-# ifdef HAVE_UNISTD_H
-#  include <unistd.h>
-# endif
 
 /* Assume that all systems that can run configure have sys/param.h.  */
 # ifndef HAVE_SYS_PARAM_H
@@ -2981,7 +2982,7 @@ else
 #ifdef __cplusplus
 extern "C" { void *malloc(unsigned); }
 #else
-char *malloc();
+void *malloc();
 #endif
 
 int
