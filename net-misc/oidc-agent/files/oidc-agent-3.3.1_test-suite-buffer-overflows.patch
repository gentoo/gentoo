--- a/test/src/utils/stringUtils/tc_strelim.c
+++ b/test/src/utils/stringUtils/tc_strelim.c
@@ -7,7 +7,7 @@
 
 START_TEST(test_noFound) {
   const char* const str = "abcdeffedcba";
-  char              s[strlen(str)];
+  char              s[strlen(str) + 1];
   strcpy(s, str);
   ck_assert_str_eq(strelim(s, 'x'), str);
 }
--- a/test/src/utils/stringUtils/tc_strelimIfAfter.c
+++ b/test/src/utils/stringUtils/tc_strelimIfAfter.c
@@ -7,7 +7,7 @@
 
 START_TEST(test_noElim) {
   const char* const str = "abcdeffedcba";
-  char              s[strlen(str)];
+  char              s[strlen(str) + 1];
   strcpy(s, str);
   ck_assert_str_eq(strelimIfAfter(s, 'b', 'x'), str);
 }
@@ -15,7 +15,7 @@
 
 START_TEST(test_noFound) {
   const char* const str = "abcdeffedcba";
-  char              s[strlen(str)];
+  char              s[strlen(str) + 1];
   strcpy(s, str);
   ck_assert_str_eq(strelimIfAfter(s, 'x', 'a'), str);
 }
--- a/test/src/utils/stringUtils/tc_strelimIfFollowed.c
+++ b/test/src/utils/stringUtils/tc_strelimIfFollowed.c
@@ -7,7 +7,7 @@
 
 START_TEST(test_noElim) {
   const char* const str = "abcdeffedcba";
-  char              s[strlen(str)];
+  char              s[strlen(str) + 1];
   strcpy(s, str);
   ck_assert_str_eq(strelimIfFollowed(s, 'b', 'x'), str);
 }
@@ -15,7 +15,7 @@
 
 START_TEST(test_noFound) {
   const char* const str = "abcdeffedcba";
-  char              s[strlen(str)];
+  char              s[strlen(str) + 1];
   strcpy(s, str);
   ck_assert_str_eq(strelimIfFollowed(s, 'x', 'a'), str);
 }
