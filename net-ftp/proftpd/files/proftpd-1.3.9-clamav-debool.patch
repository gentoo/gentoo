https://bugs.gentoo.org/953810
https://github.com/jbenden/mod_clamav/pull/24/commits
From ea822d6aa428b47aa9681d60af8d3c3d9eae0600 Mon Sep 17 00:00:00 2001
From: TJ Saunders <tj@castaglia.org>
Date: Sat, 12 Apr 2025 09:02:45 -0700
Subject: [PATCH] Issue #23: Fix compilation with newer GCC versions, which
complain of variables named `bool`.

---
 mod_clamav.c | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/mod_clamav.c b/mod_clamav.c
index e25e99d..3be0ca6 100644
--- a/mod_clamav.c
+++ b/mod_clamav.c
@@ -667,18 +667,18 @@ static unsigned long parse_nbytes(char *nbytes_str, char *units_str) {
  * Configuration setter: ClamAV
  */
 MODRET set_clamav(cmd_rec *cmd) {
-  int bool = -1;
+  int engine = -1;
   config_rec *c = NULL;
 
   CHECK_ARGS(cmd, 1);
   CHECK_CONF(cmd, CONF_ROOT|CONF_LIMIT|CONF_VIRTUAL|CONF_GLOBAL|CONF_DIR);
 
-  if ((bool = get_boolean(cmd,1)) == -1)
+  if ((engine = get_boolean(cmd,1)) == -1)
     CONF_ERROR(cmd, "expected Boolean parameter");
 
   c = add_config_param(cmd->argv[0], 1, NULL);
   c->argv[0] = pcalloc(c->pool, sizeof(unsigned char));
-  *((unsigned char *) c->argv[0]) = bool;
+  *((unsigned char *) c->argv[0]) = engine;
   c->flags |= CF_MERGEDOWN;
 
   return PR_HANDLED(cmd);
@@ -688,18 +688,18 @@ MODRET set_clamav(cmd_rec *cmd) {
  * Configuration setter: ClamStream
  */
 MODRET set_clamstream(cmd_rec *cmd) {
-  int bool = -1;
+  int use_stream = -1;
   config_rec *c = NULL;
 
   CHECK_ARGS(cmd, 1);
   CHECK_CONF(cmd, CONF_ROOT|CONF_LIMIT|CONF_VIRTUAL|CONF_GLOBAL|CONF_DIR);
 
-  if ((bool = get_boolean(cmd,1)) == -1)
+  if ((use_stream = get_boolean(cmd,1)) == -1)
     CONF_ERROR(cmd, "expected Boolean parameter");
 
   c = add_config_param(cmd->argv[0], 1, NULL);
   c->argv[0] = pcalloc(c->pool, sizeof(unsigned char));
-  *((unsigned char *) c->argv[0]) = bool;
+  *((unsigned char *) c->argv[0]) = use_stream;
   c->flags |= CF_MERGEDOWN;
 
   return PR_HANDLED(cmd);
@@ -709,18 +709,18 @@ MODRET set_clamstream(cmd_rec *cmd) {
  * Configuration setter: ClamFailsafe
  */
 MODRET set_clamfailsafe(cmd_rec *cmd) {
-  int bool = -1;
+  int use_failsafe = -1;
   config_rec *c = NULL;
 
   CHECK_ARGS(cmd, 1);
   CHECK_CONF(cmd, CONF_ROOT|CONF_LIMIT|CONF_VIRTUAL|CONF_GLOBAL|CONF_DIR);
 
-  if ((bool = get_boolean(cmd, 1)) == -1)
+  if ((use_failsafe = get_boolean(cmd, 1)) == -1)
     CONF_ERROR(cmd, "expected Boolean parameter");
 
   c = add_config_param(cmd->argv[0], 1, NULL);
   c->argv[0] = pcalloc(c->pool, sizeof(unsigned char));
-  *((unsigned char *) c->argv[0]) = bool;
+  *((unsigned char *) c->argv[0]) = use_failsafe;
   c->flags |= CF_MERGEDOWN;
 
   return PR_HANDLED(cmd);
