From 7a65dfda781777872083623595c27dc1174b2ed7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20G=C3=B3rny?= <mgorny@gentoo.org>
Date: Sun, 7 Jun 2020 20:02:48 +0200
Subject: [PATCH 1/2] Increase image comparison limits

Most of the tests require exact match which apparently doesn't always
happen in non-pristine environments.  Some of them have very big
differences due to texlive font rendering changes.
---
 lib/matplotlib/tests/test_arrow_patches.py                 | 4 ++--
 lib/matplotlib/tests/test_axes.py                          | 2 +-
 lib/matplotlib/tests/test_backend_pgf.py                   | 7 ++++---
 lib/matplotlib/tests/test_figure.py                        | 2 +-
 lib/matplotlib/tests/test_legend.py                        | 6 +++---
 lib/matplotlib/tests/test_pickle.py                        | 2 +-
 lib/matplotlib/tests/test_units.py                         | 4 ++--
 lib/matplotlib/tests/test_usetex.py                        | 3 ++-
 lib/mpl_toolkits/tests/test_axes_grid1.py                  | 2 +-
 .../tests/test_axisartist_grid_helper_curvelinear.py       | 2 +-
 10 files changed, 18 insertions(+), 16 deletions(-)

diff --git a/lib/matplotlib/tests/test_arrow_patches.py b/lib/matplotlib/tests/test_arrow_patches.py
index a9409e2c1..0e356e921 100644
--- a/lib/matplotlib/tests/test_arrow_patches.py
+++ b/lib/matplotlib/tests/test_arrow_patches.py
@@ -67,7 +67,7 @@ def __prepare_fancyarrow_dpi_cor_test():
 
 
 @image_comparison(['fancyarrow_dpi_cor_100dpi.png'], remove_text=True,
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0),
+                  tol={'aarch64': 0.02}.get(platform.machine(), 0.015),
                   savefig_kwarg=dict(dpi=100))
 def test_fancyarrow_dpi_cor_100dpi():
     """
@@ -82,7 +82,7 @@ def test_fancyarrow_dpi_cor_100dpi():
 
 
 @image_comparison(['fancyarrow_dpi_cor_200dpi.png'], remove_text=True,
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0),
+                  tol={'aarch64': 0.02}.get(platform.machine(), 0.018),
                   savefig_kwarg=dict(dpi=200))
 def test_fancyarrow_dpi_cor_200dpi():
     """
diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py
index 75636301d..af057d598 100644
--- a/lib/matplotlib/tests/test_axes.py
+++ b/lib/matplotlib/tests/test_axes.py
@@ -3673,7 +3673,7 @@ def test_vertex_markers():
 
 
 @image_comparison(['vline_hline_zorder', 'errorbar_zorder'],
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0))
+                  tol={'aarch64': 0.02}.get(platform.machine(), 0.015))
 def test_eb_line_zorder():
     x = list(range(10))
 
diff --git a/lib/matplotlib/tests/test_backend_pgf.py b/lib/matplotlib/tests/test_backend_pgf.py
index 7843b4101..ddb2991c1 100644
--- a/lib/matplotlib/tests/test_backend_pgf.py
+++ b/lib/matplotlib/tests/test_backend_pgf.py
@@ -97,7 +97,8 @@ def test_xelatex():
 # test compiling a figure to pdf with pdflatex
 @needs_pdflatex
 @pytest.mark.backend('pgf')
-@image_comparison(['pgf_pdflatex.pdf'], style='default')
+@image_comparison(['pgf_pdflatex.pdf'], style='default',
+                  tol=11.669)
 def test_pdflatex():
     if os.environ.get('APPVEYOR', False):
         pytest.xfail("pdflatex test does not work on appveyor due to missing "
@@ -133,7 +134,7 @@ def test_rcupdate():
                 'pgf.preamble': ['\\usepackage[utf8x]{inputenc}',
                                  '\\usepackage[T1]{fontenc}',
                                  '\\usepackage{sfmath}']}]
-    tol = [6, 0]
+    tol = [6, 14]
     for i, rc_set in enumerate(rc_sets):
         with mpl.rc_context(rc_set):
             create_figure()
@@ -161,7 +162,7 @@ def test_pathclip():
 @needs_xelatex
 @pytest.mark.backend('pgf')
 @image_comparison(['pgf_mixedmode.pdf'], style='default',
-                  tol={'aarch64': 1.086}.get(platform.machine(), 0.0))
+                  tol=1.086)
 def test_mixedmode():
     rc_xelatex = {'font.family': 'serif',
                   'pgf.rcfonts': False}
diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py
index b5ca0ed5b..885afa5f8 100644
--- a/lib/matplotlib/tests/test_figure.py
+++ b/lib/matplotlib/tests/test_figure.py
@@ -14,7 +14,7 @@ import pytest
 
 
 @image_comparison(['figure_align_labels'],
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0))
+                  tol=0.02)
 def test_align_labels():
     # Check the figure.align_labels() command
     fig = plt.figure(tight_layout=True)
diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py
index 71499da44..a8bda6e84 100644
--- a/lib/matplotlib/tests/test_legend.py
+++ b/lib/matplotlib/tests/test_legend.py
@@ -106,7 +106,7 @@ def test_multiple_keys():
 
 
 @image_comparison(['rgba_alpha.png'], remove_text=True,
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0))
+                  tol=0.02)
 def test_alpha_rgba():
     import matplotlib.pyplot as plt
 
@@ -117,7 +117,7 @@ def test_alpha_rgba():
 
 
 @image_comparison(['rcparam_alpha.png'], remove_text=True,
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0))
+                  tol=0.02)
 def test_alpha_rcparam():
     import matplotlib.pyplot as plt
 
@@ -145,7 +145,7 @@ def test_fancy():
 
 
 @image_comparison(['framealpha'], remove_text=True,
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0))
+                  tol=0.02)
 def test_framealpha():
     x = np.linspace(1, 100, 100)
     y = x
diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py
index 0fad3cdf2..4d2599607 100644
--- a/lib/matplotlib/tests/test_pickle.py
+++ b/lib/matplotlib/tests/test_pickle.py
@@ -41,7 +41,7 @@ def test_simple():
 
 
 @image_comparison(['multi_pickle.png'], remove_text=True, style='mpl20',
-                  tol={'aarch64': 0.082}.get(platform.machine(), 0.0))
+                  tol=0.082)
 def test_complete():
     fig = plt.figure('Figure with a label?', figsize=(10, 6))
 
diff --git a/lib/matplotlib/tests/test_units.py b/lib/matplotlib/tests/test_units.py
index f14425144..7f744da47 100644
--- a/lib/matplotlib/tests/test_units.py
+++ b/lib/matplotlib/tests/test_units.py
@@ -74,7 +74,7 @@ def quantity_converter():
 # Tests that the conversion machinery works properly for classes that
 # work as a facade over numpy arrays (like pint)
 @image_comparison(['plot_pint.png'], remove_text=False, style='mpl20',
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0))
+                  tol={'aarch64': 0.02}.get(platform.machine(), 0.002))
 def test_numpy_facade(quantity_converter):
     # use former defaults to match existing baseline image
     plt.rcParams['axes.formatter.limits'] = -7, 7
@@ -101,7 +101,7 @@ def test_numpy_facade(quantity_converter):
 
 # Tests gh-8908
 @image_comparison(['plot_masked_units.png'], remove_text=True, style='mpl20',
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0))
+                  tol=0.02)
 def test_plot_masked_units():
     data = np.linspace(-5, 5)
     data_masked = np.ma.array(data, mask=(data > -2) & (data < 2))
diff --git a/lib/matplotlib/tests/test_usetex.py b/lib/matplotlib/tests/test_usetex.py
index ec693288e..8af6b69eb 100644
--- a/lib/matplotlib/tests/test_usetex.py
+++ b/lib/matplotlib/tests/test_usetex.py
@@ -15,7 +15,8 @@ if not mpl.checkdep_usetex(True):
 @image_comparison(
     baseline_images=['test_usetex'],
     extensions=['pdf', 'png'],
-    style="mpl20")
+    style="mpl20",
+    tol=21)
 def test_usetex():
     mpl.rcParams['text.usetex'] = True
     fig = plt.figure()
diff --git a/lib/mpl_toolkits/tests/test_axes_grid1.py b/lib/mpl_toolkits/tests/test_axes_grid1.py
index 9ed9a9280..56a3bd14a 100644
--- a/lib/mpl_toolkits/tests/test_axes_grid1.py
+++ b/lib/mpl_toolkits/tests/test_axes_grid1.py
@@ -343,7 +343,7 @@ def test_zooming_with_inverted_axes():
 
 
 @image_comparison(['anchored_direction_arrows.png'],
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0))
+                  tol=0.02)
 def test_anchored_direction_arrows():
     fig, ax = plt.subplots()
     ax.imshow(np.zeros((10, 10)), interpolation='nearest')
diff --git a/lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py b/lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py
index 611908063..dc294aef5 100644
--- a/lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py
+++ b/lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py
@@ -17,7 +17,7 @@ from mpl_toolkits.axisartist.grid_helper_curvelinear import \
 
 
 @image_comparison(['custom_transform.png'], style='default',
-                  tol={'aarch64': 0.034}.get(platform.machine(), 0.03))
+                  tol=0.034)
 def test_custom_transform():
     class MyTransform(Transform):
         input_dims = 2
-- 
2.27.0

From 506611e80a4fd12b3f633583d20119fc2f096ba7 Mon Sep 17 00:00:00 2001
From: Antony Lee <anntzer.lee@gmail.com>
Date: Tue, 10 Dec 2019 11:18:24 +0100
Subject: [PATCH 2/2] Rewrite test_cycles to avoid image comparison tests.

They can all be reasonably written by checking the artist properties.
---
 lib/matplotlib/tests/test_cycles.py | 141 ++++++++++------------------
 1 file changed, 51 insertions(+), 90 deletions(-)

diff --git a/lib/matplotlib/tests/test_cycles.py b/lib/matplotlib/tests/test_cycles.py
index ee67b4e41..a340b6166 100644
--- a/lib/matplotlib/tests/test_cycles.py
+++ b/lib/matplotlib/tests/test_cycles.py
@@ -1,6 +1,4 @@
-import platform
-
-from matplotlib.testing.decorators import image_comparison
+import matplotlib as mpl
 import matplotlib.pyplot as plt
 import numpy as np
 import pytest
@@ -8,133 +6,96 @@ import pytest
 from cycler import cycler
 
 
-@image_comparison(['color_cycle_basic.png'], remove_text=True,
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0))
 def test_colorcycle_basic():
     fig, ax = plt.subplots()
     ax.set_prop_cycle(cycler('color', ['r', 'g', 'y']))
-    xs = np.arange(10)
-    ys = 0.25 * xs + 2
-    ax.plot(xs, ys, label='red', lw=4)
-    ys = 0.45 * xs + 3
-    ax.plot(xs, ys, label='green', lw=4)
-    ys = 0.65 * xs + 4
-    ax.plot(xs, ys, label='yellow', lw=4)
-    ys = 0.85 * xs + 5
-    ax.plot(xs, ys, label='red2', lw=4)
-    ax.legend(loc='upper left')
-
-
-@image_comparison(['marker_cycle.png', 'marker_cycle.png'], remove_text=True,
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0))
+    for _ in range(4):
+        ax.plot(range(10), range(10))
+    assert [l.get_color() for l in ax.lines] == ['r', 'g', 'y', 'r']
+
+
 def test_marker_cycle():
     fig, ax = plt.subplots()
     ax.set_prop_cycle(cycler('c', ['r', 'g', 'y']) +
                       cycler('marker', ['.', '*', 'x']))
-    xs = np.arange(10)
-    ys = 0.25 * xs + 2
-    ax.plot(xs, ys, label='red dot', lw=4, ms=16)
-    ys = 0.45 * xs + 3
-    ax.plot(xs, ys, label='green star', lw=4, ms=16)
-    ys = 0.65 * xs + 4
-    ax.plot(xs, ys, label='yellow x', lw=4, ms=16)
-    ys = 0.85 * xs + 5
-    ax.plot(xs, ys, label='red2 dot', lw=4, ms=16)
-    ax.legend(loc='upper left')
+    for _ in range(4):
+        ax.plot(range(10), range(10))
+    assert [l.get_color() for l in ax.lines] == ['r', 'g', 'y', 'r']
+    assert [l.get_marker() for l in ax.lines] == ['.', '*', 'x', '.']
 
+
+def test_marker_cycle_kwargs_arrays_iterators():
     fig, ax = plt.subplots()
-    # Test keyword arguments, numpy arrays, and generic iterators
     ax.set_prop_cycle(c=np.array(['r', 'g', 'y']),
                       marker=iter(['.', '*', 'x']))
-    xs = np.arange(10)
-    ys = 0.25 * xs + 2
-    ax.plot(xs, ys, label='red dot', lw=4, ms=16)
-    ys = 0.45 * xs + 3
-    ax.plot(xs, ys, label='green star', lw=4, ms=16)
-    ys = 0.65 * xs + 4
-    ax.plot(xs, ys, label='yellow x', lw=4, ms=16)
-    ys = 0.85 * xs + 5
-    ax.plot(xs, ys, label='red2 dot', lw=4, ms=16)
-    ax.legend(loc='upper left')
-
-
-@image_comparison(['lineprop_cycle_basic.png'], remove_text=True,
-                  tol={'aarch64': 0.02}.get(platform.machine(), 0.0))
+    for _ in range(4):
+        ax.plot(range(10), range(10))
+    assert [l.get_color() for l in ax.lines] == ['r', 'g', 'y', 'r']
+    assert [l.get_marker() for l in ax.lines] == ['.', '*', 'x', '.']
+
+
 def test_linestylecycle_basic():
     fig, ax = plt.subplots()
     ax.set_prop_cycle(cycler('ls', ['-', '--', ':']))
-    xs = np.arange(10)
-    ys = 0.25 * xs + 2
-    ax.plot(xs, ys, label='solid', lw=4, color='k')
-    ys = 0.45 * xs + 3
-    ax.plot(xs, ys, label='dashed', lw=4, color='k')
-    ys = 0.65 * xs + 4
-    ax.plot(xs, ys, label='dotted', lw=4, color='k')
-    ys = 0.85 * xs + 5
-    ax.plot(xs, ys, label='solid2', lw=4, color='k')
-    ax.legend(loc='upper left')
-
-
-@image_comparison(['fill_cycle_basic.png'], remove_text=True)
+    for _ in range(4):
+        ax.plot(range(10), range(10))
+    assert [l.get_linestyle() for l in ax.lines] == ['-', '--', ':', '-']
+
+
 def test_fillcycle_basic():
     fig, ax = plt.subplots()
     ax.set_prop_cycle(cycler('c',  ['r', 'g', 'y']) +
                       cycler('hatch', ['xx', 'O', '|-']) +
                       cycler('linestyle', ['-', '--', ':']))
-    xs = np.arange(10)
-    ys = 0.25 * xs**.5 + 2
-    ax.fill(xs, ys, label='red, xx', linewidth=3)
-    ys = 0.45 * xs**.5 + 3
-    ax.fill(xs, ys, label='green, circle', linewidth=3)
-    ys = 0.65 * xs**.5 + 4
-    ax.fill(xs, ys, label='yellow, cross', linewidth=3)
-    ys = 0.85 * xs**.5 + 5
-    ax.fill(xs, ys, label='red2, xx', linewidth=3)
-    ax.legend(loc='upper left')
-
-
-@image_comparison(['fill_cycle_ignore.png'], remove_text=True)
+    for _ in range(4):
+        ax.fill(range(10), range(10))
+    assert ([p.get_facecolor() for p in ax.patches]
+            == [mpl.colors.to_rgba(c) for c in ['r', 'g', 'y', 'r']])
+    assert [p.get_hatch() for p in ax.patches] == ['xx', 'O', '|-', 'xx']
+    assert [p.get_linestyle() for p in ax.patches] == ['-', '--', ':', '-']
+
+
 def test_fillcycle_ignore():
     fig, ax = plt.subplots()
     ax.set_prop_cycle(cycler('color',  ['r', 'g', 'y']) +
                       cycler('hatch', ['xx', 'O', '|-']) +
                       cycler('marker', ['.', '*', 'D']))
-    xs = np.arange(10)
-    ys = 0.25 * xs**.5 + 2
+    t = range(10)
     # Should not advance the cycler, even though there is an
     # unspecified property in the cycler "marker".
     # "marker" is not a Polygon property, and should be ignored.
-    ax.fill(xs, ys, 'r', hatch='xx', label='red, xx')
-    ys = 0.45 * xs**.5 + 3
+    ax.fill(t, t, 'r', hatch='xx')
     # Allow the cycler to advance, but specify some properties
-    ax.fill(xs, ys, hatch='O', label='red, circle')
-    ys = 0.65 * xs**.5 + 4
-    ax.fill(xs, ys, label='green, circle')
-    ys = 0.85 * xs**.5 + 5
-    ax.fill(xs, ys, label='yellow, cross')
-    ax.legend(loc='upper left')
+    ax.fill(t, t, hatch='O')
+    ax.fill(t, t)
+    ax.fill(t, t)
+    assert ([p.get_facecolor() for p in ax.patches]
+            == [mpl.colors.to_rgba(c) for c in ['r', 'r', 'g', 'y']])
+    assert [p.get_hatch() for p in ax.patches] == ['xx', 'O', 'O', '|-']
 
 
-@image_comparison(['property_collision_plot.png'], remove_text=True)
 def test_property_collision_plot():
     fig, ax = plt.subplots()
     ax.set_prop_cycle('linewidth', [2, 4])
+    t = range(10)
     for c in range(1, 4):
-        ax.plot(np.arange(10), c * np.arange(10), lw=0.1, color='k')
-    ax.plot(np.arange(10), 4 * np.arange(10), color='k')
-    ax.plot(np.arange(10), 5 * np.arange(10), color='k')
+        ax.plot(t, t, lw=0.1)
+    ax.plot(t, t)
+    ax.plot(t, t)
+    assert [l.get_linewidth() for l in ax.lines] == [0.1, 0.1, 0.1, 2, 4]
 
 
-@image_comparison(['property_collision_fill.png'], remove_text=True)
 def test_property_collision_fill():
     fig, ax = plt.subplots()
-    xs = np.arange(10)
-    ys = 0.25 * xs**.5 + 2
     ax.set_prop_cycle(linewidth=[2, 3, 4, 5, 6], facecolor='bgcmy')
+    t = range(10)
     for c in range(1, 4):
-        ax.fill(xs, c * ys, lw=0.1)
-    ax.fill(xs, 4 * ys)
-    ax.fill(xs, 5 * ys)
+        ax.fill(t, t, lw=0.1)
+    ax.fill(t, t)
+    ax.fill(t, t)
+    assert ([p.get_facecolor() for p in ax.patches]
+            == [mpl.colors.to_rgba(c) for c in 'bgcmy'])
+    assert [p.get_linewidth() for p in ax.patches] == [0.1, 0.1, 0.1, 5, 6]
 
 
 def test_valid_input_forms():
-- 
2.27.0

