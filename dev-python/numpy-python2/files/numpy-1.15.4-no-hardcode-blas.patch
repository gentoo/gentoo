diff --git a/numpy/distutils/system_info.py b/numpy/distutils/system_info.py
index 65d7de316..a85640d30 100644
--- a/numpy/distutils/system_info.py
+++ b/numpy/distutils/system_info.py
@@ -364,29 +364,7 @@ def get_info(name, notfound_action=0):
       1 - display warning message
       2 - raise error
     """
-    cl = {'atlas': atlas_info,  # use lapack_opt or blas_opt instead
-          'atlas_threads': atlas_threads_info,                # ditto
-          'atlas_blas': atlas_blas_info,
-          'atlas_blas_threads': atlas_blas_threads_info,
-          'lapack_atlas': lapack_atlas_info,  # use lapack_opt instead
-          'lapack_atlas_threads': lapack_atlas_threads_info,  # ditto
-          'atlas_3_10': atlas_3_10_info,  # use lapack_opt or blas_opt instead
-          'atlas_3_10_threads': atlas_3_10_threads_info,                # ditto
-          'atlas_3_10_blas': atlas_3_10_blas_info,
-          'atlas_3_10_blas_threads': atlas_3_10_blas_threads_info,
-          'lapack_atlas_3_10': lapack_atlas_3_10_info,  # use lapack_opt instead
-          'lapack_atlas_3_10_threads': lapack_atlas_3_10_threads_info,  # ditto
-          'mkl': mkl_info,
-          # openblas which may or may not have embedded lapack
-          'openblas': openblas_info,          # use blas_opt instead
-          # openblas with embedded lapack
-          'openblas_lapack': openblas_lapack_info, # use blas_opt instead
-          'openblas_clapack': openblas_clapack_info, # use blas_opt instead
-          'blis': blis_info,                  # use blas_opt instead
-          'lapack_mkl': lapack_mkl_info,      # use lapack_opt instead
-          'blas_mkl': blas_mkl_info,          # use blas_opt instead
-          'accelerate': accelerate_info,      # use blas_opt instead
-          'x11': x11_info,
+    cl = {'x11': x11_info,
           'fft_opt': fft_opt_info,
           'fftw': fftw_info,
           'fftw2': fftw2_info,
@@ -731,10 +709,7 @@ class system_info(object):
         return [b for b in [a.strip() for a in libs.split(',')] if b]
 
     def get_libraries(self, key='libraries'):
-        if hasattr(self, '_lib_names'):
-            return self.get_libs(key, default=self._lib_names)
-        else:
-            return self.get_libs(key, '')
+        return self.get_libs(key, '')
 
     def library_extensions(self):
         c = customized_ccompiler()
@@ -1685,7 +1660,7 @@ class blas_info(system_info):
             lib = self.has_cblas(info)
             if lib is not None:
                 info['language'] = 'c'
-                info['libraries'] = [lib]
+                info['libraries'] = lib
                 info['define_macros'] = [('HAVE_CBLAS', None)]
         self.set_info(**info)
 
@@ -1717,16 +1692,16 @@ class blas_info(system_info):
                 # check for cblas lib, and if not present check for blas lib.
                 try:
                     c.link_executable(obj, os.path.join(tmpdir, "a.out"),
-                                      libraries=["cblas"],
+                                      libraries=info["libraries"],
                                       library_dirs=info['library_dirs'],
                                       extra_postargs=info.get('extra_link_args', []))
-                    res = "cblas"
+                    res = info["libraries"]
                 except distutils.ccompiler.LinkError:
                     c.link_executable(obj, os.path.join(tmpdir, "a.out"),
                                       libraries=["blas"],
                                       library_dirs=info['library_dirs'],
                                       extra_postargs=info.get('extra_link_args', []))
-                    res = "blas"
+                    res = ["blas"]
             except distutils.ccompiler.CompileError:
                 res = None
         finally:
