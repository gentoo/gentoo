diff -uNr uTidylib-0.2.orig/tidy/test_tidy.py uTidylib-0.2/tidy/test_tidy.py
--- uTidylib-0.2.orig/tidy/test_tidy.py	2004-02-24 08:53:52.000000000 +0000
+++ uTidylib-0.2/tidy/test_tidy.py	2009-07-25 15:50:56.000000000 +0000
@@ -4,6 +4,10 @@
 
 class TidyTestCase(unittest.TestCase):
     def __init__(self, *args, **kwargs):
+        super(unittest.TestCase, self).__init__(*args, **kwargs)
+        self._shared = False
+        self._parents = []
+
         foo = u'''<html>
     <h1>woot</h1>
     <hr>
@@ -13,13 +17,13 @@
   </body>
 </html>
 '''.encode('utf8')
-        file('foo.htm', 'w').write(foo)
+        file('foo.htm', 'w').write(foo)
         self.input1 = "<html><script>1>2</script>"
         self.input2 = "<html>\n" + "<p>asdkfjhasldkfjhsldjas\n" * 100
     def defaultDocs(self):
         doc1 = tidy.parseString(self.input1)
         doc2 = tidy.parseString(self.input2)
-        doc3 = tidy.parse("foo.htm")
+        doc3 = tidy.parse("../foo.htm")
         doc4 = tidy.parse("bar.htm") # doesn't exist
         return (doc1, doc2, doc3, doc4)
     def test_badOptions(self):
@@ -33,7 +37,7 @@
                 self.fail("Invalid option %s should have raised an error" %
                           repr(dct))
     def test_encodings(self):
-        foo = file('foo.htm').read().decode('utf8').encode('ascii', 
+        foo = file('../foo.htm').read().decode('utf8').encode('ascii', 
                                                            'xmlcharrefreplace')
         doc1u = tidy.parseString(foo, input_encoding='ascii',
                                  output_encoding='latin1')
@@ -58,7 +62,7 @@
 ##        self.failIf(len(doc2.errors)>1) # FIXME - tidylib doesn't
 ##                                        # support this?
         self.failUnless(str(doc2).find('\n')<0)
-        doc3 = tidy.parse('foo.htm', char_encoding='utf8', 
+        doc3 = tidy.parse('../foo.htm', char_encoding='utf8', 
                           alt_text='foo')
         self.failUnless(str(doc3).find('alt="foo"')>=0)
         self.failUnless(str(doc3).find('\xc3\xa9')>=0)
