https://github.com/eventlet/eventlet/issues/646
From 087ba743c7af8a40ac1e4e2ec89409eee3b4233e Mon Sep 17 00:00:00 2001
From: Tim Burke <tim.burke@gmail.com>
Date: Mon, 2 Nov 2020 16:09:46 -0800
Subject: [PATCH] py39: Add _at_fork_reinit method to Semaphores

CPython expects to be able to call such a method on RLocks, Conditions,
and Events in threading; since we may monkey-patch threading to use
Semaphores as locks, they need the method, too.

Addresses #646
---
 eventlet/semaphore.py   |  5 +++++
 tests/semaphore_test.py | 21 +++++++++++++++++++++
 2 files changed, 26 insertions(+)

diff --git a/eventlet/semaphore.py b/eventlet/semaphore.py
index 18b5b05f4..5e2b5e32f 100644
--- a/eventlet/semaphore.py
+++ b/eventlet/semaphore.py
@@ -39,6 +39,7 @@ def __init__(self, value=1):
         if value < 0:
             msg = 'Semaphore() expect value >= 0, actual: {0}'.format(repr(value))
             raise ValueError(msg)
+        self._original_value = value
         self.counter = value
         self._waiters = collections.deque()
 
@@ -51,6 +52,10 @@ def __str__(self):
         params = (self.__class__.__name__, self.counter, len(self._waiters))
         return '<%s c=%s _w[%s]>' % params
 
+    def _at_fork_reinit(self):
+        self.counter = self._original_value
+        self._waiters.clear()
+
     def locked(self):
         """Returns true if a call to acquire would block.
         """
diff --git a/tests/semaphore_test.py b/tests/semaphore_test.py
index d6c11d1f6..cf6a29daf 100644
--- a/tests/semaphore_test.py
+++ b/tests/semaphore_test.py
@@ -42,6 +42,27 @@ def test_timeout_non_blocking(self):
         sem = eventlet.Semaphore()
         self.assertRaises(ValueError, sem.acquire, blocking=False, timeout=1)
 
+    def test_reinit(self):
+        # py39+ expects locks to have a _at_fork_reinit() method; since we
+        # patch in Semaphores in eventlet.green.thread, they need it, too
+        sem = eventlet.Semaphore()
+        sem.acquire()
+        sem._at_fork_reinit()
+        self.assertEqual(sem.acquire(blocking=False), True)
+        self.assertEqual(sem.acquire(blocking=False), False)
+
+        sem = eventlet.Semaphore(0)
+        sem.release()
+        sem._at_fork_reinit()
+        self.assertEqual(sem.acquire(blocking=False), False)
+
+        sem = eventlet.Semaphore(2)
+        sem.acquire()
+        sem._at_fork_reinit()
+        self.assertEqual(sem.acquire(blocking=False), True)
+        self.assertEqual(sem.acquire(blocking=False), True)
+        self.assertEqual(sem.acquire(blocking=False), False)
+
 
 def test_semaphore_contention():
     g_mutex = eventlet.Semaphore()
