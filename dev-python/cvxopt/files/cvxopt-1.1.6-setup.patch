--- setup.py.orig	2013-05-16 21:36:29.616510963 +1200
+++ setup.py	2013-05-16 21:51:08.456347311 +1200
@@ -2,7 +2,7 @@
 from glob import glob
 
 # Modifiy this if BLAS and LAPACK libraries are not in /usr/lib.
-BLAS_LIB_DIR = '/usr/lib'
+BLAS_LIB_DIR = ''
 
 # Default names of BLAS and LAPACK libraries
 BLAS_LIB = ['blas']
@@ -18,37 +18,37 @@
 BUILD_GSL = 0
 
 # Directory containing libgsl (used only when BUILD_GSL = 1).
-GSL_LIB_DIR = '/usr/lib'
+GSL_LIB_DIR = ''
 
 # Directory containing the GSL header files (used only when BUILD_GSL = 1).
-GSL_INC_DIR = '/usr/include/gsl'
+GSL_INC_DIR = ''
 
 # Set to 1 if you are installing the fftw module.
 BUILD_FFTW = 0 
 
 # Directory containing libfftw3 (used only when BUILD_FFTW = 1).
-FFTW_LIB_DIR = '/usr/lib'
+FFTW_LIB_DIR = ''
 
 # Directory containing fftw.h (used only when BUILD_FFTW = 1).
-FFTW_INC_DIR = '/usr/include'
+FFTW_INC_DIR = ''
 
 # Set to 1 if you are installing the glpk module.
 BUILD_GLPK = 0 
 
 # Directory containing libglpk (used only when BUILD_GLPK = 1).
-GLPK_LIB_DIR = '/usr/lib'
+GLPK_LIB_DIR = ''
 
 # Directory containing glpk.h (used only when BUILD_GLPK = 1).
-GLPK_INC_DIR = '/usr/include'
+GLPK_INC_DIR = ''
 
 # Set to 1 if you are installing the DSDP module.
 BUILD_DSDP = 0
 
 # Directory containing libdsdp (used only when BUILD_DSDP = 1).
-DSDP_LIB_DIR = '/usr/lib'
+DSDP_LIB_DIR = ''
  
 # Directory containing dsdp5.h (used only when BUILD_DSDP = 1).
-DSDP_INC_DIR = '/usr/include/dsdp'
+DSDP_INC_DIR = ''
 
 # No modifications should be needed below this line.
 
@@ -61,39 +61,32 @@
 # optional modules
 
 if BUILD_GSL:
-    gsl = Extension('gsl', libraries = ['m', 'gsl'] + BLAS_LIB,
-        include_dirs = [ GSL_INC_DIR ],
-        library_dirs = [ GSL_LIB_DIR, BLAS_LIB_DIR ],
-        extra_link_args = BLAS_EXTRA_LINK_ARGS,
+    gsl = Extension('gsl', libraries = ['gsl'],
+        library_dirs = [ GSL_LIB_DIR ],
         sources = ['src/C/gsl.c'] )
     extmods += [gsl];
 
 if BUILD_FFTW:
-    fftw = Extension('fftw', libraries = ['fftw3'] + BLAS_LIB,
-        include_dirs = [ FFTW_INC_DIR ],
-        library_dirs = [ FFTW_LIB_DIR, BLAS_LIB_DIR ],
-        extra_link_args = BLAS_EXTRA_LINK_ARGS,
+    fftw = Extension('fftw', libraries = ['fftw3'],
+        library_dirs = [ FFTW_LIB_DIR ],
         sources = ['src/C/fftw.c'] )
     extmods += [fftw];
 
 if BUILD_GLPK:
     glpk = Extension('glpk', libraries = ['glpk'],
-        include_dirs = [ GLPK_INC_DIR ],
         library_dirs = [ GLPK_LIB_DIR ],
         sources = ['src/C/glpk.c'] )
     extmods += [glpk];
 
 if BUILD_DSDP:
-    dsdp = Extension('dsdp', libraries = ['dsdp'] + LAPACK_LIB + BLAS_LIB,
-        include_dirs = [ DSDP_INC_DIR ],
-        library_dirs = [ DSDP_LIB_DIR, BLAS_LIB_DIR ],
-        extra_link_args = BLAS_EXTRA_LINK_ARGS,
+    dsdp = Extension('dsdp', libraries = ['dsdp'],
+        library_dirs = [ DSDP_LIB_DIR ],
         sources = ['src/C/dsdp.c'] )
     extmods += [dsdp];
 
 # Required modules
 
-base = Extension('base', libraries = ['m'] + LAPACK_LIB + BLAS_LIB,
+base = Extension('base', libraries = ['m'] + LAPACK_LIB,
     library_dirs = [ BLAS_LIB_DIR ],
     define_macros = MACROS,
     extra_link_args = BLAS_EXTRA_LINK_ARGS,
@@ -105,61 +98,36 @@
     extra_link_args = BLAS_EXTRA_LINK_ARGS,
     sources = ['src/C/blas.c'] )
 
-lapack = Extension('lapack', libraries = LAPACK_LIB + BLAS_LIB,
+lapack = Extension('lapack', libraries = LAPACK_LIB,
     library_dirs = [ BLAS_LIB_DIR ],
     define_macros = MACROS,
     extra_link_args = BLAS_EXTRA_LINK_ARGS,
     sources = ['src/C/lapack.c'] )
 
 umfpack = Extension('umfpack', 
-    include_dirs = [ 'src/C/SuiteSparse/UMFPACK/Include',
-        'src/C/SuiteSparse/AMD/Include', 
-        'src/C/SuiteSparse/AMD/Source', 
-        'src/C/SuiteSparse/SuiteSparse_config' ],
     library_dirs = [ BLAS_LIB_DIR ],
     define_macros = MACROS + [('NTIMER', '1'), ('NCHOLMOD', '1')],
-    libraries = LAPACK_LIB + BLAS_LIB,
+    libraries = [ 'umfpack' ],
     extra_compile_args = ['-Wno-unknown-pragmas'],
-    extra_link_args = BLAS_EXTRA_LINK_ARGS,
-    sources = [ 'src/C/umfpack.c',
-        'src/C/SuiteSparse/UMFPACK/Source/umfpack_global.c',
-        'src/C/SuiteSparse/UMFPACK/Source/umfpack_tictoc.c' ] +
-        ['src/C/SuiteSparse/SuiteSparse_config/SuiteSparse_config.c'] +
-        glob('src/C/SuiteSparse_cvxopt_extra/umfpack/*'))
+    sources = [ 'src/C/umfpack.c' ])
 
 # Build for int or long? 
 import sys
 if sys.maxsize > 2**31: MACROS += [('DLONG',None)]
 
 cholmod = Extension('cholmod',
-    library_dirs = [ BLAS_LIB_DIR ],
-    libraries = LAPACK_LIB + BLAS_LIB,
-    include_dirs = [ 'src/C/SuiteSparse/CHOLMOD/Include', 
-        'src/C/SuiteSparse/COLAMD', 
-        'src/C/SuiteSparse/AMD/Include', 
-        'src/C/SuiteSparse/COLAMD/Include',
-        'src/C/SuiteSparse/SuiteSparse_config' ],
-    define_macros = MACROS + [('NPARTITION', '1'), ('NTIMER', '1')],
-    extra_link_args = BLAS_EXTRA_LINK_ARGS,
-    sources = [ 'src/C/cholmod.c' ] + 
-        ['src/C/SuiteSparse/AMD/Source/' + s for s in ['amd_global.c',
-            'amd_postorder.c', 'amd_post_tree.c', 'amd_2.c']] +
-        ['src/C/SuiteSparse/COLAMD/Source/' + s for s in ['colamd.c',
-            'colamd_global.c']] +
-        ['src/C/SuiteSparse/SuiteSparse_config/SuiteSparse_config.c'] +
-        glob('src/C/SuiteSparse/CHOLMOD/Core/c*.c') +
-        glob('src/C/SuiteSparse/CHOLMOD/Cholesky/c*.c') +
-        ['src/C/SuiteSparse/CHOLMOD/Check/cholmod_check.c'] +
-        glob('src/C/SuiteSparse/CHOLMOD/Supernodal/c*.c') )
+    library_dirs = [ BLAS_LIB_DIR ],
+    libraries = ['cholmod'] + BLAS_LIB,
+    define_macros = MACROS + [('NPARTITION', '1'), ('NTIMER', '1')],
+    sources = [ 'src/C/cholmod.c' ])
 
 amd = Extension('amd', 
-    include_dirs = [ 'src/C/SuiteSparse/AMD/Include', 
-        'src/C/SuiteSparse/SuiteSparse_config' ],
     define_macros = MACROS,
-    sources = [ 'src/C/amd.c' ] + glob('src/C/SuiteSparse/AMD/Source/*.c') )
+    libraries = ['amd'],
+    sources = [ 'src/C/amd.c' ])
 
 misc_solvers = Extension('misc_solvers',
-    libraries = LAPACK_LIB + BLAS_LIB,
+    libraries = LAPACK_LIB,
     library_dirs = [ BLAS_LIB_DIR ],
     define_macros = MACROS,
     extra_link_args = BLAS_EXTRA_LINK_ARGS,
