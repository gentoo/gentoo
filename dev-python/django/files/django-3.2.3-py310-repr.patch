diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index b073df17636a..6dfc42942f79 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -4,6 +4,7 @@
 from django.db.models.indexes import IndexExpression
 from django.db.models.query_utils import Q
 from django.db.models.sql.query import Query
+from django.utils.version import PY310
 
 __all__ = ['CheckConstraint', 'Deferrable', 'UniqueConstraint']
 
@@ -85,6 +86,11 @@ class Deferrable(Enum):
     DEFERRED = 'deferred'
     IMMEDIATE = 'immediate'
 
+    # A similar format is used in Python 3.10+.
+    if not PY310:
+        def __repr__(self):
+            return '%s.%s' % (self.__class__.__qualname__, self._name_)
+
 
 class UniqueConstraint(BaseConstraint):
     def __init__(
@@ -218,7 +224,7 @@ def __repr__(self):
             '' if not self.expressions else ' expressions=%s' % repr(self.expressions),
             ' name=%s' % repr(self.name),
             '' if self.condition is None else ' condition=%s' % self.condition,
-            '' if self.deferrable is None else ' deferrable=%s' % self.deferrable,
+            '' if self.deferrable is None else ' deferrable=%r' % self.deferrable,
             '' if not self.include else ' include=%s' % repr(self.include),
             '' if not self.opclasses else ' opclasses=%s' % repr(self.opclasses),
         )
diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index 7082a397c237..dd9088597d4d 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -2,6 +2,7 @@
 from types import DynamicClassAttribute
 
 from django.utils.functional import Promise
+from django.utils.version import PY310
 
 __all__ = ['Choices', 'IntegerChoices', 'TextChoices']
 
@@ -74,6 +75,11 @@ def __str__(self):
         """
         return str(self.value)
 
+    # A similar format is used in Python 3.10+.
+    if not PY310:
+        def __repr__(self):
+            return '%s.%s' % (self.__class__.__qualname__, self._name_)
+
 
 class IntegerChoices(int, Choices):
     """Class for creating enumerated integer choices."""
diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py
index 78f8b146be92..cda835010d7e 100644
--- a/tests/model_enums/tests.py
+++ b/tests/model_enums/tests.py
@@ -48,7 +48,7 @@ def test_integerchoices(self):
         self.assertEqual(Suit.values, [1, 2, 3, 4])
         self.assertEqual(Suit.names, ['DIAMOND', 'SPADE', 'HEART', 'CLUB'])
 
-        self.assertEqual(repr(Suit.DIAMOND), '<Suit.DIAMOND: 1>')
+        self.assertEqual(repr(Suit.DIAMOND), 'Suit.DIAMOND')
         self.assertEqual(Suit.DIAMOND.label, 'Diamond')
         self.assertEqual(Suit.DIAMOND.value, 1)
         self.assertEqual(Suit['DIAMOND'], Suit.DIAMOND)
@@ -89,7 +89,7 @@ def test_textchoices(self):
         self.assertEqual(YearInSchool.values, ['FR', 'SO', 'JR', 'SR', 'GR'])
         self.assertEqual(YearInSchool.names, ['FRESHMAN', 'SOPHOMORE', 'JUNIOR', 'SENIOR', 'GRADUATE'])
 
-        self.assertEqual(repr(YearInSchool.FRESHMAN), "<YearInSchool.FRESHMAN: 'FR'>")
+        self.assertEqual(repr(YearInSchool.FRESHMAN), 'YearInSchool.FRESHMAN')
         self.assertEqual(YearInSchool.FRESHMAN.label, 'Freshman')
         self.assertEqual(YearInSchool.FRESHMAN.value, 'FR')
         self.assertEqual(YearInSchool['FRESHMAN'], YearInSchool.FRESHMAN)
diff --git a/django/utils/version.py b/django/utils/version.py
index 4b26586b36..b84ca7db27 100644
--- a/django/utils/version.py
+++ b/django/utils/version.py
@@ -13,7 +13,7 @@ PY36 = sys.version_info >= (3, 6)
 PY37 = sys.version_info >= (3, 7)
 PY38 = sys.version_info >= (3, 8)
 PY39 = sys.version_info >= (3, 9)
-
+PY310 = sys.version_info >= (3, 10)
 
 def get_version(version=None):
     """Return a PEP 440-compliant version number from VERSION."""
