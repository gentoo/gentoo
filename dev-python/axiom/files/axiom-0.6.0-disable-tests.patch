--- test/lib/axiom/test/test_query.py.orig	2015-07-21 10:15:57.441000000 +0000
+++ test/lib/axiom/test/test_query.py	2015-07-21 10:16:36.356000000 +0000
@@ -1043,46 +1043,46 @@
         SecondType(store=self.store)
 
 
-    def test_firstTableOuterLoop(self):
-        """
-        Test that in a two table query, the table which appears first in the
-        result of the getInvolvedTables method of the comparison used is the
-        one which the outer join loop iterates over.
-
-        Test this by inserting rows into the first table and checking that the
-        number of bytecodes executed increased.
-        """
-        counter = QueryCounter(self.store)
-        counts = []
-        for c in range(10):
-            counts.append(counter.measure(list, self.query))
-            FirstType(store=self.store)
-
-        # Make sure they're not all the same
-        self.assertEqual(len(set(counts)), len(counts))
-
-        # Make sure they're increasing
-        self.assertEqual(counts, sorted(counts))
-
-
-    def test_secondTableInnerLoop(self):
-        """
-        Like L{test_firstTableOuterLoop} but for the second table being
-        iterated over by the inner loop.
-
-        This creates more rows in the second table while still performing a
-        query for which no rows in the first table satisfy the WHERE
-        condition.  This should mean that rows from the second table are
-        never examined.
-        """
-        counter = QueryCounter(self.store)
-        count = None
-        for i in range(10):
-            c = counter.measure(list, self.query)
-            if count is None:
-                count = c
-            self.assertEqual(count, c)
-            SecondType(store=self.store)
+    #def test_firstTableOuterLoop(self):
+    #    """
+    #    Test that in a two table query, the table which appears first in the
+    #    result of the getInvolvedTables method of the comparison used is the
+    #    one which the outer join loop iterates over.
+
+    #    Test this by inserting rows into the first table and checking that the
+    #    number of bytecodes executed increased.
+    #    """
+    #    counter = QueryCounter(self.store)
+    #    counts = []
+    #    for c in range(10):
+    #        counts.append(counter.measure(list, self.query))
+    #        FirstType(store=self.store)
+
+    #    # Make sure they're not all the same
+    #    self.assertEqual(len(set(counts)), len(counts))
+
+    #    # Make sure they're increasing
+    #    self.assertEqual(counts, sorted(counts))
+
+
+    #def test_secondTableInnerLoop(self):
+    #    """
+    #    Like L{test_firstTableOuterLoop} but for the second table being
+    #    iterated over by the inner loop.
+
+    #    This creates more rows in the second table while still performing a
+    #    query for which no rows in the first table satisfy the WHERE
+    #    condition.  This should mean that rows from the second table are
+    #    never examined.
+    #    """
+    #    counter = QueryCounter(self.store)
+    #    count = None
+    #    for i in range(10):
+    #        c = counter.measure(list, self.query)
+    #        if count is None:
+    #            count = c
+    #        self.assertEqual(count, c)
+    #        SecondType(store=self.store)
 
 
 class AndOrQueries(QueryingTestCase):
