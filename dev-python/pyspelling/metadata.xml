<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person" proxied="yes">
		<email>lssndrbarbieri@gmail.com</email>
		<name>Alessandro Barbieri</name>
	</maintainer>
	<maintainer type="person" proxied="yes">
		<email>andrewammerlaan@riseup.net</email>
		<name>Andrew Ammerlaan</name>
	</maintainer>
	<maintainer type="project" proxied="proxy">
		<email>proxy-maint@gentoo.org</email>
		<name>Proxy Maintainers</name>
	</maintainer>
	<stabilize-allarches/>
	<upstream>
		<remote-id type="github">facelessuser/pyspelling</remote-id>
		<remote-id type="pypi">pyspelling</remote-id>
	</upstream>
	<longdescription lang="en">
PySpelling is a module to help with automating spell checking in a project with Aspell or 
Hunspell. It is essentially a wrapper around the command line utility of these two spell 
checking tools, and allows you to setup different spelling tasks for different file types. 
You can apply specific and different filters and options to each task. PySpelling can also 
be used in CI environments to fail the build if there are misspelled words.
Aspell and Hunspell are very good spell checking tools. Aspell particularly comes with a couple of filters, but the filters are limited in types and aren't extremely flexible. PySpelling was created to work around Aspell's and Hunspell's filtering shortcomings by creating a wrapper around them that could be extended to handle more kinds of file formats and provide more advanced filtering. If you need to filter out specific HTML tags with specific IDs or class names, PySpelling can do it. If you want to scan Python files for docstrings, but also avoid specific content within the docstring, you can do that as well. If PySpelling doesn't have a filter you need, with access to so many available Python modules, you can easily write your own.
	</longdescription>
</pkgmetadata>
