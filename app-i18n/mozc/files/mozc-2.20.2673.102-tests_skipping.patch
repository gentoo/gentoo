Disable test leaving mozc_server orphan process.

--- /src/unix/ibus/mozc_engine_test.cc
+++ /src/unix/ibus/mozc_engine_test.cc
@@ -41,65 +41,5 @@
 namespace mozc {
 namespace ibus {
 
-class LaunchToolTest : public testing::Test {
- public:
-  LaunchToolTest() {
-    g_type_init();
-  }
-
- protected:
-  virtual void SetUp() {
-    mozc_engine_.reset(new MozcEngine());
-
-    mock_ = new client::ClientMock();
-    mock_->ClearFunctionCounter();
-    mozc_engine_->client_.reset(mock_);
-  }
-
-  virtual void TearDown() {
-    mozc_engine_.reset();
-  }
-
-  client::ClientMock* mock_;
-  unique_ptr<MozcEngine> mozc_engine_;
-
- private:
-  DISALLOW_COPY_AND_ASSIGN(LaunchToolTest);
-};
-
-TEST_F(LaunchToolTest, LaunchToolTest) {
-  commands::Output output;
-
-  // Launch config dialog
-  mock_->ClearFunctionCounter();
-  mock_->SetBoolFunctionReturn("LaunchToolWithProtoBuf", true);
-  output.set_launch_tool_mode(commands::Output::CONFIG_DIALOG);
-  EXPECT_TRUE(mozc_engine_->LaunchTool(output));
-
-  // Launch dictionary tool
-  mock_->ClearFunctionCounter();
-  mock_->SetBoolFunctionReturn("LaunchToolWithProtoBuf", true);
-  output.set_launch_tool_mode(commands::Output::DICTIONARY_TOOL);
-  EXPECT_TRUE(mozc_engine_->LaunchTool(output));
-
-  // Launch word register dialog
-  mock_->ClearFunctionCounter();
-  mock_->SetBoolFunctionReturn("LaunchToolWithProtoBuf", true);
-  output.set_launch_tool_mode(commands::Output::WORD_REGISTER_DIALOG);
-  EXPECT_TRUE(mozc_engine_->LaunchTool(output));
-
-  // Launch no tool(means do nothing)
-  mock_->ClearFunctionCounter();
-  mock_->SetBoolFunctionReturn("LaunchToolWithProtoBuf", false);
-  output.set_launch_tool_mode(commands::Output::NO_TOOL);
-  EXPECT_FALSE(mozc_engine_->LaunchTool(output));
-
-  // Something occurring in client::Client::LaunchTool
-  mock_->ClearFunctionCounter();
-  mock_->SetBoolFunctionReturn("LaunchToolWithProtoBuf", false);
-  output.set_launch_tool_mode(commands::Output::CONFIG_DIALOG);
-  EXPECT_FALSE(mozc_engine_->LaunchTool(output));
-}
-
 }  // namespace ibus
 }  // namespace mozc
