#
# This is the global obnam configuration file
#
# see 'man obnam' for all available config options
#

[config]
###
### BACKUP REPOSITORY (backup destination)
###
### configure where to store backups and how
###
# name of the backup repository
# can be a local path (or NFS mount ...) or a sftp URL
#
# local directory:
#repository = /mnt/mybackupspace 
#
# or remote via sftp 
#repository = sftp://someuser@server/path/to/backup
#
# enable compression of files in repository (disabled by default)
#compress-with = deflate

###
### BACKUP ROOT(s) (backup source)
###
### configure what to backup and what to exclude
###
#root = /boot, /home
#exclude = ^/var/tmp/, .*\.pid$, \.cache/, ^/usr/src/linux.*/, ^/var/tmp/portage/, .*/.local/share/Trash/
#one-file-system = true

###
### FORGET POLICY (repository housekeeping)
###
### configure which backup generations to keep when
### cleaning up repository
#keep = 72h,14d,10w,12m

###
### LOGGING
###
# where to write a logfile
# log = /var/log/obnam/obnam.log
# log-level = debug
# log-keep = 10
# log-max = 0
# log-mode = 0600

###
### BACKUP ENCRYPTION
###
#  Encryption:
#    --encrypt-with=ENCRYPT-WITH
#                        PGP key with which to encrypt data in the backup
#                        repository
#    --keyid=KEYID       PGP key id to add to/remove from the backup repository
#    --weak-random       use /dev/urandom instead of /dev/random to generate
#                        symmetric keys
#    --symmetric-key-bits=SYMMETRIC-KEY-BITS
#                        size of symmetric key, in bits

###
### PERFORMANCE TWEAKING
###
#
#  Performance tweaking:
#    --node-size=SIZE    size of B-tree nodes on disk (default: 262144)
#    --chunk-size=SIZE   size of chunks of file data backed up (default:
#                        1048576)
#    --upload-queue-size=SIZE
#                        length of upload queue for B-tree nodes (default:
#                        1024)
#    --lru-size=SIZE     size of LRU cache for B-tree nodes (default: 500)
#    --idpath-depth=IDPATH-DEPTH
#                        depth of chunk id mapping
#    --idpath-bits=IDPATH-BITS
#                        chunk id level size
#    --idpath-skip=IDPATH-SKIP
#                        chunk id mapping lowest bits skip
#    --chunkids-per-group=NUM
#                        encode NUM chunk ids per group (1024)
#
# EOF
