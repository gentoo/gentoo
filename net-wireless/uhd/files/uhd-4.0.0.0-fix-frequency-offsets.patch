From 87e4f1f6da642d90903e29506246843d1ce712d2 Mon Sep 17 00:00:00 2001
From: StefanBruens <stefan.bruens@rwth-aachen.de>
Date: Wed, 5 May 2021 18:24:58 +0200
Subject: [PATCH 1/1] Replace boost::math::iround / math::sign with std::lround
Bug: https://bugs.gentoo.org/788103
Bug: https://github.com/EttusResearch/uhd/issues/437
Bug: https://github.com/EttusResearch/uhd/issues/438

Instead of multiplying zone with the sign repeatedly just make
the zone a signed value.
See https://patch-diff.githubusercontent.com/raw/EttusResearch/uhd/pull/439.patch

diff --git a/host/lib/usrp/usrp2/usrp2_impl.cpp b/host/lib/usrp/usrp2/usrp2_impl.cpp
index c2514ae02..e619d863c 100644
--- a/lib/usrp/usrp2/usrp2_impl.cpp
+++ b/lib/usrp/usrp2/usrp2_impl.cpp
@@ -20,6 +20,7 @@
 #include <boost/format.hpp>
 #include <boost/thread.hpp>
 #include <functional>
+#include <cmath>
 
 using namespace uhd;
 using namespace uhd::usrp;
@@ -917,22 +918,21 @@ double usrp2_impl::set_tx_dsp_freq(const std::string& mb, const double freq_)
     const double tick_rate = _tree->access<double>("/mboards/" + mb + "/tick_rate").get();
 
     // calculate the DAC shift (multiples of rate)
-    const int sign         = boost::math::sign(new_freq);
-    const int zone         = std::min(boost::math::iround(new_freq / tick_rate), 2);
-    const double dac_shift = sign * zone * tick_rate;
+    const int zone         = std::max(std::min<int>(std::lround(new_freq / tick_rate), 2), -2);
+    const double dac_shift = zone * tick_rate;
     new_freq -= dac_shift; // update FPGA DSP target freq
     UHD_LOG_TRACE("USRP2",
         "DSP Tuning: Requested " + std::to_string(freq_ / 1e6)
             + " MHz, Using "
               "Nyquist zone "
-            + std::to_string(sign * zone)
+            + std::to_string(zone)
             + ", leftover DSP tuning: " + std::to_string(new_freq / 1e6) + " MHz.");
 
     // set the DAC shift (modulation mode)
     if (zone == 0) {
         _mbc[mb].codec->set_tx_mod_mode(0); // no shift
     } else {
-        _mbc[mb].codec->set_tx_mod_mode(sign * 4 / zone); // DAC interp = 4
+        _mbc[mb].codec->set_tx_mod_mode(4 / zone); // DAC interp = 4
     }
 
     return _mbc[mb].tx_dsp->set_freq(new_freq) + dac_shift; // actual freq
