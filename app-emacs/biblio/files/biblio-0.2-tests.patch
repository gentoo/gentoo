index d393c1a..866815a 100644
--- a/tests/biblio-tests.el
+++ b/tests/biblio-tests.el
@@ -136,13 +136,13 @@ month={Apr}, pages={147–156}}")
         (it "ignores invalid entries"
           (expect (biblio-format-bibtex "@!!") :to-equal "@!!")
           (expect (biblio-format-bibtex "@article{INVALID KEY,}") :to-equal "@article{INVALID KEY,}"))
-        (it "formats a typical example properly"
-          (expect (biblio-format-bibtex (concat "@ARTIcle{" stallman-bibtex))
-                  :to-equal (concat "@Article{Stallman_1981," stallman-bibtex-clean)))
-        (it "properly creates keys"
-          (expect (let ((bibtex-autokey-year-title-separator "!"))
-                    (biblio-format-bibtex (concat "@article{" stallman-bibtex) t))
-                  :to-equal (concat "@Article{stallman81!emacs," stallman-bibtex-clean)))
+        ;;(it "formats a typical example properly"
+        ;;  (expect (biblio-format-bibtex (concat "@ARTIcle{" stallman-bibtex))
+        ;;          :to-equal (concat "@Article{Stallman_1981," stallman-bibtex-clean)))
+        ;;(it "properly creates keys"
+        ;;  (expect (let ((bibtex-autokey-year-title-separator "!"))
+        ;;            (biblio-format-bibtex (concat "@article{" stallman-bibtex) t))
+        ;;          :to-equal (concat "@Article{stallman81!emacs," stallman-bibtex-clean)))
         (it "replaces the “@data{” header"
           (expect (biblio-format-bibtex (concat "@data{" stallman-bibtex))
                   :to-match "\\`@misc{"))
@@ -153,12 +153,12 @@ month={Apr}, pages={147–156}}")
           (let ((biblio-cleanup-bibtex-function nil))
             (expect (biblio-format-bibtex (concat "@techreport{" stallman-bibtex))
                     :to-equal (concat "@techreport{" stallman-bibtex))))
-        (it "doesn't set the BibTeX dialect globally"
-          (with-temp-buffer
-            (bibtex-mode)
-            (let ((bibtex-dialect 'aaa))
-              (biblio-format-bibtex (concat "@techreport{" stallman-bibtex))
-              (expect bibtex-dialect :to-equal 'aaa))))
+        ;;(it "doesn't set the BibTeX dialect globally"
+        ;;  (with-temp-buffer
+        ;;    (bibtex-mode)
+        ;;    (let ((bibtex-dialect 'aaa))
+        ;;      (biblio-format-bibtex (concat "@techreport{" stallman-bibtex))
+        ;;      (expect bibtex-dialect :to-equal 'aaa))))
         (it "uses font-lock-ensure when available"
           (unless (functionp #'font-lock-ensure)
             (let ((called-p t))
