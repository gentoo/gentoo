--- a/src/image/convert.cxx
+++ b/src/image/convert.cxx
@@ -273,9 +273,9 @@ static void slow_fill_histogram (byte* pic24,int numpixels)
 
 static boxptr find_biggest_color_pop (boxptr boxlist, int numboxes)
 {
-  register boxptr boxp;
-  register int i;
-  register long maxc = 0;
+  boxptr boxp;
+  int i;
+  long maxc = 0;
   boxptr which = NULL;
   
   for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
@@ -290,9 +290,9 @@ static boxptr find_biggest_color_pop (boxptr boxlist, int numboxes)
 
 static boxptr find_biggest_volume (boxptr boxlist, int numboxes)
 {
-  register boxptr boxp;
-  register int i;
-  register INT32 maxv = 0;
+  boxptr boxp;
+  int i;
+  INT32 maxv = 0;
   boxptr which = NULL;
   
   for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
@@ -407,7 +407,7 @@ static int median_cut (boxptr boxlist, int numboxes, int desired_colors)
 {
   int n,lb;
   int c0,c1,c2,cmax;
-  register boxptr b1,b2;
+  boxptr b1,b2;
 
   while (numboxes < desired_colors) {
     /* Select box to split.
@@ -642,12 +642,12 @@ static void find_best_colors (int minc0,int minc1,int minc2,int numcolors,
 {
   int ic0, ic1, ic2;
   int i, icolor;
-  register INT32 * bptr;        /* pointer into bestdist[] array */
+  INT32 * bptr;        /* pointer into bestdist[] array */
   JSAMPLE * cptr;                /* pointer into bestcolor[] array */
   INT32 dist0, dist1;                /* initial distance values */
-  register INT32 dist2;                /* current distance in inner loop */
+  INT32 dist2;                /* current distance in inner loop */
   INT32 xx0, xx1;                /* distance increments */
-  register INT32 xx2;
+  INT32 xx2;
   INT32 inc0, inc1, inc2;        /* initial values for increments */
   /* This array holds the distance to the nearest-so-far color for each cell */
   INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];
@@ -710,8 +710,8 @@ static void fill_inverse_cmap (int c0, int c1, int c2)
   hist2d * histogram = sl_histogram;
   int minc0, minc1, minc2;        /* lower left corner of update box */
   int ic0, ic1, ic2;
-  register JSAMPLE * cptr;        /* pointer into bestcolor[] array */
-  register histptr cachep;        /* pointer into main cache array */
+  JSAMPLE * cptr;        /* pointer into bestcolor[] array */
+  histptr cachep;        /* pointer into main cache array */
   /* This array lists the candidate colormap indexes. */
   JSAMPLE colorlist[MAXNUMCOLORS];
   int numcolors;                /* number of candidate colors */
@@ -749,10 +749,10 @@ static void fill_inverse_cmap (int c0, int c1, int c2)
 
 static void slow_map_pixels (byte *pic24,int width,int height, byte* pic8)
 {
-  register LOCFSERROR cur0, cur1, cur2;        /* current error or pixel value */
+  LOCFSERROR cur0, cur1, cur2;        /* current error or pixel value */
   LOCFSERROR belowerr0, belowerr1, belowerr2; /* error for pixel below cur */
   LOCFSERROR bpreverr0, bpreverr1, bpreverr2; /* error for below/prev col */
-  register FSERRPTR errorptr;        /* => fserrors[] at column before current */
+  FSERRPTR errorptr;        /* => fserrors[] at column before current */
   JSAMPROW inptr;                /* => current input pixel */
   JSAMPROW outptr;                /* => current output pixel */
   histptr cachep;
@@ -814,7 +814,7 @@ static void slow_map_pixels (byte *pic24,int width,int height, byte* pic8)
       if (*cachep == 0)
         fill_inverse_cmap(cur0>>C0_SHIFT, cur1>>C1_SHIFT, cur2>>C2_SHIFT);
       /* Now emit the colormap index for this cell */
-      { register int pixcode = *cachep - 1;
+      { int pixcode = *cachep - 1;
         *outptr = (JSAMPLE) pixcode;
         /* Compute representation error for this pixel */
         cur0 -= (int) colormap0[pixcode];
@@ -825,7 +825,7 @@ static void slow_map_pixels (byte *pic24,int width,int height, byte* pic8)
        * Add these into the running sums, and simultaneously shift the
        * next-line error sums left by 1 column.
        */
-      { register LOCFSERROR bnexterr, delta;
+      { LOCFSERROR bnexterr, delta;
 
         bnexterr = cur0;        /* Process component 0 */
         delta = cur0 * 2;
--- a/src/image/sublib/IMG_gif.c
+++ b/src/image/sublib/IMG_gif.c
@@ -406,7 +406,7 @@ LWZReadByte(SDL_RWops *src, int flag, int input_code_size)
     static int clear_code, end_code;
     static int table[2][(1 << MAX_LWZ_BITS)];
     static int stack[(1 << (MAX_LWZ_BITS)) * 2], *sp;
-    register int i;
+    int i;
 
     if (flag) {
 	set_code_size = input_code_size;
