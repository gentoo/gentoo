https://gitlab.gnome.org/GNOME/gdm/-/merge_requests/113

From 462cc0f5346f5913cf7151044f1c232c5d21c1c3 Mon Sep 17 00:00:00 2001
From: Dudemanguy <random342@airmail.cc>
Date: Mon, 5 Oct 2020 18:41:55 -0500
Subject: [PATCH] meson: allow building with elogind

Currently, the GDM meson build has a hard dependency on systemd.
However, GDM can function just fine if one is using elogind. This allows
a user to build GDM against libelogind and also disable the systemd
system and user units.
---
 common/meson.build                       |  2 +-
 data/meson.build                         | 62 ++++++++++++++----------
 data/pam-arch/gdm-launch-environment.pam |  1 +
 libgdm/meson.build                       |  2 +-
 meson.build                              | 36 +++++++++-----
 meson_options.txt                        |  5 +-
 6 files changed, 66 insertions(+), 42 deletions(-)

diff --git a/common/meson.build b/common/meson.build
index 074dd92e1..bca58f7c4 100644
--- a/common/meson.build
+++ b/common/meson.build
@@ -11,7 +11,7 @@ libgdmcommon_src = files(
 )
 
 libgdmcommon_deps = [
-  libsystemd_dep,
+  logind_dep,
   gobject_dep,
   gio_dep,
   gio_unix_dep,
diff --git a/data/meson.build b/data/meson.build
index 7c5222eaf..403336c31 100644
--- a/data/meson.build
+++ b/data/meson.build
@@ -168,41 +168,53 @@ else
   service_config.set('PLYMOUTH_QUIT_SERVICE', '')
 endif
 
-if get_option('systemdsystemunitdir') != ''
-  systemd_systemunitdir = get_option('systemdsystemunitdir')
-else
-  systemd_systemunitdir = systemd_dep.get_pkgconfig_variable('systemdsystemunitdir')
+systemdsystemunitdir = get_option('systemdsystemunitdir')
+if systemdsystemunitdir != 'no'
+  assert(systemd_dep.found(), 'systemd required but not found, please provide a valid systemd system unit dir or disable it')
+  if get_option('systemdsystemunitdir') != ''
+    systemd_systemunitdir = get_option('systemdsystemunitdir')
+  else
+    systemd_systemunitdir = systemd_dep.get_pkgconfig_variable('systemdsystemunitdir')
+  endif
 endif
 
-if get_option('systemduserunitdir') != ''
-  systemd_userunitdir = get_option('systemduserunitdir')
-else
-  systemd_userunitdir = systemd_dep.get_pkgconfig_variable('systemduserunitdir',
-                                                           define_variable: ['prefix', get_option('prefix')])
+systemduserunitdir = get_option('systemduserunitdir')
+if systemduserunitdir != 'no'
+  assert(systemd_dep.found(), 'systemd required but not found, please provide a valid systemd user unit dir or disable it')
+  if get_option('systemduserunitdir') != ''
+    systemd_userunitdir = get_option('systemduserunitdir')
+  else
+    systemd_userunitdir = systemd_dep.get_pkgconfig_variable('systemduserunitdir',
+                                                             define_variable: ['prefix', get_option('prefix')])
+  endif
 endif
 
-configure_file(
-  input: 'gdm.service.in',
-  output: '@BASENAME@',
-  configuration: service_config,
-  install_dir: systemd_systemunitdir,
-  format: 'cmake'
-)
+if systemdsystemunitdir != 'no'
+  configure_file(
+    input: 'gdm.service.in',
+    output: '@BASENAME@',
+    configuration: service_config,
+    install_dir: systemd_systemunitdir,
+    format: 'cmake'
+  )
+endif
 
 gdm_gnome_session_wanted_targets = []
 foreach component: gdm_gnome_user_session_wanted_components
   gdm_gnome_session_wanted_targets += 'Wants=@0@.target'.format(component)
 endforeach
 
-configure_file(
-  input: 'session.conf.in',
-  output: 'session.conf',
-  configuration: {
-    'requires_component': gdm_gnome_shell_component,
-    'wants_required_components': '\n'.join(gdm_gnome_session_wanted_targets),
-  },
-  install_dir: systemd_userunitdir / 'gnome-session@gnome-login.target.d',
-)
+if systemduserunitdir != 'no'
+  configure_file(
+    input: 'session.conf.in',
+    output: 'session.conf',
+    configuration: {
+      'requires_component': gdm_gnome_shell_component,
+      'wants_required_components': '\n'.join(gdm_gnome_session_wanted_targets),
+    },
+    install_dir: systemd_userunitdir / 'gnome-session@gnome-login.target.d',
+  )
+endif
 
 # XSession
 if get_option('gdm-xsession')
diff --git a/libgdm/meson.build b/libgdm/meson.build
index 3f8cafbb7..83e95151b 100644
--- a/libgdm/meson.build
+++ b/libgdm/meson.build
@@ -56,7 +56,7 @@ libgdm_deps = [
   glib_dep,
   gio_dep,
   gio_unix_dep,
-  libsystemd_dep,
+  logind_dep,
   libgdmcommon_dep,
 ]
 
diff --git a/meson.build b/meson.build
index e6fcf4b8b..a86a486b7 100644
--- a/meson.build
+++ b/meson.build
@@ -92,21 +92,30 @@ xdmcp_dep = cc.find_library('Xdmcp', required: get_option('xdmcp'))
 if xdmcp_dep.found() and get_option('tcp-wrappers')
   libwrap_dep = cc.find_library('libwrap')
 endif
-# systemd
-systemd_dep = dependency('systemd')
-libsystemd_dep = dependency('libsystemd')
-if meson.version().version_compare('>= 0.53')
-  systemd_multiseat_x = find_program('systemd-multi-seat-x',
-    required: false,
-    dirs: [
-      systemd_dep.get_pkgconfig_variable('systemdutildir'),
-      '/lib/systemd',
-      '/usr/lib/systemd',
-    ])
+
+logind_provider = get_option('logind-provider')
+systemd_dep = dependency('systemd', required: false)
+if logind_provider == 'systemd'
+  libsystemd_dep = dependency('libsystemd')
+  logind_dep = libsystemd_dep
+  if meson.version().version_compare('>= 0.53')
+    systemd_multiseat_x = find_program('systemd-multi-seat-x',
+      required: false,
+      dirs: [
+        systemd_dep.get_pkgconfig_variable('systemdutildir'),
+        '/lib/systemd',
+        '/usr/lib/systemd',
+      ])
+  else
+    systemd_multiseat_x = find_program('systemd-multi-seat-x', required: false)
+  endif
+  systemd_x_server = systemd_multiseat_x.found()? systemd_multiseat_x.path() : '/lib/systemd/systemd-multi-seat-x'
 else
-  systemd_multiseat_x = find_program('systemd-multi-seat-x', required: false)
+  elogind_dep = dependency('libelogind')
+  logind_dep = elogind_dep
+  systemd_x_server = 'disabled'
 endif
-systemd_x_server = systemd_multiseat_x.found()? systemd_multiseat_x.path() : '/lib/systemd/systemd-multi-seat-x'
+
 # Plymouth
 plymouth_dep = dependency('ply-boot-client', required: get_option('plymouth'))
 # Check for Solaris auditing API (ADT)
@@ -313,6 +322,7 @@ summary({
     'PAM Syslog': have_pam_syslog,
     'Supports PAM Extensions': pam_extensions_supported,
     'SeLinux': libselinux_dep.found(),
+    'Logind Provider': get_option('logind-provider'),
     'Use GDM Xsession': get_option('gdm-xsession'),
     'Use UserDisplayServer': get_option('user-display-server'),
     'Use SystemdJournal': get_option('systemd-journal'),
diff --git a/meson_options.txt b/meson_options.txt
index 14e0b908b..5135d7d66 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -12,6 +12,7 @@ option('initial-vt', type: 'integer', value: 1, description: 'Initial virtual te
 option('ipv6', type: 'boolean', value: false, description: 'Enables compilation of IPv6 code.')
 option('lang-file', type: 'string', value: '', description: 'File containing default language settings.')
 option('libaudit', type: 'feature', value: 'auto', description: 'Add Linux audit support.')
+option('logind-provider', type: 'combo', choices: ['systemd', 'elogind'], value: 'systemd', description: 'Which logind library to use.')
 option('log-dir', type: 'string', value: '/var/log/gdm', description: 'Log directory.')
 option('pam-mod-dir', type: 'string', value: '', description: 'Directory to install PAM modules in.')
 option('pam-prefix', type: 'string', value: '', description: 'Specify where PAM files go.')
@@ -27,8 +28,8 @@ option('solaris', type: 'boolean', value: false, description: 'Build for Solaris
 option('split-authentication', type: 'boolean', value: true, description: 'Enable multiple simultaneous PAM conversations during login.')
 option('sysconfsubdir', type: 'string', value: 'gdm', description: 'Directory name used under sysconfdir.')
 option('systemd-journal', type: 'boolean', value: true, description: 'Use journald support.')
-option('systemdsystemunitdir', type: 'string', value: '', description: 'Directory for systemd service files.')
-option('systemduserunitdir', type: 'string', value: '', description: 'Directory for systemd user service files.')
+option('systemdsystemunitdir', type: 'string', value: '', description: 'Directory for systemd service files, or \'no\' to disable.')
+option('systemduserunitdir', type: 'string', value: '', description: 'Directory for systemd user service files, or \'no\' to disable.')
 option('tcp-wrappers', type: 'boolean', value: false, description: 'Use TCP wrappers.')
 option('udev-dir', type: 'string', value: '', description: 'Directory for udev rules file.')
 option('user', type: 'string', value: 'gdm', description: 'GDM\'s username.')
-- 
GitLab

