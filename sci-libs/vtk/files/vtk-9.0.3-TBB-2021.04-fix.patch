Patch is based on following upstream commits:

56cf03534c58a21f3cea608e4f53b7e7e00670fc by Mickael PHILIT <mickey.phy@gmail.com>
ded89c1e3a025874bfd69feb6c67fa21d6af36d4 by Mickael PHILIT <mickey.phy@gmail.com>
3e5313e71c35aaeabfd4e65e090031716460d35e by Timoth√©e Couble <timothee.couble@kitware.com>

Backported by Vyacheslav Perestoronin <perestoronin@gmail.com>

Adapted by Vadim Misbakh-Soloviov <mva@gentoo.org>

--- a/CMake/FindTBB.cmake
+++ b/CMake/FindTBB.cmake
@@ -424,12 +424,18 @@ findpkg_finish(TBB_MALLOC_PROXY tbbmalloc_proxy)
 #=============================================================================
 #parse all the version numbers from tbb
 if(NOT TBB_VERSION)
-
- #only read the start of the file
- file(STRINGS
+  if (EXISTS "${TBB_INCLUDE_DIR}/oneapi/tbb/version.h")
+    file(STRINGS
+      "${TBB_INCLUDE_DIR}/oneapi/tbb/version.h"
+      TBB_VERSION_CONTENTS
+      REGEX "VERSION")
+  else()
+    #only read the start of the file
+    file(STRINGS
       "${TBB_INCLUDE_DIR}/tbb/tbb_stddef.h"
       TBB_VERSION_CONTENTS
       REGEX "VERSION")
+  endif()
 
   string(REGEX REPLACE
     ".*#define TBB_VERSION_MAJOR ([0-9]+).*" "\\1"
--- a/Common/Core/SMP/TBB/vtkSMPTools.cxx
+++ b/Common/Core/SMP/TBB/vtkSMPTools.cxx
@@ -22,47 +22,50 @@
 #define __TBB_NO_IMPLICIT_LINKAGE 1
 #endif
 
-#include <tbb/task_scheduler_init.h>
+#include <tbb/task_arena.h>
 
 #ifdef _MSC_VER
 #pragma pop_macro("__TBB_NO_IMPLICIT_LINKAGE")
 #endif
 
-struct vtkSMPToolsInit
-{
-  tbb::task_scheduler_init Init;
-
-  vtkSMPToolsInit(int numThreads)
-    : Init(numThreads)
-  {
-  }
-};
-
-static bool vtkSMPToolsInitialized = 0;
-static int vtkTBBNumSpecifiedThreads = 0;
+static tbb::task_arena taskArena;
 static vtkSimpleCriticalSection vtkSMPToolsCS;
 
 //--------------------------------------------------------------------------------
 void vtkSMPTools::Initialize(int numThreads)
 {
   vtkSMPToolsCS.Lock();
-  if (!vtkSMPToolsInitialized)
+
+  // If numThreads <= 0, don't create a task_arena
+  // and let TBB do the default thing.
+  if (numThreads > 0 && numThreads != taskArena.max_concurrency())
   {
-    // If numThreads <= 0, don't create a task_scheduler_init
-    // and let TBB do the default thing.
-    if (numThreads > 0)
+    if (taskArena.is_active())
     {
-      static vtkSMPToolsInit aInit(numThreads);
-      vtkTBBNumSpecifiedThreads = numThreads;
+      taskArena.terminate();
     }
-    vtkSMPToolsInitialized = true;
+    taskArena.initialize(numThreads);
   }
+
   vtkSMPToolsCS.Unlock();
 }
 
 //--------------------------------------------------------------------------------
 int vtkSMPTools::GetEstimatedNumberOfThreads()
 {
-  return vtkTBBNumSpecifiedThreads ? vtkTBBNumSpecifiedThreads
-                                   : tbb::task_scheduler_init::default_num_threads();
+  return taskArena.max_concurrency();
+}
+
+//------------------------------------------------------------------------------
+void vtk::detail::smp::vtkSMPTools_Impl_For_TBB(vtkIdType first, vtkIdType last, vtkIdType grain,
+  ExecuteFunctorPtrType functorExecuter, void* functor)
+{
+  if (taskArena.is_active())
+  {
+    taskArena.execute([&] { functorExecuter(functor, first, last, grain); });
+  }
+  else
+  {
+    functorExecuter(functor, first, last, grain);
+  }
 }
--- a/Common/Core/SMP/TBB/vtkSMPToolsInternal.h.in
+++ b/Common/Core/SMP/TBB/vtkSMPToolsInternal.h.in
@@ -12,7 +12,8 @@
      PURPOSE.  See the above copyright notice for more information.
 
 =========================================================================*/
-#include "vtkNew.h"
+
+#include "vtkCommonCoreModule.h" // For export macro
 
 #ifdef _MSC_VER
 #  pragma push_macro("__TBB_NO_IMPLICIT_LINKAGE")
@@ -34,6 +35,10 @@
 namespace smp
 {
 
+typedef void (*ExecuteFunctorPtrType)(void*, vtkIdType, vtkIdType, vtkIdType);
+void VTKCOMMONCORE_EXPORT vtkSMPTools_Impl_For_TBB(vtkIdType first, vtkIdType last, vtkIdType grain,
+  ExecuteFunctorPtrType functorExecuter, void* functor);
+
 //--------------------------------------------------------------------------------
 template <typename T>
 class FuncCall
@@ -43,22 +48,22 @@
   void operator=(const FuncCall&) = delete;
 
 public:
-  void operator() (const tbb::blocked_range<vtkIdType>& r) const
-  {
-      o.Execute(r.begin(), r.end());
+  void operator()(const tbb::blocked_range<vtkIdType>& r) const {
+    o.Execute(r.begin(), r.end());
   }
 
-  FuncCall (T& _o) : o(_o)
+  FuncCall(T& _o)
+    : o(_o)
   {
   }
 };
 
 //--------------------------------------------------------------------------------
 template <typename FunctorInternal>
-void vtkSMPTools_Impl_For(
-  vtkIdType first, vtkIdType last, vtkIdType grain,
-  FunctorInternal& fi)
+void ExecuteFunctor(void* functor, vtkIdType first, vtkIdType last, vtkIdType grain)
 {
+  FunctorInternal& fi = *reinterpret_cast<FunctorInternal*>(functor);
+
   vtkIdType n = last - first;
   if (!n)
   {
@@ -66,32 +71,37 @@
   }
   if (grain > 0)
   {
-    tbb::parallel_for(tbb::blocked_range<vtkIdType>(first, last, grain), FuncCall<FunctorInternal>(fi));
+    tbb::parallel_for(
+      tbb::blocked_range<vtkIdType>(first, last, grain), FuncCall<FunctorInternal>(fi));
   }
   else
   {
-    tbb::parallel_for(tbb::blocked_range<vtkIdType>(first, last), FuncCall<FunctorInternal>(fi));
+    tbb::parallel_for(
+      tbb::blocked_range<vtkIdType>(first, last), FuncCall<FunctorInternal>(fi));
   }
 }
 
 //--------------------------------------------------------------------------------
-template<typename RandomAccessIterator>
-void vtkSMPTools_Impl_Sort(RandomAccessIterator begin,
-                                  RandomAccessIterator end)
+template <typename FunctorInternal>
+void vtkSMPTools_Impl_For(vtkIdType first, vtkIdType last, vtkIdType grain, FunctorInternal& fi)
+{
+  vtkSMPTools_Impl_For_TBB(first, last, grain, ExecuteFunctor<FunctorInternal>, &fi);
+}
+
+//--------------------------------------------------------------------------------
+template <typename RandomAccessIterator>
+void vtkSMPTools_Impl_Sort(RandomAccessIterator begin, RandomAccessIterator end)
 {
   tbb::parallel_sort(begin, end);
 }
 
 //--------------------------------------------------------------------------------
-template<typename RandomAccessIterator, typename Compare>
-void vtkSMPTools_Impl_Sort(RandomAccessIterator begin,
-                                  RandomAccessIterator end,
-                                  Compare comp)
+template <typename RandomAccessIterator, typename Compare>
+void vtkSMPTools_Impl_Sort(RandomAccessIterator begin, RandomAccessIterator end, Compare comp)
 {
   tbb::parallel_sort(begin, end, comp);
 }
 
-
-}//namespace smp
-}//namespace detail
-}//namespace vtk
+} // namespace smp
+} // namespace detail
+} // namespace vtk
--- a/Common/Core/vtkSMPTools.h
+++ b/Common/Core/vtkSMPTools.h
@@ -228,11 +228,8 @@ public:
    * Initialize the underlying libraries for execution. This is
    * not required as it is automatically called before the first
    * execution of any parallel code. However, it can be used to
-   * control the maximum number of threads used when the back-end
-   * supports it (currently Simple and TBB only). Make sure to call
-   * it before any other parallel operation.
-   * When using Kaapi, use the KAAPI_CPUCOUNT env. variable to control
-   * the number of threads used in the thread pool.
+   * control the maximum number of threads used. Make sure to call
+   * it before the parallel operation.
    */
   static void Initialize(int numThreads = 0);
 
