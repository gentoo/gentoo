--- opencascade-6.9.1/configure.ac
+++ opencascade-6.9.1/configure.ac
@@ -1044,7 +1044,7 @@
     fi
     if test "x$vtk_lib" != "x"; then
       CSF_VTK_LIB="-L$vtk_lib -lvtkCommonCore -lvtkCommonDataModel -lvtkCommonExecutionModel -lvtkCommonMath -lvtkCommonTransforms "
-      CSF_VTK_LIB="${CSF_VTK_LIB} -lvtkRenderingCore -lvtkRenderingOpenGL  -lvtkFiltersGeneral -lvtkIOCore -lvtkIOImage -lvtkImagingCore -lvtkInteractionStyle "
+      CSF_VTK_LIB="${CSF_VTK_LIB} -lvtkRenderingCore -lvtkRenderingOpenGL2  -lvtkFiltersGeneral -lvtkIOCore -lvtkIOImage -lvtkImagingCore -lvtkInteractionStyle "
     else
       HAVE_VTK=no
     fi
--- opencascade-6.9.1/src/IVtkVTK/IVtkVTK_View.cxx
+++ opencascade-6.9.1/src/IVtkVTK/IVtkVTK_View.cxx
@@ -151,7 +151,7 @@ bool IVtkVTK_View::DisplayToWorld (const gp_XY& theDisplayPnt, gp_XYZ& theWorldP
   myRenderer->SetDisplayPoint (theDisplayPnt.X(), theDisplayPnt.Y(), 0.0);
   myRenderer->DisplayToWorld();
 
-  vtkFloatingPointType* const aCoords = myRenderer->GetWorldPoint();
+  double* const aCoords = myRenderer->GetWorldPoint();
   if (aCoords[3] == 0.0) // Point at infinity in homogeneous coordinates
   {
     return false;
--- opencascade-6.9.1/src/IVtkTools/IVtkTools_ShapePicker.cxx
+++ opencascade-6.9.1/src/IVtkTools/IVtkTools_ShapePicker.cxx
@@ -73,15 +73,15 @@ float IVtkTools_ShapePicker::GetTolerance( ) const
 //  Method: convertDisplayToWorld
 // Purpose: Convert display coordinates to world coordinates
 //============================================================================
-bool IVtkTools_ShapePicker::convertDisplayToWorld (vtkRenderer         *theRenderer,
-                                                   vtkFloatingPointType theDisplayCoord[3],
-                                                   vtkFloatingPointType theWorldCoord[3])
+bool IVtkTools_ShapePicker::convertDisplayToWorld (vtkRenderer *theRenderer,
+                                                   double theDisplayCoord[3],
+                                                   double theWorldCoord[3])
 {
   // Convert the selection point into world coordinates.
   theRenderer->SetDisplayPoint (theDisplayCoord[0], theDisplayCoord[1], theDisplayCoord[2]);
   theRenderer->DisplayToWorld();
 
-  vtkFloatingPointType* const aCoords = theRenderer->GetWorldPoint();
+  double* const aCoords = theRenderer->GetWorldPoint();
   if (aCoords[3] == 0.0)
   {
     return false;
--- opencascade-6.9.1/src/IVtkTools/IVtkTools_ShapePicker.hxx
+++ opencascade-6.9.1/src/IVtkTools/IVtkTools_ShapePicker.hxx
@@ -124,8 +124,8 @@ protected:
 
   //! Convert display coordinates to world coordinates
   static bool convertDisplayToWorld (vtkRenderer *theRenderer,
-                                     vtkFloatingPointType theDisplayCoord[3],
-                                     vtkFloatingPointType theWorldCoord[3] );
+                                     double theDisplayCoord[3],
+                                     double theWorldCoord[3] );
 
 private: // not copyable
   IVtkTools_ShapePicker (const IVtkTools_ShapePicker&);
--- opencascade-6.9.1/inc/IVtkTools_ShapePicker.hxx
+++ opencascade-6.9.1/inc/IVtkTools_ShapePicker.hxx
@@ -124,8 +124,8 @@
 
   //! Convert display coordinates to world coordinates
   static bool convertDisplayToWorld (vtkRenderer *theRenderer,
-                                     vtkFloatingPointType theDisplayCoord[3],
-                                     vtkFloatingPointType theWorldCoord[3] );
+                                     double theDisplayCoord[3],
+                                     double theWorldCoord[3] );
 
 private: // not copyable
   IVtkTools_ShapePicker (const IVtkTools_ShapePicker&);
