--- a/libkineto/CMakeLists.txt	2022-05-24 11:16:18.537610972 +0200
+++ b/libkineto/CMakeLists.txt	2022-05-24 11:19:15.011073535 +0200
@@ -78,10 +78,10 @@
 set_target_properties(kineto_base kineto_api PROPERTIES
       CXX_STANDARD 14
       CXX_STANDARD_REQUIRED YES
-      CXX_EXTENSIONS NO
-      CXX_VISIBILITY_PRESET hidden)
+      CXX_EXTENSIONS NO)
 
-set(KINETO_COMPILE_OPTIONS "-DKINETO_NAMESPACE=libkineto")
+set(KINETO_COMPILE_OPTIONS "-DKINETO_NAMESPACE=libkineto"
+        ${CMAKE_SHARED_LIBRARY_C_FLAGS})
 list(APPEND KINETO_COMPILE_OPTIONS "-DFMT_HEADER_ONLY")
 if(NOT MSVC)
   list(APPEND KINETO_COMPILE_OPTIONS "-std=c++14")
@@ -100,7 +102,7 @@
 target_compile_options(kineto_base PRIVATE "${KINETO_COMPILE_OPTIONS}")
 target_compile_options(kineto_api PRIVATE "${KINETO_COMPILE_OPTIONS}")
 
-if(NOT TARGET fmt)
+if(FALSE)
   if(NOT FMT_SOURCE_DIR)
     set(FMT_SOURCE_DIR "${LIBKINETO_THIRDPARTY_DIR}/fmt"
       CACHE STRING "fmt source directory from submodules")
@@ -118,9 +120,7 @@
   set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS} CACHE BOOL "Build shared libs" FORCE)
 endif()
 
-set(FMT_INCLUDE_DIR "${FMT_SOURCE_DIR}/include")
 message(STATUS "Kineto: FMT_SOURCE_DIR = ${FMT_SOURCE_DIR}")
-message(STATUS "Kineto: FMT_INCLUDE_DIR = ${FMT_INCLUDE_DIR}")
 if (NOT CUPTI_INCLUDE_DIR)
     set(CUPTI_INCLUDE_DIR "${CUDA_SOURCE_DIR}/extras/CUPTI/include")
 endif()
@@ -140,14 +140,12 @@
 target_include_directories(kineto_base PUBLIC
       $<BUILD_INTERFACE:${LIBKINETO_INCLUDE_DIR}>
       $<BUILD_INTERFACE:${LIBKINETO_SOURCE_DIR}>
-      $<BUILD_INTERFACE:${FMT_INCLUDE_DIR}>
       $<BUILD_INTERFACE:${CUPTI_INCLUDE_DIR}>
       $<BUILD_INTERFACE:${CUDA_INCLUDE_DIRS}>
       $<BUILD_INTERFACE:${ROCTRACER_INCLUDE_DIR}>
       $<BUILD_INTERFACE:${ROCM_INCLUDE_DIRS}>)
 
 target_include_directories(kineto_api PUBLIC
-      $<BUILD_INTERFACE:${FMT_INCLUDE_DIR}>
       $<BUILD_INTERFACE:${LIBKINETO_INCLUDE_DIR}>)
 
 if(KINETO_LIBRARY_TYPE STREQUAL "default")
@@ -178,8 +180,6 @@
 if(NOT LIBKINETO_NOCUPTI)
   target_link_libraries(kineto "${CUDA_cupti_LIBRARY}")
 endif()
-target_link_libraries(kineto $<BUILD_INTERFACE:fmt::fmt-header-only>)
-add_dependencies(kineto fmt::fmt-header-only)
 
 install(TARGETS kineto EXPORT kinetoLibraryConfig
   ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
--- a/libkineto/libkineto_defs.bzl	2022-05-24 22:06:17.324000422 +0200
+++ b/libkineto/libkineto_defs.bzl	2022-05-24 22:07:08.326419268 +0200
@@ -46,6 +46,7 @@
         "src/init.cpp",
         "src/output_csv.cpp",
         "src/output_json.cpp",
+        "src/ILoggerObserver.cpp",
     ] + (get_libkineto_api_srcs() if with_api else [])
 
 def get_libkineto_public_headers():
@@ -51,6 +56,7 @@
     return [
         "include/AbstractConfig.h",
         "include/ActivityProfilerInterface.h",
+        "include/ActivityTraceInterface.h",
         "include/ActivityType.h",
         "include/Config.h",
         "include/ClientInterface.h",
