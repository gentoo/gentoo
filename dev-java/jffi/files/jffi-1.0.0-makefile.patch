--- jni/GNUmakefile	2010-03-12 12:06:39.000000000 +1300
+++ jni/GNUmakefile	2010-03-12 12:13:44.000000000 +1300
@@ -65,7 +65,7 @@
 
 # MacOS headers aren't completely warning free, so turn them off
 ifneq ($(OS),darwin)
-  WFLAGS = -W -Werror -Wall -Wno-unused -Wno-parentheses -Wundef
+  WFLAGS = -W -Wall -Wno-unused -Wno-parentheses -Wundef
 endif
 PICFLAGS = -fPIC
 SOFLAGS = # Filled in for each OS specifically
@@ -78,9 +78,9 @@
 
 JDK_INCLUDES = -I"$(JDK_HOME)/include" -I"$(JDK_HOME)/include/$(OS)"
 IFLAGS = -I"$(BUILD_DIR)" -I"$(BUILD_DIR)"/jni -I$(SRC_DIR) -I"$(JFFI_SRC_DIR)"
-CFLAGS = $(OFLAGS) $(WFLAGS) $(IFLAGS) $(PICFLAGS) $(JDK_INCLUDES) $(LIBFFI_CFLAGS)
+CFLAGS += $(OFLAGS) $(WFLAGS) $(IFLAGS) $(PICFLAGS) $(JDK_INCLUDES) $(LIBFFI_CFLAGS)
 CFLAGS += -D_REENTRANT -D_LARGEFILE64_SOURCE -D_GNU_SOURCE
-CXXFLAGS = $(OFLAGS) $(IFLAGS) $(PICFLAGS) $(JDK_INCLUDES) $(LIBFFI_CFLAGS)
+CXXFLAGS += $(OFLAGS) $(IFLAGS) $(PICFLAGS) $(JDK_INCLUDES) $(LIBFFI_CFLAGS)
 
 ifeq ($(OS), win64)
   override CPU = x86_64
@@ -258,58 +258,6 @@
 	@mkdir -p $(@D)
 	$(CCACHE) $(CXX) $(CXXFLAGS) -c $< -o $@
 
-
-ifeq ($(OS), darwin)
-build_ffi = \
-	mkdir -p $(BUILD_DIR)/libffi-darwin-$(1); \
-	(if [ ! -f $(BUILD_DIR)/libffi-darwin-$(1)/Makefile ]; then \
-	    echo "Configuring libffi for $(1)"; \
-	    cd $(BUILD_DIR)/libffi-darwin-$(1) && \
-	      env CC="$(CCACHE) $(CC)" CFLAGS="-arch $(1) $(FFI_CFLAGS)" LDFLAGS="-arch $(1)" \
-		$(LIBFFI_CONFIGURE) --host=$(1)-apple-darwin > /dev/null; \
-	fi); \
-	env MACOSX_DEPLOYMENT_TARGET=10.5 $(MAKE) -C $(BUILD_DIR)/libffi-darwin-$(1)
-	
-$(LIBFFI):
-	@mkdir -p $(@D)
-	@for arch in $(ARCHES); do $(call build_ffi,$$arch);done
-	
-	# Assemble into a FAT (i386, x86_64, ppc) library
-	@mkdir -p $(BUILD_DIR)/libffi/.libs
-	@env MACOSX_DEPLOYMENT_TARGET=10.5 /usr/bin/libtool -static -o $@ \
-	    $(foreach arch, $(ARCHES),$(BUILD_DIR)/libffi-darwin-$(arch)/.libs/libffi_convenience.a)
-	@mkdir -p $(LIBFFI_BUILD_DIR)/include
-	$(RM) $(LIBFFI_BUILD_DIR)/include/ffi.h
-	@( \
-		printf "#if defined(__i386__)\n"; \
-		printf "#include \"libffi-darwin-i386/include/ffi.h\"\n"; \
-		printf "#elif defined(__x86_64__)\n"; \
-		printf "#include \"libffi-darwin-x86_64/include/ffi.h\"\n";\
-		printf "#elif defined(__ppc__)\n"; \
-		printf "#include \"libffi-darwin-ppc/include/ffi.h\"\n";\
-		printf "#endif\n";\
-	) > $(LIBFFI_BUILD_DIR)/include/ffi.h
-	@( \
-		printf "#if defined(__i386__)\n"; \
-		printf "#include \"libffi-darwin-i386/include/ffitarget.h\"\n"; \
-		printf "#elif defined(__x86_64__)\n"; \
-		printf "#include \"libffi-darwin-x86_64/include/ffitarget.h\"\n";\
-		printf "#elif defined(__ppc__)\n"; \
-		printf "#include \"libffi-darwin-ppc/include/ffitarget.h\"\n";\
-		printf "#endif\n";\
-	) > $(LIBFFI_BUILD_DIR)/include/ffitarget.h
-else
-$(LIBFFI):		
-	@mkdir -p $(LIBFFI_BUILD_DIR)
-	@if [ ! -f $(LIBFFI_BUILD_DIR)/Makefile ]; then \
-	    echo "Configuring libffi for $(PLATFORM)"; \
-	    cd $(LIBFFI_BUILD_DIR) && env CC="$(FFI_CC)" LD="$(FFI_LD)" CFLAGS="$(FFI_CFLAGS)" \
-		$(LIBFFI_CONFIGURE) > /dev/null; \
-	fi
-	$(MAKE) -C $(LIBFFI_BUILD_DIR)
-endif
-
-
 clean::
 	# nothing to do - ant will delete the build dir
 
