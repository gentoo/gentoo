From 14877233e1f15f400b84cccd79c0171a911298d8 Mon Sep 17 00:00:00 2001
From: Ambarish Rapte <arapte@openjdk.org>
Date: Mon, 9 Oct 2023 19:14:25 +0530
Subject: [PATCH] remove gradle7.6 warnings

---
 build.gradle | 74 ++++++++++++++++++++++++++++++++++++++--------------
 1 file changed, 54 insertions(+), 20 deletions(-)

diff --git a/build.gradle b/build.gradle
index e812643a118..eb8a8815404 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1040,9 +1040,9 @@ List<String> computeModulePathArgs(String  pname, List<String> deps, boolean tes
 
             File dir;
             if (test && proj.sourceSets.hasProperty('shims')) {
-                dir = new File(proj.sourceSets.shims.java.outputDir, proj.ext.moduleName);
+                dir = new File(proj.sourceSets.shims.java.getDestinationDirectory().get().getAsFile(), proj.ext.moduleName);
             } else {
-                dir = new File(proj.sourceSets.main.java.outputDir, proj.ext.moduleName);
+                dir = new File(proj.sourceSets.main.java.getDestinationDirectory().get().getAsFile(), proj.ext.moduleName);
             }
             if (mp == null) {
                 mp = dir.path
@@ -1140,9 +1140,9 @@ void commonModuleSetup(Project p, List<String> moduleChain) {
     p.ext.moduleChain = moduleChain
 
     if (p.hasProperty("moduleName")) {
-        p.ext.moduleDir = new File (p.sourceSets.main.java.outputDir, "${p.moduleName}")
+        p.ext.moduleDir = new File (p.sourceSets.main.java.getDestinationDirectory().get().getAsFile(), "${p.moduleName}")
         if (p.sourceSets.hasProperty('shims')) {
-            p.ext.moduleShimsDir = new File (p.sourceSets.shims.java.outputDir, "${p.moduleName}")
+            p.ext.moduleShimsDir = new File (p.sourceSets.shims.java.getDestinationDirectory().get().getAsFile(), "${p.moduleName}")
         }
     }
 
@@ -1589,7 +1589,7 @@ void addNative(Project project, String name) {
 void addJSL(Project project, String name, String pkg, List<String> addExports, Closure compile) {
     def lowerName = name.toLowerCase()
 
-    def modulePath = "${project.sourceSets.main.java.outputDir}"
+    def modulePath = "${project.sourceSets.main.java.getDestinationDirectory().get().getAsFile()}"
     modulePath += File.pathSeparator + "${rootProject.projectDir}/modules/javafx.base/build/classes/java/main"
     def compileCompilers = project.task("compile${name}Compilers",
             type: JavaCompile,
@@ -1597,7 +1597,7 @@ void addJSL(Project project, String name, String pkg, List<String> addExports, C
         description = "Compile the $name JSL Compilers"
 
         classpath =
-               project.files(project.sourceSets.jslc.java.outputDir) +
+               project.files(project.sourceSets.jslc.java.getDestinationDirectory().get().getAsFile()) +
                project.configurations.antlr
         source = [project.file("src/main/jsl-$lowerName")]
         destinationDir = project.file("$project.buildDir/classes/jsl-compilers/$lowerName")
@@ -2337,7 +2337,7 @@ project(":graphics") {
         source += "$buildDir/gensrc/java"
         source += project.sourceSets.shaders.output
 
-        destinationDir = project.sourceSets.main.java.outputDir
+        destinationDirectory = project.sourceSets.main.java.destinationDirectory
         options.compilerArgs.addAll([
             '-h', "$buildDir/gensrc/headers/",  // Note: this creates the native headers
             '-implicit:none',
@@ -2484,7 +2484,7 @@ project(":graphics") {
     // a new task for each of the decora files, preferring instead just to create a rule?? Also
     // need "clean" tasks for each compile task.
 
-    def modulePath = "${project.sourceSets.main.java.outputDir}"
+    def modulePath = "${project.sourceSets.main.java.getDestinationDirectory().get().getAsFile()}"
     modulePath += File.pathSeparator + "${rootProject.projectDir}/modules/javafx.base/build/classes/java/main"
     addJSL(project, "Decora", "com/sun/scenario/effect/impl/hw/d3d/hlsl", decoraAddExports) { sourceDir, destinationDir ->
         [[fileName: "ColorAdjust", generator: "CompileJSL", outputs: "-all"],
@@ -2502,7 +2502,7 @@ project(":graphics") {
                 workingDir = project.projectDir
                 main = settings.generator
                 classpath = configurations.compileClasspath + configurations.antlr
-                classpath += files(project.sourceSets.jslc.java.outputDir)
+                classpath += files(project.sourceSets.jslc.java.getDestinationDirectory().get().getAsFile())
 
                 classpath += files("${project.projectDir}/src/jslc/resources")
 
@@ -2542,7 +2542,7 @@ project(":graphics") {
             def capitalVariant = variant.capitalize()
             def ccOutput = variant == "" ? nativeDir : file("$nativeDir/$variant")
 
-            def ccTask = task("compileDecoraNativeShaders$capitalTarget$capitalVariant", type: CCTask ) {
+            def ccTask = task("compileDecoraNativeShaders$capitalTarget$capitalVariant", type: CCTask, dependsOn: generateDecoraShaders) {
                 description = "Compiles Decora SSE natives for ${t.name}${capitalVariant != '' ? ' for variant ' + capitalVariant : ''}"
                 matches = ".*\\.cc"
                 source file("$buildDir/gensrc/jsl-decora")
@@ -2591,7 +2591,7 @@ project(":graphics") {
                 workingDir = project.projectDir
                 main = "CompileJSL"
                 classpath = configurations.compileClasspath + configurations.antlr
-                classpath += files(project.sourceSets.jslc.java.outputDir)
+                classpath += files(project.sourceSets.jslc.java.getDestinationDirectory().get().getAsFile())
                 classpath += files(project.sourceSets.jslc.resources)
                 classpath += files("$buildDir/classes/jsl-compilers/prism",
                     project.projectDir.path + "/src/main/jsl-prism") // for the .stg
@@ -2712,7 +2712,7 @@ project(":controls") {
             "-DCSS_META_DATA_TEST_DIR=$cssDir"
     }
 
-    def modulePath = "${project.sourceSets.main.java.outputDir}"
+    def modulePath = "${project.sourceSets.main.java.getDestinationDirectory().get().getAsFile()}"
     modulePath += File.pathSeparator + "${rootProject.projectDir}/modules/javafx.graphics/build/classes/java/main"
     modulePath += File.pathSeparator + "${rootProject.projectDir}/modules/javafx.base/build/classes/java/main"
     processResources {
@@ -2735,11 +2735,14 @@ project(":controls") {
       }
     }
 
-    processShimsResources.dependsOn(project.task("copyShimBss", type: Copy) {
+    def copyShimBssTask = project.task("copyShimBss", type: Copy,
+                            dependsOn: [project.tasks.getByName("compileJava"),
+                                        project.tasks.getByName("processResources")]) {
         from project.moduleDir
         into project.moduleShimsDir
         include "**/*.bss"
-    })
+    }
+    processShimsResources.dependsOn(copyShimBssTask)
 
     addMavenPublication(project, [ 'graphics' ])
 
@@ -2958,7 +2961,7 @@ project(":media") {
 
     compileToolsJava {
         enabled = IS_COMPILE_MEDIA
-        def modulePath = "${project.sourceSets.main.java.outputDir}"
+        def modulePath = "${project.sourceSets.main.java.getDestinationDirectory().get().getAsFile()}"
         options.compilerArgs.addAll([
             "--module-path=$modulePath",
             "--add-modules=javafx.media",
@@ -2982,7 +2985,7 @@ project(":media") {
 
             mkdir generatedHeadersDir;
 
-            def modulePath = "${project.sourceSets.main.java.outputDir}"
+            def modulePath = "${project.sourceSets.main.java.getDestinationDirectory().get().getAsFile()}"
             modulePath += File.pathSeparator + "${rootProject.projectDir}/modules/javafx.graphics/build/classes/java/main"
             modulePath += File.pathSeparator + "${rootProject.projectDir}/modules/javafx.base/build/classes/java/main"
 
@@ -3909,7 +3912,7 @@ project(":systemTests") {
         destinationDirectory = file("$buildDir/testapp1")
         archiveFileName = testapp1JarName
         includeEmptyDirs = false
-        from project.sourceSets.testapp1.java.outputDir
+        from project.sourceSets.testapp1.java.getDestinationDirectory().get().getAsFile()
         include("testapp/**")
         include("com/javafx/main/**")
 
@@ -3930,7 +3933,7 @@ project(":systemTests") {
         destinationDirectory = file("$buildDir/testapp1")
         archiveFileName = "jar2.jar";
         includeEmptyDirs = false
-        from project.sourceSets.testapp1.java.outputDir
+        from project.sourceSets.testapp1.java.getDestinationDirectory().get().getAsFile()
         include("pkg2/**")
     }
 
@@ -3944,7 +3947,7 @@ project(":systemTests") {
     modtestapps.each { testapp ->
         def testappCapital = testapp.capitalize()
         def copyTestAppTask = task("copy${testappCapital}", type: Copy) {
-            from project.sourceSets."${testapp}".java.outputDir
+            from project.sourceSets."${testapp}".java.getDestinationDirectory().get().getAsFile()
             from project.sourceSets."${testapp}".output.resourcesDir
             into "${project.buildDir}/modules/${testapp}"
         }
@@ -4124,7 +4127,7 @@ allprojects {
         project.compileShimsJava.dependsOn(project.compileJava)
 
         def copyGeneratedShimsTask = task("copyGeneratedShims", type: Copy, dependsOn: [compileShimsJava, processShimsResources]) {
-            from project.sourceSets.shims.java.outputDir
+            from project.sourceSets.shims.java.getDestinationDirectory().get().getAsFile()
             into "${rootProject.buildDir}/shims"
             if (HAS_JAVAFX_MODULES) {
                 exclude("*/module-info.class")
@@ -5153,6 +5156,16 @@ compileTargets { t ->
                 */
         }
         buildModulesTask.dependsOn(buildModuleClassesTask)
+
+        if (project.tasks.getByName("modularJarStandalone$t.capital") != null) {
+            project.tasks.getByName("modularJarStandalone$t.capital").dependsOn(buildModuleClassesTask)
+        }
+        if (project.tasks.getByName("copyClassFiles$t.capital") != null) {
+            project.tasks.getByName("copyClassFiles$t.capital").dependsOn(buildModuleClassesTask)
+        }
+        if (project.tasks.getByName("modularPublicationJar$t.capital") != null) {
+            project.tasks.getByName("modularPublicationJar$t.capital").dependsOn(buildModuleClassesTask)
+        }
     }
 
     def buildModuleLibsTask = task("buildModuleLibs$t.capital") {
@@ -5221,6 +5234,11 @@ compileTargets { t ->
             }
         }
 
+        buildModuleBaseTask.mustRunAfter([
+            baseProject.tasks.getByName("copyLibFilesStandalone$t.capital"),
+            baseProject.tasks.getByName("copyLibFiles$t.capital"),
+            baseProject.tasks.getByName("modularPublicationJar$t.capital")])
+
         def buildModuleGraphicsTask = task("buildModuleGraphics$t.capital", type: Copy, dependsOn: graphicsProject.assemble) {
             group = "Basic"
             description = "copies javafx.graphics native libraries"
@@ -5288,6 +5306,10 @@ compileTargets { t ->
                 }
             }
         }
+        buildModuleGraphicsTask.mustRunAfter([
+            graphicsProject.tasks.getByName("copyLibFilesStandalone$t.capital"),
+            graphicsProject.tasks.getByName("copyLibFiles$t.capital"),
+            graphicsProject.tasks.getByName("modularPublicationJar$t.capital")])
 
         def buildModuleMediaTask = task("buildModuleMedia$t.capital", type: Copy, dependsOn: [mediaProject.assemble, prepOpenJfxStubs]) {
             group = "Basic"
@@ -5359,6 +5381,10 @@ compileTargets { t ->
                 }
             }
         }
+        buildModuleMediaTask.mustRunAfter([
+            mediaProject.tasks.getByName("copyLibFilesStandalone$t.capital"),
+            mediaProject.tasks.getByName("copyLibFiles$t.capital"),
+            mediaProject.tasks.getByName("modularPublicationJar$t.capital")])
 
         def buildModuleWeb = task("buildModuleWeb$t.capital", type: Copy, dependsOn: [webProject.assemble, prepOpenJfxStubs]) {
             group = "Basic"
@@ -5408,6 +5434,10 @@ compileTargets { t ->
                 }
             }
         }
+        buildModuleWeb.mustRunAfter([
+            webProject.tasks.getByName("copyLibFilesStandalone$t.capital"),
+            webProject.tasks.getByName("copyLibFiles$t.capital"),
+            webProject.tasks.getByName("modularPublicationJar$t.capital")])
 
         def buildModuleSWT = task("buildModuleSWT$t.capital", type: Copy) {
             group = "Basic"
@@ -5429,6 +5459,10 @@ compileTargets { t ->
             from "${swtProject.buildDir}/libs/javafx-swt.jar"
             into "${graphicsProject.buildDir}/${platformPrefix}module-lib"
         }
+        buildModuleSWT.mustRunAfter([
+            graphicsProject.tasks.getByName("copyLibFilesStandalone$t.capital"),
+            graphicsProject.tasks.getByName("copyLibFiles$t.capital"),
+            graphicsProject.tasks.getByName("modularPublicationJar$t.capital")])
 
         dependsOn(
             buildModuleBaseTask,
